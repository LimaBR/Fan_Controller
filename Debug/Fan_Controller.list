
Fan_Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007ef4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000274  08008000  08008000  00018000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008274  08008274  0002034c  2**0
                  CONTENTS
  4 .ARM          00000000  08008274  08008274  0002034c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008274  08008274  0002034c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008274  08008274  00018274  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008278  08008278  00018278  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000034c  20000000  0800827c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001234  2000034c  080085c8  0002034c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001580  080085c8  00021580  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002034c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001520f  00000000  00000000  00020375  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003062  00000000  00000000  00035584  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000fd8  00000000  00000000  000385e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e60  00000000  00000000  000395c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000171b4  00000000  00000000  0003a420  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e489  00000000  00000000  000515d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00074caa  00000000  00000000  0005fa5d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d4707  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004920  00000000  00000000  000d4784  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000034c 	.word	0x2000034c
 8000128:	00000000 	.word	0x00000000
 800012c:	08007fe8 	.word	0x08007fe8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000350 	.word	0x20000350
 8000148:	08007fe8 	.word	0x08007fe8

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800015c:	b480      	push	{r7}
 800015e:	b085      	sub	sp, #20
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
  if(htim->Instance == TIM2){
 8000164:	687b      	ldr	r3, [r7, #4]
 8000166:	681b      	ldr	r3, [r3, #0]
 8000168:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800016c:	d122      	bne.n	80001b4 <HAL_TIM_PeriodElapsedCallback+0x58>
    //Timer do input
    //HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
    for(int i=0; i<NUM_FANS; i++){
 800016e:	2300      	movs	r3, #0
 8000170:	60fb      	str	r3, [r7, #12]
 8000172:	e01c      	b.n	80001ae <HAL_TIM_PeriodElapsedCallback+0x52>
      if(!read[i]){
 8000174:	4a12      	ldr	r2, [pc, #72]	; (80001c0 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000176:	68fb      	ldr	r3, [r7, #12]
 8000178:	4413      	add	r3, r2
 800017a:	781b      	ldrb	r3, [r3, #0]
 800017c:	2b00      	cmp	r3, #0
 800017e:	d10e      	bne.n	800019e <HAL_TIM_PeriodElapsedCallback+0x42>
        freq[i] = 0;
 8000180:	4a10      	ldr	r2, [pc, #64]	; (80001c4 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000182:	68fb      	ldr	r3, [r7, #12]
 8000184:	2100      	movs	r1, #0
 8000186:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        rpm[i] = 0;
 800018a:	4a0f      	ldr	r2, [pc, #60]	; (80001c8 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 800018c:	68fb      	ldr	r3, [r7, #12]
 800018e:	2100      	movs	r1, #0
 8000190:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        timeout[i] = 1;
 8000194:	4a0d      	ldr	r2, [pc, #52]	; (80001cc <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000196:	68fb      	ldr	r3, [r7, #12]
 8000198:	4413      	add	r3, r2
 800019a:	2201      	movs	r2, #1
 800019c:	701a      	strb	r2, [r3, #0]
      }
      read[i] = 0;
 800019e:	4a08      	ldr	r2, [pc, #32]	; (80001c0 <HAL_TIM_PeriodElapsedCallback+0x64>)
 80001a0:	68fb      	ldr	r3, [r7, #12]
 80001a2:	4413      	add	r3, r2
 80001a4:	2200      	movs	r2, #0
 80001a6:	701a      	strb	r2, [r3, #0]
    for(int i=0; i<NUM_FANS; i++){
 80001a8:	68fb      	ldr	r3, [r7, #12]
 80001aa:	3301      	adds	r3, #1
 80001ac:	60fb      	str	r3, [r7, #12]
 80001ae:	68fb      	ldr	r3, [r7, #12]
 80001b0:	2b03      	cmp	r3, #3
 80001b2:	dddf      	ble.n	8000174 <HAL_TIM_PeriodElapsedCallback+0x18>
  }
  if(htim->Instance == TIM3){
    //Timer do PWM
    //HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
  }
}
 80001b4:	bf00      	nop
 80001b6:	3714      	adds	r7, #20
 80001b8:	46bd      	mov	sp, r7
 80001ba:	bc80      	pop	{r7}
 80001bc:	4770      	bx	lr
 80001be:	bf00      	nop
 80001c0:	200003b0 	.word	0x200003b0
 80001c4:	20000390 	.word	0x20000390
 80001c8:	200003a0 	.word	0x200003a0
 80001cc:	200003b4 	.word	0x200003b4

080001d0 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){ //A frequência está certa, prescaler 0x0080 (128)
 80001d0:	b580      	push	{r7, lr}
 80001d2:	b084      	sub	sp, #16
 80001d4:	af00      	add	r7, sp, #0
 80001d6:	6078      	str	r0, [r7, #4]
  if(htim->Instance == TIM2){
 80001d8:	687b      	ldr	r3, [r7, #4]
 80001da:	681b      	ldr	r3, [r3, #0]
 80001dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80001e0:	f040 808e 	bne.w	8000300 <HAL_TIM_IC_CaptureCallback+0x130>
    uint8_t chidx = 0;
 80001e4:	2300      	movs	r3, #0
 80001e6:	73fb      	strb	r3, [r7, #15]
    uint32_t chtim = 0;
 80001e8:	2300      	movs	r3, #0
 80001ea:	60bb      	str	r3, [r7, #8]
    //HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
    switch(htim->Channel){ //rising edge interrupt
 80001ec:	687b      	ldr	r3, [r7, #4]
 80001ee:	7f1b      	ldrb	r3, [r3, #28]
 80001f0:	3b01      	subs	r3, #1
 80001f2:	2b07      	cmp	r3, #7
 80001f4:	d826      	bhi.n	8000244 <HAL_TIM_IC_CaptureCallback+0x74>
 80001f6:	a201      	add	r2, pc, #4	; (adr r2, 80001fc <HAL_TIM_IC_CaptureCallback+0x2c>)
 80001f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80001fc:	0800021d 	.word	0x0800021d
 8000200:	08000227 	.word	0x08000227
 8000204:	08000245 	.word	0x08000245
 8000208:	08000231 	.word	0x08000231
 800020c:	08000245 	.word	0x08000245
 8000210:	08000245 	.word	0x08000245
 8000214:	08000245 	.word	0x08000245
 8000218:	0800023b 	.word	0x0800023b
    case HAL_TIM_ACTIVE_CHANNEL_1:
      chidx = 0;
 800021c:	2300      	movs	r3, #0
 800021e:	73fb      	strb	r3, [r7, #15]
      chtim = TIM_CHANNEL_1;
 8000220:	2300      	movs	r3, #0
 8000222:	60bb      	str	r3, [r7, #8]
      break;
 8000224:	e00f      	b.n	8000246 <HAL_TIM_IC_CaptureCallback+0x76>
    case HAL_TIM_ACTIVE_CHANNEL_2:
      chidx = 1;
 8000226:	2301      	movs	r3, #1
 8000228:	73fb      	strb	r3, [r7, #15]
      chtim = TIM_CHANNEL_2;
 800022a:	2304      	movs	r3, #4
 800022c:	60bb      	str	r3, [r7, #8]
      break;
 800022e:	e00a      	b.n	8000246 <HAL_TIM_IC_CaptureCallback+0x76>
    case HAL_TIM_ACTIVE_CHANNEL_3:
      chidx = 2;
 8000230:	2302      	movs	r3, #2
 8000232:	73fb      	strb	r3, [r7, #15]
      chtim = TIM_CHANNEL_3;
 8000234:	2308      	movs	r3, #8
 8000236:	60bb      	str	r3, [r7, #8]
      break;
 8000238:	e005      	b.n	8000246 <HAL_TIM_IC_CaptureCallback+0x76>
    case HAL_TIM_ACTIVE_CHANNEL_4:
      chidx = 3;
 800023a:	2303      	movs	r3, #3
 800023c:	73fb      	strb	r3, [r7, #15]
      chtim = TIM_CHANNEL_4;
 800023e:	230c      	movs	r3, #12
 8000240:	60bb      	str	r3, [r7, #8]
      break;
 8000242:	e000      	b.n	8000246 <HAL_TIM_IC_CaptureCallback+0x76>
    default:
      break;
 8000244:	bf00      	nop
    }
    IC_Val2[chidx] = HAL_TIM_ReadCapturedValue(htim, chtim);
 8000246:	68b9      	ldr	r1, [r7, #8]
 8000248:	6878      	ldr	r0, [r7, #4]
 800024a:	f002 ffc3 	bl	80031d4 <HAL_TIM_ReadCapturedValue>
 800024e:	4602      	mov	r2, r0
 8000250:	7bfb      	ldrb	r3, [r7, #15]
 8000252:	b291      	uxth	r1, r2
 8000254:	4a2c      	ldr	r2, [pc, #176]	; (8000308 <HAL_TIM_IC_CaptureCallback+0x138>)
 8000256:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    IC_Period16[chidx] = IC_Val2[chidx] - IC_Val1[chidx];
 800025a:	7bfb      	ldrb	r3, [r7, #15]
 800025c:	4a2a      	ldr	r2, [pc, #168]	; (8000308 <HAL_TIM_IC_CaptureCallback+0x138>)
 800025e:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000262:	7bfb      	ldrb	r3, [r7, #15]
 8000264:	4a29      	ldr	r2, [pc, #164]	; (800030c <HAL_TIM_IC_CaptureCallback+0x13c>)
 8000266:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800026a:	7bfb      	ldrb	r3, [r7, #15]
 800026c:	1a8a      	subs	r2, r1, r2
 800026e:	b291      	uxth	r1, r2
 8000270:	4a27      	ldr	r2, [pc, #156]	; (8000310 <HAL_TIM_IC_CaptureCallback+0x140>)
 8000272:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    period[chidx] = IC_Period16[chidx];
 8000276:	7bfb      	ldrb	r3, [r7, #15]
 8000278:	4a25      	ldr	r2, [pc, #148]	; (8000310 <HAL_TIM_IC_CaptureCallback+0x140>)
 800027a:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800027e:	7bfb      	ldrb	r3, [r7, #15]
 8000280:	4611      	mov	r1, r2
 8000282:	4a24      	ldr	r2, [pc, #144]	; (8000314 <HAL_TIM_IC_CaptureCallback+0x144>)
 8000284:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    if(period[chidx]){
 8000288:	7bfb      	ldrb	r3, [r7, #15]
 800028a:	4a22      	ldr	r2, [pc, #136]	; (8000314 <HAL_TIM_IC_CaptureCallback+0x144>)
 800028c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000290:	2b00      	cmp	r3, #0
 8000292:	d00e      	beq.n	80002b2 <HAL_TIM_IC_CaptureCallback+0xe2>
      freq[chidx] = (2*HAL_RCC_GetPCLK1Freq()/(128*period[chidx])); //Prescaler 128
 8000294:	f002 fa06 	bl	80026a4 <HAL_RCC_GetPCLK1Freq>
 8000298:	4603      	mov	r3, r0
 800029a:	0059      	lsls	r1, r3, #1
 800029c:	7bfb      	ldrb	r3, [r7, #15]
 800029e:	4a1d      	ldr	r2, [pc, #116]	; (8000314 <HAL_TIM_IC_CaptureCallback+0x144>)
 80002a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002a4:	01da      	lsls	r2, r3, #7
 80002a6:	7bfb      	ldrb	r3, [r7, #15]
 80002a8:	fbb1 f2f2 	udiv	r2, r1, r2
 80002ac:	491a      	ldr	r1, [pc, #104]	; (8000318 <HAL_TIM_IC_CaptureCallback+0x148>)
 80002ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    if(timeout[chidx]){ //Tem que ignorar a primeira leitura depois do timeout
 80002b2:	7bfb      	ldrb	r3, [r7, #15]
 80002b4:	4a19      	ldr	r2, [pc, #100]	; (800031c <HAL_TIM_IC_CaptureCallback+0x14c>)
 80002b6:	5cd3      	ldrb	r3, [r2, r3]
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d004      	beq.n	80002c6 <HAL_TIM_IC_CaptureCallback+0xf6>
      freq[chidx] = 0;
 80002bc:	7bfb      	ldrb	r3, [r7, #15]
 80002be:	4a16      	ldr	r2, [pc, #88]	; (8000318 <HAL_TIM_IC_CaptureCallback+0x148>)
 80002c0:	2100      	movs	r1, #0
 80002c2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    }
    rpm[chidx] = freq[chidx]*30; //O Hall pulsa duas vezes por revolução
 80002c6:	7bfb      	ldrb	r3, [r7, #15]
 80002c8:	4a13      	ldr	r2, [pc, #76]	; (8000318 <HAL_TIM_IC_CaptureCallback+0x148>)
 80002ca:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80002ce:	7bf9      	ldrb	r1, [r7, #15]
 80002d0:	4613      	mov	r3, r2
 80002d2:	011b      	lsls	r3, r3, #4
 80002d4:	1a9b      	subs	r3, r3, r2
 80002d6:	005b      	lsls	r3, r3, #1
 80002d8:	461a      	mov	r2, r3
 80002da:	4b11      	ldr	r3, [pc, #68]	; (8000320 <HAL_TIM_IC_CaptureCallback+0x150>)
 80002dc:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
    IC_Val1[chidx] = IC_Val2[chidx];
 80002e0:	7bfa      	ldrb	r2, [r7, #15]
 80002e2:	7bfb      	ldrb	r3, [r7, #15]
 80002e4:	4908      	ldr	r1, [pc, #32]	; (8000308 <HAL_TIM_IC_CaptureCallback+0x138>)
 80002e6:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 80002ea:	4a08      	ldr	r2, [pc, #32]	; (800030c <HAL_TIM_IC_CaptureCallback+0x13c>)
 80002ec:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    read[chidx] = 1;
 80002f0:	7bfb      	ldrb	r3, [r7, #15]
 80002f2:	4a0c      	ldr	r2, [pc, #48]	; (8000324 <HAL_TIM_IC_CaptureCallback+0x154>)
 80002f4:	2101      	movs	r1, #1
 80002f6:	54d1      	strb	r1, [r2, r3]
    timeout[chidx] = 0;
 80002f8:	7bfb      	ldrb	r3, [r7, #15]
 80002fa:	4a08      	ldr	r2, [pc, #32]	; (800031c <HAL_TIM_IC_CaptureCallback+0x14c>)
 80002fc:	2100      	movs	r1, #0
 80002fe:	54d1      	strb	r1, [r2, r3]
  }
}
 8000300:	bf00      	nop
 8000302:	3710      	adds	r7, #16
 8000304:	46bd      	mov	sp, r7
 8000306:	bd80      	pop	{r7, pc}
 8000308:	20000370 	.word	0x20000370
 800030c:	20000368 	.word	0x20000368
 8000310:	20000378 	.word	0x20000378
 8000314:	20000380 	.word	0x20000380
 8000318:	20000390 	.word	0x20000390
 800031c:	200003b4 	.word	0x200003b4
 8000320:	200003a0 	.word	0x200003a0
 8000324:	200003b0 	.word	0x200003b0

08000328 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000328:	b590      	push	{r4, r7, lr}
 800032a:	b095      	sub	sp, #84	; 0x54
 800032c:	af02      	add	r7, sp, #8
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800032e:	f000 fc07 	bl	8000b40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000332:	f000 f871 	bl	8000418 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000336:	f000 f9d7 	bl	80006e8 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 800033a:	f006 f867 	bl	800640c <MX_USB_DEVICE_Init>
  MX_TIM2_Init();
 800033e:	f000 f8c5 	bl	80004cc <MX_TIM2_Init>
  MX_TIM3_Init();
 8000342:	f000 f939 	bl	80005b8 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 8000346:	2100      	movs	r1, #0
 8000348:	482e      	ldr	r0, [pc, #184]	; (8000404 <main+0xdc>)
 800034a:	f002 fbb9 	bl	8002ac0 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_2);
 800034e:	2104      	movs	r1, #4
 8000350:	482c      	ldr	r0, [pc, #176]	; (8000404 <main+0xdc>)
 8000352:	f002 fbb5 	bl	8002ac0 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_3);
 8000356:	2108      	movs	r1, #8
 8000358:	482a      	ldr	r0, [pc, #168]	; (8000404 <main+0xdc>)
 800035a:	f002 fbb1 	bl	8002ac0 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_4);
 800035e:	210c      	movs	r1, #12
 8000360:	4828      	ldr	r0, [pc, #160]	; (8000404 <main+0xdc>)
 8000362:	f002 fbad 	bl	8002ac0 <HAL_TIM_IC_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 8000366:	4827      	ldr	r0, [pc, #156]	; (8000404 <main+0xdc>)
 8000368:	f002 faaf 	bl	80028ca <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 800036c:	4826      	ldr	r0, [pc, #152]	; (8000408 <main+0xe0>)
 800036e:	f002 faac 	bl	80028ca <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim3,TIM_CHANNEL_1);
 8000372:	2100      	movs	r1, #0
 8000374:	4824      	ldr	r0, [pc, #144]	; (8000408 <main+0xe0>)
 8000376:	f002 faff 	bl	8002978 <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim3,TIM_CHANNEL_2);
 800037a:	2104      	movs	r1, #4
 800037c:	4822      	ldr	r0, [pc, #136]	; (8000408 <main+0xe0>)
 800037e:	f002 fafb 	bl	8002978 <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim3,TIM_CHANNEL_3);
 8000382:	2108      	movs	r1, #8
 8000384:	4820      	ldr	r0, [pc, #128]	; (8000408 <main+0xe0>)
 8000386:	f002 faf7 	bl	8002978 <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim3,TIM_CHANNEL_4);
 800038a:	210c      	movs	r1, #12
 800038c:	481e      	ldr	r0, [pc, #120]	; (8000408 <main+0xe0>)
 800038e:	f002 faf3 	bl	8002978 <HAL_TIM_PWM_Start_IT>

  TIM3->CCR1 = 512;
 8000392:	4b1e      	ldr	r3, [pc, #120]	; (800040c <main+0xe4>)
 8000394:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000398:	635a      	str	r2, [r3, #52]	; 0x34
  TIM3->CCR2 = 512;
 800039a:	4b1c      	ldr	r3, [pc, #112]	; (800040c <main+0xe4>)
 800039c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80003a0:	639a      	str	r2, [r3, #56]	; 0x38
  TIM3->CCR3 = 512;
 80003a2:	4b1a      	ldr	r3, [pc, #104]	; (800040c <main+0xe4>)
 80003a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80003a8:	63da      	str	r2, [r3, #60]	; 0x3c
  TIM3->CCR4 = 512;
 80003aa:	4b18      	ldr	r3, [pc, #96]	; (800040c <main+0xe4>)
 80003ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80003b0:	641a      	str	r2, [r3, #64]	; 0x40
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    for(int i=0; i<TRANSMIT_SIZE-1; i++){
 80003b2:	2300      	movs	r3, #0
 80003b4:	647b      	str	r3, [r7, #68]	; 0x44
 80003b6:	e007      	b.n	80003c8 <main+0xa0>
      usbbuf[i] = 0;
 80003b8:	1d3a      	adds	r2, r7, #4
 80003ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80003bc:	4413      	add	r3, r2
 80003be:	2200      	movs	r2, #0
 80003c0:	701a      	strb	r2, [r3, #0]
    for(int i=0; i<TRANSMIT_SIZE-1; i++){
 80003c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80003c4:	3301      	adds	r3, #1
 80003c6:	647b      	str	r3, [r7, #68]	; 0x44
 80003c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80003ca:	2b3e      	cmp	r3, #62	; 0x3e
 80003cc:	ddf4      	ble.n	80003b8 <main+0x90>
    }
    sprintf(usbbuf, "W%08lX-%08lX-%08lX-%08lX-X", rpm[0], rpm[1], rpm[2], rpm[3]);
 80003ce:	4b10      	ldr	r3, [pc, #64]	; (8000410 <main+0xe8>)
 80003d0:	6819      	ldr	r1, [r3, #0]
 80003d2:	4b0f      	ldr	r3, [pc, #60]	; (8000410 <main+0xe8>)
 80003d4:	685c      	ldr	r4, [r3, #4]
 80003d6:	4b0e      	ldr	r3, [pc, #56]	; (8000410 <main+0xe8>)
 80003d8:	689b      	ldr	r3, [r3, #8]
 80003da:	4a0d      	ldr	r2, [pc, #52]	; (8000410 <main+0xe8>)
 80003dc:	68d2      	ldr	r2, [r2, #12]
 80003de:	1d38      	adds	r0, r7, #4
 80003e0:	9201      	str	r2, [sp, #4]
 80003e2:	9300      	str	r3, [sp, #0]
 80003e4:	4623      	mov	r3, r4
 80003e6:	460a      	mov	r2, r1
 80003e8:	490a      	ldr	r1, [pc, #40]	; (8000414 <main+0xec>)
 80003ea:	f006 fd09 	bl	8006e00 <siprintf>
    while(CDC_Transmit_FS(usbbuf, 38) == USBD_BUSY);
 80003ee:	bf00      	nop
 80003f0:	1d3b      	adds	r3, r7, #4
 80003f2:	2126      	movs	r1, #38	; 0x26
 80003f4:	4618      	mov	r0, r3
 80003f6:	f006 f8f7 	bl	80065e8 <CDC_Transmit_FS>
 80003fa:	4603      	mov	r3, r0
 80003fc:	2b01      	cmp	r3, #1
 80003fe:	d0f7      	beq.n	80003f0 <main+0xc8>
    for(int i=0; i<TRANSMIT_SIZE-1; i++){
 8000400:	e7d7      	b.n	80003b2 <main+0x8a>
 8000402:	bf00      	nop
 8000404:	20000638 	.word	0x20000638
 8000408:	200005f8 	.word	0x200005f8
 800040c:	40000400 	.word	0x40000400
 8000410:	200003a0 	.word	0x200003a0
 8000414:	08008000 	.word	0x08008000

08000418 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	b094      	sub	sp, #80	; 0x50
 800041c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800041e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000422:	2228      	movs	r2, #40	; 0x28
 8000424:	2100      	movs	r1, #0
 8000426:	4618      	mov	r0, r3
 8000428:	f006 fce2 	bl	8006df0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800042c:	f107 0314 	add.w	r3, r7, #20
 8000430:	2200      	movs	r2, #0
 8000432:	601a      	str	r2, [r3, #0]
 8000434:	605a      	str	r2, [r3, #4]
 8000436:	609a      	str	r2, [r3, #8]
 8000438:	60da      	str	r2, [r3, #12]
 800043a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800043c:	1d3b      	adds	r3, r7, #4
 800043e:	2200      	movs	r2, #0
 8000440:	601a      	str	r2, [r3, #0]
 8000442:	605a      	str	r2, [r3, #4]
 8000444:	609a      	str	r2, [r3, #8]
 8000446:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000448:	2301      	movs	r3, #1
 800044a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800044c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000450:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000452:	2300      	movs	r3, #0
 8000454:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000456:	2301      	movs	r3, #1
 8000458:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800045a:	2302      	movs	r3, #2
 800045c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800045e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000462:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000464:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000468:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800046a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800046e:	4618      	mov	r0, r3
 8000470:	f001 fd42 	bl	8001ef8 <HAL_RCC_OscConfig>
 8000474:	4603      	mov	r3, r0
 8000476:	2b00      	cmp	r3, #0
 8000478:	d001      	beq.n	800047e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800047a:	f000 f99b 	bl	80007b4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800047e:	230f      	movs	r3, #15
 8000480:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000482:	2302      	movs	r3, #2
 8000484:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000486:	2300      	movs	r3, #0
 8000488:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800048a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800048e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000490:	2300      	movs	r3, #0
 8000492:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000494:	f107 0314 	add.w	r3, r7, #20
 8000498:	2102      	movs	r1, #2
 800049a:	4618      	mov	r0, r3
 800049c:	f001 ffac 	bl	80023f8 <HAL_RCC_ClockConfig>
 80004a0:	4603      	mov	r3, r0
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	d001      	beq.n	80004aa <SystemClock_Config+0x92>
  {
    Error_Handler();
 80004a6:	f000 f985 	bl	80007b4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80004aa:	2310      	movs	r3, #16
 80004ac:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80004ae:	2300      	movs	r3, #0
 80004b0:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004b2:	1d3b      	adds	r3, r7, #4
 80004b4:	4618      	mov	r0, r3
 80004b6:	f002 f927 	bl	8002708 <HAL_RCCEx_PeriphCLKConfig>
 80004ba:	4603      	mov	r3, r0
 80004bc:	2b00      	cmp	r3, #0
 80004be:	d001      	beq.n	80004c4 <SystemClock_Config+0xac>
  {
    Error_Handler();
 80004c0:	f000 f978 	bl	80007b4 <Error_Handler>
  }
}
 80004c4:	bf00      	nop
 80004c6:	3750      	adds	r7, #80	; 0x50
 80004c8:	46bd      	mov	sp, r7
 80004ca:	bd80      	pop	{r7, pc}

080004cc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b086      	sub	sp, #24
 80004d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004d2:	f107 0310 	add.w	r3, r7, #16
 80004d6:	2200      	movs	r2, #0
 80004d8:	601a      	str	r2, [r3, #0]
 80004da:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80004dc:	463b      	mov	r3, r7
 80004de:	2200      	movs	r2, #0
 80004e0:	601a      	str	r2, [r3, #0]
 80004e2:	605a      	str	r2, [r3, #4]
 80004e4:	609a      	str	r2, [r3, #8]
 80004e6:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80004e8:	4b32      	ldr	r3, [pc, #200]	; (80005b4 <MX_TIM2_Init+0xe8>)
 80004ea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80004ee:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0x007F;
 80004f0:	4b30      	ldr	r3, [pc, #192]	; (80005b4 <MX_TIM2_Init+0xe8>)
 80004f2:	227f      	movs	r2, #127	; 0x7f
 80004f4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004f6:	4b2f      	ldr	r3, [pc, #188]	; (80005b4 <MX_TIM2_Init+0xe8>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xffff;
 80004fc:	4b2d      	ldr	r3, [pc, #180]	; (80005b4 <MX_TIM2_Init+0xe8>)
 80004fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000502:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000504:	4b2b      	ldr	r3, [pc, #172]	; (80005b4 <MX_TIM2_Init+0xe8>)
 8000506:	2200      	movs	r2, #0
 8000508:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800050a:	4b2a      	ldr	r3, [pc, #168]	; (80005b4 <MX_TIM2_Init+0xe8>)
 800050c:	2200      	movs	r2, #0
 800050e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000510:	4828      	ldr	r0, [pc, #160]	; (80005b4 <MX_TIM2_Init+0xe8>)
 8000512:	f002 faa9 	bl	8002a68 <HAL_TIM_IC_Init>
 8000516:	4603      	mov	r3, r0
 8000518:	2b00      	cmp	r3, #0
 800051a:	d001      	beq.n	8000520 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800051c:	f000 f94a 	bl	80007b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000520:	2300      	movs	r3, #0
 8000522:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000524:	2300      	movs	r3, #0
 8000526:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000528:	f107 0310 	add.w	r3, r7, #16
 800052c:	4619      	mov	r1, r3
 800052e:	4821      	ldr	r0, [pc, #132]	; (80005b4 <MX_TIM2_Init+0xe8>)
 8000530:	f003 fa61 	bl	80039f6 <HAL_TIMEx_MasterConfigSynchronization>
 8000534:	4603      	mov	r3, r0
 8000536:	2b00      	cmp	r3, #0
 8000538:	d001      	beq.n	800053e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800053a:	f000 f93b 	bl	80007b4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800053e:	2302      	movs	r3, #2
 8000540:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000542:	2301      	movs	r3, #1
 8000544:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000546:	2300      	movs	r3, #0
 8000548:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800054a:	2300      	movs	r3, #0
 800054c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800054e:	463b      	mov	r3, r7
 8000550:	2200      	movs	r2, #0
 8000552:	4619      	mov	r1, r3
 8000554:	4817      	ldr	r0, [pc, #92]	; (80005b4 <MX_TIM2_Init+0xe8>)
 8000556:	f002 fc23 	bl	8002da0 <HAL_TIM_IC_ConfigChannel>
 800055a:	4603      	mov	r3, r0
 800055c:	2b00      	cmp	r3, #0
 800055e:	d001      	beq.n	8000564 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000560:	f000 f928 	bl	80007b4 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000564:	463b      	mov	r3, r7
 8000566:	2204      	movs	r2, #4
 8000568:	4619      	mov	r1, r3
 800056a:	4812      	ldr	r0, [pc, #72]	; (80005b4 <MX_TIM2_Init+0xe8>)
 800056c:	f002 fc18 	bl	8002da0 <HAL_TIM_IC_ConfigChannel>
 8000570:	4603      	mov	r3, r0
 8000572:	2b00      	cmp	r3, #0
 8000574:	d001      	beq.n	800057a <MX_TIM2_Init+0xae>
  {
    Error_Handler();
 8000576:	f000 f91d 	bl	80007b4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800057a:	2300      	movs	r3, #0
 800057c:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 800057e:	463b      	mov	r3, r7
 8000580:	2208      	movs	r2, #8
 8000582:	4619      	mov	r1, r3
 8000584:	480b      	ldr	r0, [pc, #44]	; (80005b4 <MX_TIM2_Init+0xe8>)
 8000586:	f002 fc0b 	bl	8002da0 <HAL_TIM_IC_ConfigChannel>
 800058a:	4603      	mov	r3, r0
 800058c:	2b00      	cmp	r3, #0
 800058e:	d001      	beq.n	8000594 <MX_TIM2_Init+0xc8>
  {
    Error_Handler();
 8000590:	f000 f910 	bl	80007b4 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8000594:	463b      	mov	r3, r7
 8000596:	220c      	movs	r2, #12
 8000598:	4619      	mov	r1, r3
 800059a:	4806      	ldr	r0, [pc, #24]	; (80005b4 <MX_TIM2_Init+0xe8>)
 800059c:	f002 fc00 	bl	8002da0 <HAL_TIM_IC_ConfigChannel>
 80005a0:	4603      	mov	r3, r0
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d001      	beq.n	80005aa <MX_TIM2_Init+0xde>
  {
    Error_Handler();
 80005a6:	f000 f905 	bl	80007b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80005aa:	bf00      	nop
 80005ac:	3718      	adds	r7, #24
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	bf00      	nop
 80005b4:	20000638 	.word	0x20000638

080005b8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b08e      	sub	sp, #56	; 0x38
 80005bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80005be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80005c2:	2200      	movs	r2, #0
 80005c4:	601a      	str	r2, [r3, #0]
 80005c6:	605a      	str	r2, [r3, #4]
 80005c8:	609a      	str	r2, [r3, #8]
 80005ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005cc:	f107 0320 	add.w	r3, r7, #32
 80005d0:	2200      	movs	r2, #0
 80005d2:	601a      	str	r2, [r3, #0]
 80005d4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80005d6:	1d3b      	adds	r3, r7, #4
 80005d8:	2200      	movs	r2, #0
 80005da:	601a      	str	r2, [r3, #0]
 80005dc:	605a      	str	r2, [r3, #4]
 80005de:	609a      	str	r2, [r3, #8]
 80005e0:	60da      	str	r2, [r3, #12]
 80005e2:	611a      	str	r2, [r3, #16]
 80005e4:	615a      	str	r2, [r3, #20]
 80005e6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80005e8:	4b3d      	ldr	r3, [pc, #244]	; (80006e0 <MX_TIM3_Init+0x128>)
 80005ea:	4a3e      	ldr	r2, [pc, #248]	; (80006e4 <MX_TIM3_Init+0x12c>)
 80005ec:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0x0000;
 80005ee:	4b3c      	ldr	r3, [pc, #240]	; (80006e0 <MX_TIM3_Init+0x128>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005f4:	4b3a      	ldr	r3, [pc, #232]	; (80006e0 <MX_TIM3_Init+0x128>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0x07FF;
 80005fa:	4b39      	ldr	r3, [pc, #228]	; (80006e0 <MX_TIM3_Init+0x128>)
 80005fc:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000600:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000602:	4b37      	ldr	r3, [pc, #220]	; (80006e0 <MX_TIM3_Init+0x128>)
 8000604:	2200      	movs	r2, #0
 8000606:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000608:	4b35      	ldr	r3, [pc, #212]	; (80006e0 <MX_TIM3_Init+0x128>)
 800060a:	2280      	movs	r2, #128	; 0x80
 800060c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800060e:	4834      	ldr	r0, [pc, #208]	; (80006e0 <MX_TIM3_Init+0x128>)
 8000610:	f002 f930 	bl	8002874 <HAL_TIM_Base_Init>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	d001      	beq.n	800061e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800061a:	f000 f8cb 	bl	80007b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800061e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000622:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000624:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000628:	4619      	mov	r1, r3
 800062a:	482d      	ldr	r0, [pc, #180]	; (80006e0 <MX_TIM3_Init+0x128>)
 800062c:	f002 fd1a 	bl	8003064 <HAL_TIM_ConfigClockSource>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d001      	beq.n	800063a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000636:	f000 f8bd 	bl	80007b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800063a:	4829      	ldr	r0, [pc, #164]	; (80006e0 <MX_TIM3_Init+0x128>)
 800063c:	f002 f968 	bl	8002910 <HAL_TIM_PWM_Init>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d001      	beq.n	800064a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000646:	f000 f8b5 	bl	80007b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800064a:	2300      	movs	r3, #0
 800064c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800064e:	2300      	movs	r3, #0
 8000650:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000652:	f107 0320 	add.w	r3, r7, #32
 8000656:	4619      	mov	r1, r3
 8000658:	4821      	ldr	r0, [pc, #132]	; (80006e0 <MX_TIM3_Init+0x128>)
 800065a:	f003 f9cc 	bl	80039f6 <HAL_TIMEx_MasterConfigSynchronization>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d001      	beq.n	8000668 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000664:	f000 f8a6 	bl	80007b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000668:	2360      	movs	r3, #96	; 0x60
 800066a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800066c:	2300      	movs	r3, #0
 800066e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000670:	2300      	movs	r3, #0
 8000672:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000674:	2300      	movs	r3, #0
 8000676:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000678:	1d3b      	adds	r3, r7, #4
 800067a:	2200      	movs	r2, #0
 800067c:	4619      	mov	r1, r3
 800067e:	4818      	ldr	r0, [pc, #96]	; (80006e0 <MX_TIM3_Init+0x128>)
 8000680:	f002 fc2a 	bl	8002ed8 <HAL_TIM_PWM_ConfigChannel>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d001      	beq.n	800068e <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800068a:	f000 f893 	bl	80007b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800068e:	1d3b      	adds	r3, r7, #4
 8000690:	2204      	movs	r2, #4
 8000692:	4619      	mov	r1, r3
 8000694:	4812      	ldr	r0, [pc, #72]	; (80006e0 <MX_TIM3_Init+0x128>)
 8000696:	f002 fc1f 	bl	8002ed8 <HAL_TIM_PWM_ConfigChannel>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 80006a0:	f000 f888 	bl	80007b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80006a4:	1d3b      	adds	r3, r7, #4
 80006a6:	2208      	movs	r2, #8
 80006a8:	4619      	mov	r1, r3
 80006aa:	480d      	ldr	r0, [pc, #52]	; (80006e0 <MX_TIM3_Init+0x128>)
 80006ac:	f002 fc14 	bl	8002ed8 <HAL_TIM_PWM_ConfigChannel>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d001      	beq.n	80006ba <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 80006b6:	f000 f87d 	bl	80007b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80006ba:	1d3b      	adds	r3, r7, #4
 80006bc:	220c      	movs	r2, #12
 80006be:	4619      	mov	r1, r3
 80006c0:	4807      	ldr	r0, [pc, #28]	; (80006e0 <MX_TIM3_Init+0x128>)
 80006c2:	f002 fc09 	bl	8002ed8 <HAL_TIM_PWM_ConfigChannel>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <MX_TIM3_Init+0x118>
  {
    Error_Handler();
 80006cc:	f000 f872 	bl	80007b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80006d0:	4803      	ldr	r0, [pc, #12]	; (80006e0 <MX_TIM3_Init+0x128>)
 80006d2:	f000 f911 	bl	80008f8 <HAL_TIM_MspPostInit>

}
 80006d6:	bf00      	nop
 80006d8:	3738      	adds	r7, #56	; 0x38
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	200005f8 	.word	0x200005f8
 80006e4:	40000400 	.word	0x40000400

080006e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b088      	sub	sp, #32
 80006ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ee:	f107 0310 	add.w	r3, r7, #16
 80006f2:	2200      	movs	r2, #0
 80006f4:	601a      	str	r2, [r3, #0]
 80006f6:	605a      	str	r2, [r3, #4]
 80006f8:	609a      	str	r2, [r3, #8]
 80006fa:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006fc:	4b2a      	ldr	r3, [pc, #168]	; (80007a8 <MX_GPIO_Init+0xc0>)
 80006fe:	699b      	ldr	r3, [r3, #24]
 8000700:	4a29      	ldr	r2, [pc, #164]	; (80007a8 <MX_GPIO_Init+0xc0>)
 8000702:	f043 0310 	orr.w	r3, r3, #16
 8000706:	6193      	str	r3, [r2, #24]
 8000708:	4b27      	ldr	r3, [pc, #156]	; (80007a8 <MX_GPIO_Init+0xc0>)
 800070a:	699b      	ldr	r3, [r3, #24]
 800070c:	f003 0310 	and.w	r3, r3, #16
 8000710:	60fb      	str	r3, [r7, #12]
 8000712:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000714:	4b24      	ldr	r3, [pc, #144]	; (80007a8 <MX_GPIO_Init+0xc0>)
 8000716:	699b      	ldr	r3, [r3, #24]
 8000718:	4a23      	ldr	r2, [pc, #140]	; (80007a8 <MX_GPIO_Init+0xc0>)
 800071a:	f043 0320 	orr.w	r3, r3, #32
 800071e:	6193      	str	r3, [r2, #24]
 8000720:	4b21      	ldr	r3, [pc, #132]	; (80007a8 <MX_GPIO_Init+0xc0>)
 8000722:	699b      	ldr	r3, [r3, #24]
 8000724:	f003 0320 	and.w	r3, r3, #32
 8000728:	60bb      	str	r3, [r7, #8]
 800072a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800072c:	4b1e      	ldr	r3, [pc, #120]	; (80007a8 <MX_GPIO_Init+0xc0>)
 800072e:	699b      	ldr	r3, [r3, #24]
 8000730:	4a1d      	ldr	r2, [pc, #116]	; (80007a8 <MX_GPIO_Init+0xc0>)
 8000732:	f043 0304 	orr.w	r3, r3, #4
 8000736:	6193      	str	r3, [r2, #24]
 8000738:	4b1b      	ldr	r3, [pc, #108]	; (80007a8 <MX_GPIO_Init+0xc0>)
 800073a:	699b      	ldr	r3, [r3, #24]
 800073c:	f003 0304 	and.w	r3, r3, #4
 8000740:	607b      	str	r3, [r7, #4]
 8000742:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000744:	4b18      	ldr	r3, [pc, #96]	; (80007a8 <MX_GPIO_Init+0xc0>)
 8000746:	699b      	ldr	r3, [r3, #24]
 8000748:	4a17      	ldr	r2, [pc, #92]	; (80007a8 <MX_GPIO_Init+0xc0>)
 800074a:	f043 0308 	orr.w	r3, r3, #8
 800074e:	6193      	str	r3, [r2, #24]
 8000750:	4b15      	ldr	r3, [pc, #84]	; (80007a8 <MX_GPIO_Init+0xc0>)
 8000752:	699b      	ldr	r3, [r3, #24]
 8000754:	f003 0308 	and.w	r3, r3, #8
 8000758:	603b      	str	r3, [r7, #0]
 800075a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800075c:	2200      	movs	r2, #0
 800075e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000762:	4812      	ldr	r0, [pc, #72]	; (80007ac <MX_GPIO_Init+0xc4>)
 8000764:	f000 fcb6 	bl	80010d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000768:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800076c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800076e:	2301      	movs	r3, #1
 8000770:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000772:	2300      	movs	r3, #0
 8000774:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000776:	2302      	movs	r3, #2
 8000778:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800077a:	f107 0310 	add.w	r3, r7, #16
 800077e:	4619      	mov	r1, r3
 8000780:	480a      	ldr	r0, [pc, #40]	; (80007ac <MX_GPIO_Init+0xc4>)
 8000782:	f000 fb4d 	bl	8000e20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000786:	2304      	movs	r3, #4
 8000788:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800078a:	2300      	movs	r3, #0
 800078c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078e:	2300      	movs	r3, #0
 8000790:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000792:	f107 0310 	add.w	r3, r7, #16
 8000796:	4619      	mov	r1, r3
 8000798:	4805      	ldr	r0, [pc, #20]	; (80007b0 <MX_GPIO_Init+0xc8>)
 800079a:	f000 fb41 	bl	8000e20 <HAL_GPIO_Init>

}
 800079e:	bf00      	nop
 80007a0:	3720      	adds	r7, #32
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	40021000 	.word	0x40021000
 80007ac:	40011000 	.word	0x40011000
 80007b0:	40010c00 	.word	0x40010c00

080007b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007b4:	b480      	push	{r7}
 80007b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80007b8:	bf00      	nop
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bc80      	pop	{r7}
 80007be:	4770      	bx	lr

080007c0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	b085      	sub	sp, #20
 80007c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80007c6:	4b15      	ldr	r3, [pc, #84]	; (800081c <HAL_MspInit+0x5c>)
 80007c8:	699b      	ldr	r3, [r3, #24]
 80007ca:	4a14      	ldr	r2, [pc, #80]	; (800081c <HAL_MspInit+0x5c>)
 80007cc:	f043 0301 	orr.w	r3, r3, #1
 80007d0:	6193      	str	r3, [r2, #24]
 80007d2:	4b12      	ldr	r3, [pc, #72]	; (800081c <HAL_MspInit+0x5c>)
 80007d4:	699b      	ldr	r3, [r3, #24]
 80007d6:	f003 0301 	and.w	r3, r3, #1
 80007da:	60bb      	str	r3, [r7, #8]
 80007dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007de:	4b0f      	ldr	r3, [pc, #60]	; (800081c <HAL_MspInit+0x5c>)
 80007e0:	69db      	ldr	r3, [r3, #28]
 80007e2:	4a0e      	ldr	r2, [pc, #56]	; (800081c <HAL_MspInit+0x5c>)
 80007e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007e8:	61d3      	str	r3, [r2, #28]
 80007ea:	4b0c      	ldr	r3, [pc, #48]	; (800081c <HAL_MspInit+0x5c>)
 80007ec:	69db      	ldr	r3, [r3, #28]
 80007ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007f2:	607b      	str	r3, [r7, #4]
 80007f4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80007f6:	4b0a      	ldr	r3, [pc, #40]	; (8000820 <HAL_MspInit+0x60>)
 80007f8:	685b      	ldr	r3, [r3, #4]
 80007fa:	60fb      	str	r3, [r7, #12]
 80007fc:	68fb      	ldr	r3, [r7, #12]
 80007fe:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000802:	60fb      	str	r3, [r7, #12]
 8000804:	68fb      	ldr	r3, [r7, #12]
 8000806:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800080a:	60fb      	str	r3, [r7, #12]
 800080c:	4a04      	ldr	r2, [pc, #16]	; (8000820 <HAL_MspInit+0x60>)
 800080e:	68fb      	ldr	r3, [r7, #12]
 8000810:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000812:	bf00      	nop
 8000814:	3714      	adds	r7, #20
 8000816:	46bd      	mov	sp, r7
 8000818:	bc80      	pop	{r7}
 800081a:	4770      	bx	lr
 800081c:	40021000 	.word	0x40021000
 8000820:	40010000 	.word	0x40010000

08000824 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b088      	sub	sp, #32
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800082c:	f107 0310 	add.w	r3, r7, #16
 8000830:	2200      	movs	r2, #0
 8000832:	601a      	str	r2, [r3, #0]
 8000834:	605a      	str	r2, [r3, #4]
 8000836:	609a      	str	r2, [r3, #8]
 8000838:	60da      	str	r2, [r3, #12]
  if(htim_ic->Instance==TIM2)
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000842:	d12b      	bne.n	800089c <HAL_TIM_IC_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000844:	4b17      	ldr	r3, [pc, #92]	; (80008a4 <HAL_TIM_IC_MspInit+0x80>)
 8000846:	69db      	ldr	r3, [r3, #28]
 8000848:	4a16      	ldr	r2, [pc, #88]	; (80008a4 <HAL_TIM_IC_MspInit+0x80>)
 800084a:	f043 0301 	orr.w	r3, r3, #1
 800084e:	61d3      	str	r3, [r2, #28]
 8000850:	4b14      	ldr	r3, [pc, #80]	; (80008a4 <HAL_TIM_IC_MspInit+0x80>)
 8000852:	69db      	ldr	r3, [r3, #28]
 8000854:	f003 0301 	and.w	r3, r3, #1
 8000858:	60fb      	str	r3, [r7, #12]
 800085a:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800085c:	4b11      	ldr	r3, [pc, #68]	; (80008a4 <HAL_TIM_IC_MspInit+0x80>)
 800085e:	699b      	ldr	r3, [r3, #24]
 8000860:	4a10      	ldr	r2, [pc, #64]	; (80008a4 <HAL_TIM_IC_MspInit+0x80>)
 8000862:	f043 0304 	orr.w	r3, r3, #4
 8000866:	6193      	str	r3, [r2, #24]
 8000868:	4b0e      	ldr	r3, [pc, #56]	; (80008a4 <HAL_TIM_IC_MspInit+0x80>)
 800086a:	699b      	ldr	r3, [r3, #24]
 800086c:	f003 0304 	and.w	r3, r3, #4
 8000870:	60bb      	str	r3, [r7, #8]
 8000872:	68bb      	ldr	r3, [r7, #8]
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000874:	230f      	movs	r3, #15
 8000876:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000878:	2300      	movs	r3, #0
 800087a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800087c:	2301      	movs	r3, #1
 800087e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000880:	f107 0310 	add.w	r3, r7, #16
 8000884:	4619      	mov	r1, r3
 8000886:	4808      	ldr	r0, [pc, #32]	; (80008a8 <HAL_TIM_IC_MspInit+0x84>)
 8000888:	f000 faca 	bl	8000e20 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800088c:	2200      	movs	r2, #0
 800088e:	2100      	movs	r1, #0
 8000890:	201c      	movs	r0, #28
 8000892:	f000 fa8e 	bl	8000db2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000896:	201c      	movs	r0, #28
 8000898:	f000 faa7 	bl	8000dea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800089c:	bf00      	nop
 800089e:	3720      	adds	r7, #32
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	40021000 	.word	0x40021000
 80008a8:	40010800 	.word	0x40010800

080008ac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b084      	sub	sp, #16
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	4a0d      	ldr	r2, [pc, #52]	; (80008f0 <HAL_TIM_Base_MspInit+0x44>)
 80008ba:	4293      	cmp	r3, r2
 80008bc:	d113      	bne.n	80008e6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80008be:	4b0d      	ldr	r3, [pc, #52]	; (80008f4 <HAL_TIM_Base_MspInit+0x48>)
 80008c0:	69db      	ldr	r3, [r3, #28]
 80008c2:	4a0c      	ldr	r2, [pc, #48]	; (80008f4 <HAL_TIM_Base_MspInit+0x48>)
 80008c4:	f043 0302 	orr.w	r3, r3, #2
 80008c8:	61d3      	str	r3, [r2, #28]
 80008ca:	4b0a      	ldr	r3, [pc, #40]	; (80008f4 <HAL_TIM_Base_MspInit+0x48>)
 80008cc:	69db      	ldr	r3, [r3, #28]
 80008ce:	f003 0302 	and.w	r3, r3, #2
 80008d2:	60fb      	str	r3, [r7, #12]
 80008d4:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80008d6:	2200      	movs	r2, #0
 80008d8:	2100      	movs	r1, #0
 80008da:	201d      	movs	r0, #29
 80008dc:	f000 fa69 	bl	8000db2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80008e0:	201d      	movs	r0, #29
 80008e2:	f000 fa82 	bl	8000dea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80008e6:	bf00      	nop
 80008e8:	3710      	adds	r7, #16
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	40000400 	.word	0x40000400
 80008f4:	40021000 	.word	0x40021000

080008f8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b088      	sub	sp, #32
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000900:	f107 0310 	add.w	r3, r7, #16
 8000904:	2200      	movs	r2, #0
 8000906:	601a      	str	r2, [r3, #0]
 8000908:	605a      	str	r2, [r3, #4]
 800090a:	609a      	str	r2, [r3, #8]
 800090c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	4a1b      	ldr	r2, [pc, #108]	; (8000980 <HAL_TIM_MspPostInit+0x88>)
 8000914:	4293      	cmp	r3, r2
 8000916:	d12f      	bne.n	8000978 <HAL_TIM_MspPostInit+0x80>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000918:	4b1a      	ldr	r3, [pc, #104]	; (8000984 <HAL_TIM_MspPostInit+0x8c>)
 800091a:	699b      	ldr	r3, [r3, #24]
 800091c:	4a19      	ldr	r2, [pc, #100]	; (8000984 <HAL_TIM_MspPostInit+0x8c>)
 800091e:	f043 0304 	orr.w	r3, r3, #4
 8000922:	6193      	str	r3, [r2, #24]
 8000924:	4b17      	ldr	r3, [pc, #92]	; (8000984 <HAL_TIM_MspPostInit+0x8c>)
 8000926:	699b      	ldr	r3, [r3, #24]
 8000928:	f003 0304 	and.w	r3, r3, #4
 800092c:	60fb      	str	r3, [r7, #12]
 800092e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000930:	4b14      	ldr	r3, [pc, #80]	; (8000984 <HAL_TIM_MspPostInit+0x8c>)
 8000932:	699b      	ldr	r3, [r3, #24]
 8000934:	4a13      	ldr	r2, [pc, #76]	; (8000984 <HAL_TIM_MspPostInit+0x8c>)
 8000936:	f043 0308 	orr.w	r3, r3, #8
 800093a:	6193      	str	r3, [r2, #24]
 800093c:	4b11      	ldr	r3, [pc, #68]	; (8000984 <HAL_TIM_MspPostInit+0x8c>)
 800093e:	699b      	ldr	r3, [r3, #24]
 8000940:	f003 0308 	and.w	r3, r3, #8
 8000944:	60bb      	str	r3, [r7, #8]
 8000946:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000948:	23c0      	movs	r3, #192	; 0xc0
 800094a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800094c:	2302      	movs	r3, #2
 800094e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000950:	2302      	movs	r3, #2
 8000952:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000954:	f107 0310 	add.w	r3, r7, #16
 8000958:	4619      	mov	r1, r3
 800095a:	480b      	ldr	r0, [pc, #44]	; (8000988 <HAL_TIM_MspPostInit+0x90>)
 800095c:	f000 fa60 	bl	8000e20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000960:	2303      	movs	r3, #3
 8000962:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000964:	2302      	movs	r3, #2
 8000966:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000968:	2302      	movs	r3, #2
 800096a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800096c:	f107 0310 	add.w	r3, r7, #16
 8000970:	4619      	mov	r1, r3
 8000972:	4806      	ldr	r0, [pc, #24]	; (800098c <HAL_TIM_MspPostInit+0x94>)
 8000974:	f000 fa54 	bl	8000e20 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000978:	bf00      	nop
 800097a:	3720      	adds	r7, #32
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}
 8000980:	40000400 	.word	0x40000400
 8000984:	40021000 	.word	0x40021000
 8000988:	40010800 	.word	0x40010800
 800098c:	40010c00 	.word	0x40010c00

08000990 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000994:	bf00      	nop
 8000996:	46bd      	mov	sp, r7
 8000998:	bc80      	pop	{r7}
 800099a:	4770      	bx	lr

0800099c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009a0:	e7fe      	b.n	80009a0 <HardFault_Handler+0x4>

080009a2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009a2:	b480      	push	{r7}
 80009a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009a6:	e7fe      	b.n	80009a6 <MemManage_Handler+0x4>

080009a8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009ac:	e7fe      	b.n	80009ac <BusFault_Handler+0x4>

080009ae <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009ae:	b480      	push	{r7}
 80009b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009b2:	e7fe      	b.n	80009b2 <UsageFault_Handler+0x4>

080009b4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009b8:	bf00      	nop
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bc80      	pop	{r7}
 80009be:	4770      	bx	lr

080009c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009c4:	bf00      	nop
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bc80      	pop	{r7}
 80009ca:	4770      	bx	lr

080009cc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009d0:	bf00      	nop
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bc80      	pop	{r7}
 80009d6:	4770      	bx	lr

080009d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009dc:	f000 f8f6 	bl	8000bcc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009e0:	bf00      	nop
 80009e2:	bd80      	pop	{r7, pc}

080009e4 <USB_HP_CAN1_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN TX interrupts.
  */
void USB_HP_CAN1_TX_IRQHandler(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80009e8:	4802      	ldr	r0, [pc, #8]	; (80009f4 <USB_HP_CAN1_TX_IRQHandler+0x10>)
 80009ea:	f000 fcaa 	bl	8001342 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
}
 80009ee:	bf00      	nop
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	20001310 	.word	0x20001310

080009f8 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80009fc:	4802      	ldr	r0, [pc, #8]	; (8000a08 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80009fe:	f000 fca0 	bl	8001342 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000a02:	bf00      	nop
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	20001310 	.word	0x20001310

08000a0c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000a10:	4802      	ldr	r0, [pc, #8]	; (8000a1c <TIM2_IRQHandler+0x10>)
 8000a12:	f002 f8bd 	bl	8002b90 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000a16:	bf00      	nop
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	20000638 	.word	0x20000638

08000a20 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000a24:	4802      	ldr	r0, [pc, #8]	; (8000a30 <TIM3_IRQHandler+0x10>)
 8000a26:	f002 f8b3 	bl	8002b90 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000a2a:	bf00      	nop
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	200005f8 	.word	0x200005f8

08000a34 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b084      	sub	sp, #16
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000a3c:	4b11      	ldr	r3, [pc, #68]	; (8000a84 <_sbrk+0x50>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d102      	bne.n	8000a4a <_sbrk+0x16>
		heap_end = &end;
 8000a44:	4b0f      	ldr	r3, [pc, #60]	; (8000a84 <_sbrk+0x50>)
 8000a46:	4a10      	ldr	r2, [pc, #64]	; (8000a88 <_sbrk+0x54>)
 8000a48:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000a4a:	4b0e      	ldr	r3, [pc, #56]	; (8000a84 <_sbrk+0x50>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000a50:	4b0c      	ldr	r3, [pc, #48]	; (8000a84 <_sbrk+0x50>)
 8000a52:	681a      	ldr	r2, [r3, #0]
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	4413      	add	r3, r2
 8000a58:	466a      	mov	r2, sp
 8000a5a:	4293      	cmp	r3, r2
 8000a5c:	d907      	bls.n	8000a6e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000a5e:	f006 f99d 	bl	8006d9c <__errno>
 8000a62:	4602      	mov	r2, r0
 8000a64:	230c      	movs	r3, #12
 8000a66:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000a68:	f04f 33ff 	mov.w	r3, #4294967295
 8000a6c:	e006      	b.n	8000a7c <_sbrk+0x48>
	}

	heap_end += incr;
 8000a6e:	4b05      	ldr	r3, [pc, #20]	; (8000a84 <_sbrk+0x50>)
 8000a70:	681a      	ldr	r2, [r3, #0]
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	4413      	add	r3, r2
 8000a76:	4a03      	ldr	r2, [pc, #12]	; (8000a84 <_sbrk+0x50>)
 8000a78:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000a7a:	68fb      	ldr	r3, [r7, #12]
}
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	3710      	adds	r7, #16
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	200003b8 	.word	0x200003b8
 8000a88:	20001580 	.word	0x20001580

08000a8c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000a90:	4b15      	ldr	r3, [pc, #84]	; (8000ae8 <SystemInit+0x5c>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4a14      	ldr	r2, [pc, #80]	; (8000ae8 <SystemInit+0x5c>)
 8000a96:	f043 0301 	orr.w	r3, r3, #1
 8000a9a:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000a9c:	4b12      	ldr	r3, [pc, #72]	; (8000ae8 <SystemInit+0x5c>)
 8000a9e:	685a      	ldr	r2, [r3, #4]
 8000aa0:	4911      	ldr	r1, [pc, #68]	; (8000ae8 <SystemInit+0x5c>)
 8000aa2:	4b12      	ldr	r3, [pc, #72]	; (8000aec <SystemInit+0x60>)
 8000aa4:	4013      	ands	r3, r2
 8000aa6:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000aa8:	4b0f      	ldr	r3, [pc, #60]	; (8000ae8 <SystemInit+0x5c>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	4a0e      	ldr	r2, [pc, #56]	; (8000ae8 <SystemInit+0x5c>)
 8000aae:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000ab2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ab6:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000ab8:	4b0b      	ldr	r3, [pc, #44]	; (8000ae8 <SystemInit+0x5c>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4a0a      	ldr	r2, [pc, #40]	; (8000ae8 <SystemInit+0x5c>)
 8000abe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ac2:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000ac4:	4b08      	ldr	r3, [pc, #32]	; (8000ae8 <SystemInit+0x5c>)
 8000ac6:	685b      	ldr	r3, [r3, #4]
 8000ac8:	4a07      	ldr	r2, [pc, #28]	; (8000ae8 <SystemInit+0x5c>)
 8000aca:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000ace:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8000ad0:	4b05      	ldr	r3, [pc, #20]	; (8000ae8 <SystemInit+0x5c>)
 8000ad2:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000ad6:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000ad8:	4b05      	ldr	r3, [pc, #20]	; (8000af0 <SystemInit+0x64>)
 8000ada:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000ade:	609a      	str	r2, [r3, #8]
#endif 
}
 8000ae0:	bf00      	nop
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bc80      	pop	{r7}
 8000ae6:	4770      	bx	lr
 8000ae8:	40021000 	.word	0x40021000
 8000aec:	f8ff0000 	.word	0xf8ff0000
 8000af0:	e000ed00 	.word	0xe000ed00

08000af4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000af4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000af6:	e003      	b.n	8000b00 <LoopCopyDataInit>

08000af8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000af8:	4b0b      	ldr	r3, [pc, #44]	; (8000b28 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000afa:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000afc:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000afe:	3104      	adds	r1, #4

08000b00 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000b00:	480a      	ldr	r0, [pc, #40]	; (8000b2c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000b02:	4b0b      	ldr	r3, [pc, #44]	; (8000b30 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000b04:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000b06:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000b08:	d3f6      	bcc.n	8000af8 <CopyDataInit>
  ldr r2, =_sbss
 8000b0a:	4a0a      	ldr	r2, [pc, #40]	; (8000b34 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000b0c:	e002      	b.n	8000b14 <LoopFillZerobss>

08000b0e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000b0e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000b10:	f842 3b04 	str.w	r3, [r2], #4

08000b14 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000b14:	4b08      	ldr	r3, [pc, #32]	; (8000b38 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000b16:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000b18:	d3f9      	bcc.n	8000b0e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000b1a:	f7ff ffb7 	bl	8000a8c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b1e:	f006 f943 	bl	8006da8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b22:	f7ff fc01 	bl	8000328 <main>
  bx lr
 8000b26:	4770      	bx	lr
  ldr r3, =_sidata
 8000b28:	0800827c 	.word	0x0800827c
  ldr r0, =_sdata
 8000b2c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000b30:	2000034c 	.word	0x2000034c
  ldr r2, =_sbss
 8000b34:	2000034c 	.word	0x2000034c
  ldr r3, = _ebss
 8000b38:	20001580 	.word	0x20001580

08000b3c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b3c:	e7fe      	b.n	8000b3c <ADC1_2_IRQHandler>
	...

08000b40 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b44:	4b08      	ldr	r3, [pc, #32]	; (8000b68 <HAL_Init+0x28>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	4a07      	ldr	r2, [pc, #28]	; (8000b68 <HAL_Init+0x28>)
 8000b4a:	f043 0310 	orr.w	r3, r3, #16
 8000b4e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b50:	2003      	movs	r0, #3
 8000b52:	f000 f923 	bl	8000d9c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b56:	2000      	movs	r0, #0
 8000b58:	f000 f808 	bl	8000b6c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b5c:	f7ff fe30 	bl	80007c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b60:	2300      	movs	r3, #0
}
 8000b62:	4618      	mov	r0, r3
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	40022000 	.word	0x40022000

08000b6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b082      	sub	sp, #8
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b74:	4b12      	ldr	r3, [pc, #72]	; (8000bc0 <HAL_InitTick+0x54>)
 8000b76:	681a      	ldr	r2, [r3, #0]
 8000b78:	4b12      	ldr	r3, [pc, #72]	; (8000bc4 <HAL_InitTick+0x58>)
 8000b7a:	781b      	ldrb	r3, [r3, #0]
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b82:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b86:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f000 f93b 	bl	8000e06 <HAL_SYSTICK_Config>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d001      	beq.n	8000b9a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b96:	2301      	movs	r3, #1
 8000b98:	e00e      	b.n	8000bb8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	2b0f      	cmp	r3, #15
 8000b9e:	d80a      	bhi.n	8000bb6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	6879      	ldr	r1, [r7, #4]
 8000ba4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba8:	f000 f903 	bl	8000db2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bac:	4a06      	ldr	r2, [pc, #24]	; (8000bc8 <HAL_InitTick+0x5c>)
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	e000      	b.n	8000bb8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bb6:	2301      	movs	r3, #1
}
 8000bb8:	4618      	mov	r0, r3
 8000bba:	3708      	adds	r7, #8
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	20000000 	.word	0x20000000
 8000bc4:	20000008 	.word	0x20000008
 8000bc8:	20000004 	.word	0x20000004

08000bcc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bd0:	4b05      	ldr	r3, [pc, #20]	; (8000be8 <HAL_IncTick+0x1c>)
 8000bd2:	781b      	ldrb	r3, [r3, #0]
 8000bd4:	461a      	mov	r2, r3
 8000bd6:	4b05      	ldr	r3, [pc, #20]	; (8000bec <HAL_IncTick+0x20>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	4413      	add	r3, r2
 8000bdc:	4a03      	ldr	r2, [pc, #12]	; (8000bec <HAL_IncTick+0x20>)
 8000bde:	6013      	str	r3, [r2, #0]
}
 8000be0:	bf00      	nop
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bc80      	pop	{r7}
 8000be6:	4770      	bx	lr
 8000be8:	20000008 	.word	0x20000008
 8000bec:	20000678 	.word	0x20000678

08000bf0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  return uwTick;
 8000bf4:	4b02      	ldr	r3, [pc, #8]	; (8000c00 <HAL_GetTick+0x10>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
}
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bc80      	pop	{r7}
 8000bfe:	4770      	bx	lr
 8000c00:	20000678 	.word	0x20000678

08000c04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c04:	b480      	push	{r7}
 8000c06:	b085      	sub	sp, #20
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	f003 0307 	and.w	r3, r3, #7
 8000c12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c14:	4b0c      	ldr	r3, [pc, #48]	; (8000c48 <__NVIC_SetPriorityGrouping+0x44>)
 8000c16:	68db      	ldr	r3, [r3, #12]
 8000c18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c1a:	68ba      	ldr	r2, [r7, #8]
 8000c1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c20:	4013      	ands	r3, r2
 8000c22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c28:	68bb      	ldr	r3, [r7, #8]
 8000c2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c36:	4a04      	ldr	r2, [pc, #16]	; (8000c48 <__NVIC_SetPriorityGrouping+0x44>)
 8000c38:	68bb      	ldr	r3, [r7, #8]
 8000c3a:	60d3      	str	r3, [r2, #12]
}
 8000c3c:	bf00      	nop
 8000c3e:	3714      	adds	r7, #20
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bc80      	pop	{r7}
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop
 8000c48:	e000ed00 	.word	0xe000ed00

08000c4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c50:	4b04      	ldr	r3, [pc, #16]	; (8000c64 <__NVIC_GetPriorityGrouping+0x18>)
 8000c52:	68db      	ldr	r3, [r3, #12]
 8000c54:	0a1b      	lsrs	r3, r3, #8
 8000c56:	f003 0307 	and.w	r3, r3, #7
}
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bc80      	pop	{r7}
 8000c60:	4770      	bx	lr
 8000c62:	bf00      	nop
 8000c64:	e000ed00 	.word	0xe000ed00

08000c68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b083      	sub	sp, #12
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	4603      	mov	r3, r0
 8000c70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	db0b      	blt.n	8000c92 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c7a:	79fb      	ldrb	r3, [r7, #7]
 8000c7c:	f003 021f 	and.w	r2, r3, #31
 8000c80:	4906      	ldr	r1, [pc, #24]	; (8000c9c <__NVIC_EnableIRQ+0x34>)
 8000c82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c86:	095b      	lsrs	r3, r3, #5
 8000c88:	2001      	movs	r0, #1
 8000c8a:	fa00 f202 	lsl.w	r2, r0, r2
 8000c8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c92:	bf00      	nop
 8000c94:	370c      	adds	r7, #12
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bc80      	pop	{r7}
 8000c9a:	4770      	bx	lr
 8000c9c:	e000e100 	.word	0xe000e100

08000ca0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b083      	sub	sp, #12
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	6039      	str	r1, [r7, #0]
 8000caa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	db0a      	blt.n	8000cca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	b2da      	uxtb	r2, r3
 8000cb8:	490c      	ldr	r1, [pc, #48]	; (8000cec <__NVIC_SetPriority+0x4c>)
 8000cba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cbe:	0112      	lsls	r2, r2, #4
 8000cc0:	b2d2      	uxtb	r2, r2
 8000cc2:	440b      	add	r3, r1
 8000cc4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cc8:	e00a      	b.n	8000ce0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cca:	683b      	ldr	r3, [r7, #0]
 8000ccc:	b2da      	uxtb	r2, r3
 8000cce:	4908      	ldr	r1, [pc, #32]	; (8000cf0 <__NVIC_SetPriority+0x50>)
 8000cd0:	79fb      	ldrb	r3, [r7, #7]
 8000cd2:	f003 030f 	and.w	r3, r3, #15
 8000cd6:	3b04      	subs	r3, #4
 8000cd8:	0112      	lsls	r2, r2, #4
 8000cda:	b2d2      	uxtb	r2, r2
 8000cdc:	440b      	add	r3, r1
 8000cde:	761a      	strb	r2, [r3, #24]
}
 8000ce0:	bf00      	nop
 8000ce2:	370c      	adds	r7, #12
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bc80      	pop	{r7}
 8000ce8:	4770      	bx	lr
 8000cea:	bf00      	nop
 8000cec:	e000e100 	.word	0xe000e100
 8000cf0:	e000ed00 	.word	0xe000ed00

08000cf4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b089      	sub	sp, #36	; 0x24
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	60f8      	str	r0, [r7, #12]
 8000cfc:	60b9      	str	r1, [r7, #8]
 8000cfe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	f003 0307 	and.w	r3, r3, #7
 8000d06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d08:	69fb      	ldr	r3, [r7, #28]
 8000d0a:	f1c3 0307 	rsb	r3, r3, #7
 8000d0e:	2b04      	cmp	r3, #4
 8000d10:	bf28      	it	cs
 8000d12:	2304      	movcs	r3, #4
 8000d14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d16:	69fb      	ldr	r3, [r7, #28]
 8000d18:	3304      	adds	r3, #4
 8000d1a:	2b06      	cmp	r3, #6
 8000d1c:	d902      	bls.n	8000d24 <NVIC_EncodePriority+0x30>
 8000d1e:	69fb      	ldr	r3, [r7, #28]
 8000d20:	3b03      	subs	r3, #3
 8000d22:	e000      	b.n	8000d26 <NVIC_EncodePriority+0x32>
 8000d24:	2300      	movs	r3, #0
 8000d26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d28:	f04f 32ff 	mov.w	r2, #4294967295
 8000d2c:	69bb      	ldr	r3, [r7, #24]
 8000d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d32:	43da      	mvns	r2, r3
 8000d34:	68bb      	ldr	r3, [r7, #8]
 8000d36:	401a      	ands	r2, r3
 8000d38:	697b      	ldr	r3, [r7, #20]
 8000d3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d3c:	f04f 31ff 	mov.w	r1, #4294967295
 8000d40:	697b      	ldr	r3, [r7, #20]
 8000d42:	fa01 f303 	lsl.w	r3, r1, r3
 8000d46:	43d9      	mvns	r1, r3
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d4c:	4313      	orrs	r3, r2
         );
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	3724      	adds	r7, #36	; 0x24
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bc80      	pop	{r7}
 8000d56:	4770      	bx	lr

08000d58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	3b01      	subs	r3, #1
 8000d64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d68:	d301      	bcc.n	8000d6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	e00f      	b.n	8000d8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d6e:	4a0a      	ldr	r2, [pc, #40]	; (8000d98 <SysTick_Config+0x40>)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	3b01      	subs	r3, #1
 8000d74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d76:	210f      	movs	r1, #15
 8000d78:	f04f 30ff 	mov.w	r0, #4294967295
 8000d7c:	f7ff ff90 	bl	8000ca0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d80:	4b05      	ldr	r3, [pc, #20]	; (8000d98 <SysTick_Config+0x40>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d86:	4b04      	ldr	r3, [pc, #16]	; (8000d98 <SysTick_Config+0x40>)
 8000d88:	2207      	movs	r2, #7
 8000d8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d8c:	2300      	movs	r3, #0
}
 8000d8e:	4618      	mov	r0, r3
 8000d90:	3708      	adds	r7, #8
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	e000e010 	.word	0xe000e010

08000d9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b082      	sub	sp, #8
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000da4:	6878      	ldr	r0, [r7, #4]
 8000da6:	f7ff ff2d 	bl	8000c04 <__NVIC_SetPriorityGrouping>
}
 8000daa:	bf00      	nop
 8000dac:	3708      	adds	r7, #8
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}

08000db2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000db2:	b580      	push	{r7, lr}
 8000db4:	b086      	sub	sp, #24
 8000db6:	af00      	add	r7, sp, #0
 8000db8:	4603      	mov	r3, r0
 8000dba:	60b9      	str	r1, [r7, #8]
 8000dbc:	607a      	str	r2, [r7, #4]
 8000dbe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000dc4:	f7ff ff42 	bl	8000c4c <__NVIC_GetPriorityGrouping>
 8000dc8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dca:	687a      	ldr	r2, [r7, #4]
 8000dcc:	68b9      	ldr	r1, [r7, #8]
 8000dce:	6978      	ldr	r0, [r7, #20]
 8000dd0:	f7ff ff90 	bl	8000cf4 <NVIC_EncodePriority>
 8000dd4:	4602      	mov	r2, r0
 8000dd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dda:	4611      	mov	r1, r2
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f7ff ff5f 	bl	8000ca0 <__NVIC_SetPriority>
}
 8000de2:	bf00      	nop
 8000de4:	3718      	adds	r7, #24
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}

08000dea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dea:	b580      	push	{r7, lr}
 8000dec:	b082      	sub	sp, #8
 8000dee:	af00      	add	r7, sp, #0
 8000df0:	4603      	mov	r3, r0
 8000df2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000df4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f7ff ff35 	bl	8000c68 <__NVIC_EnableIRQ>
}
 8000dfe:	bf00      	nop
 8000e00:	3708      	adds	r7, #8
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}

08000e06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e06:	b580      	push	{r7, lr}
 8000e08:	b082      	sub	sp, #8
 8000e0a:	af00      	add	r7, sp, #0
 8000e0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e0e:	6878      	ldr	r0, [r7, #4]
 8000e10:	f7ff ffa2 	bl	8000d58 <SysTick_Config>
 8000e14:	4603      	mov	r3, r0
}
 8000e16:	4618      	mov	r0, r3
 8000e18:	3708      	adds	r7, #8
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
	...

08000e20 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b08b      	sub	sp, #44	; 0x2c
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
 8000e28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e32:	e127      	b.n	8001084 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000e34:	2201      	movs	r2, #1
 8000e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e38:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	69fa      	ldr	r2, [r7, #28]
 8000e44:	4013      	ands	r3, r2
 8000e46:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000e48:	69ba      	ldr	r2, [r7, #24]
 8000e4a:	69fb      	ldr	r3, [r7, #28]
 8000e4c:	429a      	cmp	r2, r3
 8000e4e:	f040 8116 	bne.w	800107e <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	685b      	ldr	r3, [r3, #4]
 8000e56:	2b12      	cmp	r3, #18
 8000e58:	d034      	beq.n	8000ec4 <HAL_GPIO_Init+0xa4>
 8000e5a:	2b12      	cmp	r3, #18
 8000e5c:	d80d      	bhi.n	8000e7a <HAL_GPIO_Init+0x5a>
 8000e5e:	2b02      	cmp	r3, #2
 8000e60:	d02b      	beq.n	8000eba <HAL_GPIO_Init+0x9a>
 8000e62:	2b02      	cmp	r3, #2
 8000e64:	d804      	bhi.n	8000e70 <HAL_GPIO_Init+0x50>
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d031      	beq.n	8000ece <HAL_GPIO_Init+0xae>
 8000e6a:	2b01      	cmp	r3, #1
 8000e6c:	d01c      	beq.n	8000ea8 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000e6e:	e048      	b.n	8000f02 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000e70:	2b03      	cmp	r3, #3
 8000e72:	d043      	beq.n	8000efc <HAL_GPIO_Init+0xdc>
 8000e74:	2b11      	cmp	r3, #17
 8000e76:	d01b      	beq.n	8000eb0 <HAL_GPIO_Init+0x90>
          break;
 8000e78:	e043      	b.n	8000f02 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000e7a:	4a89      	ldr	r2, [pc, #548]	; (80010a0 <HAL_GPIO_Init+0x280>)
 8000e7c:	4293      	cmp	r3, r2
 8000e7e:	d026      	beq.n	8000ece <HAL_GPIO_Init+0xae>
 8000e80:	4a87      	ldr	r2, [pc, #540]	; (80010a0 <HAL_GPIO_Init+0x280>)
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d806      	bhi.n	8000e94 <HAL_GPIO_Init+0x74>
 8000e86:	4a87      	ldr	r2, [pc, #540]	; (80010a4 <HAL_GPIO_Init+0x284>)
 8000e88:	4293      	cmp	r3, r2
 8000e8a:	d020      	beq.n	8000ece <HAL_GPIO_Init+0xae>
 8000e8c:	4a86      	ldr	r2, [pc, #536]	; (80010a8 <HAL_GPIO_Init+0x288>)
 8000e8e:	4293      	cmp	r3, r2
 8000e90:	d01d      	beq.n	8000ece <HAL_GPIO_Init+0xae>
          break;
 8000e92:	e036      	b.n	8000f02 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000e94:	4a85      	ldr	r2, [pc, #532]	; (80010ac <HAL_GPIO_Init+0x28c>)
 8000e96:	4293      	cmp	r3, r2
 8000e98:	d019      	beq.n	8000ece <HAL_GPIO_Init+0xae>
 8000e9a:	4a85      	ldr	r2, [pc, #532]	; (80010b0 <HAL_GPIO_Init+0x290>)
 8000e9c:	4293      	cmp	r3, r2
 8000e9e:	d016      	beq.n	8000ece <HAL_GPIO_Init+0xae>
 8000ea0:	4a84      	ldr	r2, [pc, #528]	; (80010b4 <HAL_GPIO_Init+0x294>)
 8000ea2:	4293      	cmp	r3, r2
 8000ea4:	d013      	beq.n	8000ece <HAL_GPIO_Init+0xae>
          break;
 8000ea6:	e02c      	b.n	8000f02 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	68db      	ldr	r3, [r3, #12]
 8000eac:	623b      	str	r3, [r7, #32]
          break;
 8000eae:	e028      	b.n	8000f02 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	68db      	ldr	r3, [r3, #12]
 8000eb4:	3304      	adds	r3, #4
 8000eb6:	623b      	str	r3, [r7, #32]
          break;
 8000eb8:	e023      	b.n	8000f02 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	68db      	ldr	r3, [r3, #12]
 8000ebe:	3308      	adds	r3, #8
 8000ec0:	623b      	str	r3, [r7, #32]
          break;
 8000ec2:	e01e      	b.n	8000f02 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	68db      	ldr	r3, [r3, #12]
 8000ec8:	330c      	adds	r3, #12
 8000eca:	623b      	str	r3, [r7, #32]
          break;
 8000ecc:	e019      	b.n	8000f02 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	689b      	ldr	r3, [r3, #8]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d102      	bne.n	8000edc <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000ed6:	2304      	movs	r3, #4
 8000ed8:	623b      	str	r3, [r7, #32]
          break;
 8000eda:	e012      	b.n	8000f02 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	689b      	ldr	r3, [r3, #8]
 8000ee0:	2b01      	cmp	r3, #1
 8000ee2:	d105      	bne.n	8000ef0 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ee4:	2308      	movs	r3, #8
 8000ee6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	69fa      	ldr	r2, [r7, #28]
 8000eec:	611a      	str	r2, [r3, #16]
          break;
 8000eee:	e008      	b.n	8000f02 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ef0:	2308      	movs	r3, #8
 8000ef2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	69fa      	ldr	r2, [r7, #28]
 8000ef8:	615a      	str	r2, [r3, #20]
          break;
 8000efa:	e002      	b.n	8000f02 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000efc:	2300      	movs	r3, #0
 8000efe:	623b      	str	r3, [r7, #32]
          break;
 8000f00:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000f02:	69bb      	ldr	r3, [r7, #24]
 8000f04:	2bff      	cmp	r3, #255	; 0xff
 8000f06:	d801      	bhi.n	8000f0c <HAL_GPIO_Init+0xec>
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	e001      	b.n	8000f10 <HAL_GPIO_Init+0xf0>
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	3304      	adds	r3, #4
 8000f10:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000f12:	69bb      	ldr	r3, [r7, #24]
 8000f14:	2bff      	cmp	r3, #255	; 0xff
 8000f16:	d802      	bhi.n	8000f1e <HAL_GPIO_Init+0xfe>
 8000f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f1a:	009b      	lsls	r3, r3, #2
 8000f1c:	e002      	b.n	8000f24 <HAL_GPIO_Init+0x104>
 8000f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f20:	3b08      	subs	r3, #8
 8000f22:	009b      	lsls	r3, r3, #2
 8000f24:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000f26:	697b      	ldr	r3, [r7, #20]
 8000f28:	681a      	ldr	r2, [r3, #0]
 8000f2a:	210f      	movs	r1, #15
 8000f2c:	693b      	ldr	r3, [r7, #16]
 8000f2e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f32:	43db      	mvns	r3, r3
 8000f34:	401a      	ands	r2, r3
 8000f36:	6a39      	ldr	r1, [r7, #32]
 8000f38:	693b      	ldr	r3, [r7, #16]
 8000f3a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f3e:	431a      	orrs	r2, r3
 8000f40:	697b      	ldr	r3, [r7, #20]
 8000f42:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	f000 8096 	beq.w	800107e <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000f52:	4b59      	ldr	r3, [pc, #356]	; (80010b8 <HAL_GPIO_Init+0x298>)
 8000f54:	699b      	ldr	r3, [r3, #24]
 8000f56:	4a58      	ldr	r2, [pc, #352]	; (80010b8 <HAL_GPIO_Init+0x298>)
 8000f58:	f043 0301 	orr.w	r3, r3, #1
 8000f5c:	6193      	str	r3, [r2, #24]
 8000f5e:	4b56      	ldr	r3, [pc, #344]	; (80010b8 <HAL_GPIO_Init+0x298>)
 8000f60:	699b      	ldr	r3, [r3, #24]
 8000f62:	f003 0301 	and.w	r3, r3, #1
 8000f66:	60bb      	str	r3, [r7, #8]
 8000f68:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000f6a:	4a54      	ldr	r2, [pc, #336]	; (80010bc <HAL_GPIO_Init+0x29c>)
 8000f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f6e:	089b      	lsrs	r3, r3, #2
 8000f70:	3302      	adds	r3, #2
 8000f72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f76:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f7a:	f003 0303 	and.w	r3, r3, #3
 8000f7e:	009b      	lsls	r3, r3, #2
 8000f80:	220f      	movs	r2, #15
 8000f82:	fa02 f303 	lsl.w	r3, r2, r3
 8000f86:	43db      	mvns	r3, r3
 8000f88:	68fa      	ldr	r2, [r7, #12]
 8000f8a:	4013      	ands	r3, r2
 8000f8c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	4a4b      	ldr	r2, [pc, #300]	; (80010c0 <HAL_GPIO_Init+0x2a0>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d013      	beq.n	8000fbe <HAL_GPIO_Init+0x19e>
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	4a4a      	ldr	r2, [pc, #296]	; (80010c4 <HAL_GPIO_Init+0x2a4>)
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d00d      	beq.n	8000fba <HAL_GPIO_Init+0x19a>
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	4a49      	ldr	r2, [pc, #292]	; (80010c8 <HAL_GPIO_Init+0x2a8>)
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d007      	beq.n	8000fb6 <HAL_GPIO_Init+0x196>
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	4a48      	ldr	r2, [pc, #288]	; (80010cc <HAL_GPIO_Init+0x2ac>)
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d101      	bne.n	8000fb2 <HAL_GPIO_Init+0x192>
 8000fae:	2303      	movs	r3, #3
 8000fb0:	e006      	b.n	8000fc0 <HAL_GPIO_Init+0x1a0>
 8000fb2:	2304      	movs	r3, #4
 8000fb4:	e004      	b.n	8000fc0 <HAL_GPIO_Init+0x1a0>
 8000fb6:	2302      	movs	r3, #2
 8000fb8:	e002      	b.n	8000fc0 <HAL_GPIO_Init+0x1a0>
 8000fba:	2301      	movs	r3, #1
 8000fbc:	e000      	b.n	8000fc0 <HAL_GPIO_Init+0x1a0>
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000fc2:	f002 0203 	and.w	r2, r2, #3
 8000fc6:	0092      	lsls	r2, r2, #2
 8000fc8:	4093      	lsls	r3, r2
 8000fca:	68fa      	ldr	r2, [r7, #12]
 8000fcc:	4313      	orrs	r3, r2
 8000fce:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000fd0:	493a      	ldr	r1, [pc, #232]	; (80010bc <HAL_GPIO_Init+0x29c>)
 8000fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fd4:	089b      	lsrs	r3, r3, #2
 8000fd6:	3302      	adds	r3, #2
 8000fd8:	68fa      	ldr	r2, [r7, #12]
 8000fda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	685b      	ldr	r3, [r3, #4]
 8000fe2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d006      	beq.n	8000ff8 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000fea:	4b39      	ldr	r3, [pc, #228]	; (80010d0 <HAL_GPIO_Init+0x2b0>)
 8000fec:	681a      	ldr	r2, [r3, #0]
 8000fee:	4938      	ldr	r1, [pc, #224]	; (80010d0 <HAL_GPIO_Init+0x2b0>)
 8000ff0:	69bb      	ldr	r3, [r7, #24]
 8000ff2:	4313      	orrs	r3, r2
 8000ff4:	600b      	str	r3, [r1, #0]
 8000ff6:	e006      	b.n	8001006 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000ff8:	4b35      	ldr	r3, [pc, #212]	; (80010d0 <HAL_GPIO_Init+0x2b0>)
 8000ffa:	681a      	ldr	r2, [r3, #0]
 8000ffc:	69bb      	ldr	r3, [r7, #24]
 8000ffe:	43db      	mvns	r3, r3
 8001000:	4933      	ldr	r1, [pc, #204]	; (80010d0 <HAL_GPIO_Init+0x2b0>)
 8001002:	4013      	ands	r3, r2
 8001004:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	685b      	ldr	r3, [r3, #4]
 800100a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800100e:	2b00      	cmp	r3, #0
 8001010:	d006      	beq.n	8001020 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001012:	4b2f      	ldr	r3, [pc, #188]	; (80010d0 <HAL_GPIO_Init+0x2b0>)
 8001014:	685a      	ldr	r2, [r3, #4]
 8001016:	492e      	ldr	r1, [pc, #184]	; (80010d0 <HAL_GPIO_Init+0x2b0>)
 8001018:	69bb      	ldr	r3, [r7, #24]
 800101a:	4313      	orrs	r3, r2
 800101c:	604b      	str	r3, [r1, #4]
 800101e:	e006      	b.n	800102e <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001020:	4b2b      	ldr	r3, [pc, #172]	; (80010d0 <HAL_GPIO_Init+0x2b0>)
 8001022:	685a      	ldr	r2, [r3, #4]
 8001024:	69bb      	ldr	r3, [r7, #24]
 8001026:	43db      	mvns	r3, r3
 8001028:	4929      	ldr	r1, [pc, #164]	; (80010d0 <HAL_GPIO_Init+0x2b0>)
 800102a:	4013      	ands	r3, r2
 800102c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	685b      	ldr	r3, [r3, #4]
 8001032:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001036:	2b00      	cmp	r3, #0
 8001038:	d006      	beq.n	8001048 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800103a:	4b25      	ldr	r3, [pc, #148]	; (80010d0 <HAL_GPIO_Init+0x2b0>)
 800103c:	689a      	ldr	r2, [r3, #8]
 800103e:	4924      	ldr	r1, [pc, #144]	; (80010d0 <HAL_GPIO_Init+0x2b0>)
 8001040:	69bb      	ldr	r3, [r7, #24]
 8001042:	4313      	orrs	r3, r2
 8001044:	608b      	str	r3, [r1, #8]
 8001046:	e006      	b.n	8001056 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001048:	4b21      	ldr	r3, [pc, #132]	; (80010d0 <HAL_GPIO_Init+0x2b0>)
 800104a:	689a      	ldr	r2, [r3, #8]
 800104c:	69bb      	ldr	r3, [r7, #24]
 800104e:	43db      	mvns	r3, r3
 8001050:	491f      	ldr	r1, [pc, #124]	; (80010d0 <HAL_GPIO_Init+0x2b0>)
 8001052:	4013      	ands	r3, r2
 8001054:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800105e:	2b00      	cmp	r3, #0
 8001060:	d006      	beq.n	8001070 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001062:	4b1b      	ldr	r3, [pc, #108]	; (80010d0 <HAL_GPIO_Init+0x2b0>)
 8001064:	68da      	ldr	r2, [r3, #12]
 8001066:	491a      	ldr	r1, [pc, #104]	; (80010d0 <HAL_GPIO_Init+0x2b0>)
 8001068:	69bb      	ldr	r3, [r7, #24]
 800106a:	4313      	orrs	r3, r2
 800106c:	60cb      	str	r3, [r1, #12]
 800106e:	e006      	b.n	800107e <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001070:	4b17      	ldr	r3, [pc, #92]	; (80010d0 <HAL_GPIO_Init+0x2b0>)
 8001072:	68da      	ldr	r2, [r3, #12]
 8001074:	69bb      	ldr	r3, [r7, #24]
 8001076:	43db      	mvns	r3, r3
 8001078:	4915      	ldr	r1, [pc, #84]	; (80010d0 <HAL_GPIO_Init+0x2b0>)
 800107a:	4013      	ands	r3, r2
 800107c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800107e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001080:	3301      	adds	r3, #1
 8001082:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	681a      	ldr	r2, [r3, #0]
 8001088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800108a:	fa22 f303 	lsr.w	r3, r2, r3
 800108e:	2b00      	cmp	r3, #0
 8001090:	f47f aed0 	bne.w	8000e34 <HAL_GPIO_Init+0x14>
  }
}
 8001094:	bf00      	nop
 8001096:	372c      	adds	r7, #44	; 0x2c
 8001098:	46bd      	mov	sp, r7
 800109a:	bc80      	pop	{r7}
 800109c:	4770      	bx	lr
 800109e:	bf00      	nop
 80010a0:	10210000 	.word	0x10210000
 80010a4:	10110000 	.word	0x10110000
 80010a8:	10120000 	.word	0x10120000
 80010ac:	10310000 	.word	0x10310000
 80010b0:	10320000 	.word	0x10320000
 80010b4:	10220000 	.word	0x10220000
 80010b8:	40021000 	.word	0x40021000
 80010bc:	40010000 	.word	0x40010000
 80010c0:	40010800 	.word	0x40010800
 80010c4:	40010c00 	.word	0x40010c00
 80010c8:	40011000 	.word	0x40011000
 80010cc:	40011400 	.word	0x40011400
 80010d0:	40010400 	.word	0x40010400

080010d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b083      	sub	sp, #12
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
 80010dc:	460b      	mov	r3, r1
 80010de:	807b      	strh	r3, [r7, #2]
 80010e0:	4613      	mov	r3, r2
 80010e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80010e4:	787b      	ldrb	r3, [r7, #1]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d003      	beq.n	80010f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010ea:	887a      	ldrh	r2, [r7, #2]
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80010f0:	e003      	b.n	80010fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80010f2:	887b      	ldrh	r3, [r7, #2]
 80010f4:	041a      	lsls	r2, r3, #16
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	611a      	str	r2, [r3, #16]
}
 80010fa:	bf00      	nop
 80010fc:	370c      	adds	r7, #12
 80010fe:	46bd      	mov	sp, r7
 8001100:	bc80      	pop	{r7}
 8001102:	4770      	bx	lr

08001104 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001104:	b480      	push	{r7}
 8001106:	b083      	sub	sp, #12
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
 800110c:	460b      	mov	r3, r1
 800110e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	68da      	ldr	r2, [r3, #12]
 8001114:	887b      	ldrh	r3, [r7, #2]
 8001116:	4013      	ands	r3, r2
 8001118:	2b00      	cmp	r3, #0
 800111a:	d003      	beq.n	8001124 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800111c:	887a      	ldrh	r2, [r7, #2]
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8001122:	e002      	b.n	800112a <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001124:	887a      	ldrh	r2, [r7, #2]
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	611a      	str	r2, [r3, #16]
}
 800112a:	bf00      	nop
 800112c:	370c      	adds	r7, #12
 800112e:	46bd      	mov	sp, r7
 8001130:	bc80      	pop	{r7}
 8001132:	4770      	bx	lr

08001134 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001134:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001136:	b08b      	sub	sp, #44	; 0x2c
 8001138:	af06      	add	r7, sp, #24
 800113a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d101      	bne.n	8001146 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001142:	2301      	movs	r3, #1
 8001144:	e0d3      	b.n	80012ee <HAL_PCD_Init+0x1ba>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 800114c:	b2db      	uxtb	r3, r3
 800114e:	2b00      	cmp	r3, #0
 8001150:	d106      	bne.n	8001160 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	2200      	movs	r2, #0
 8001156:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800115a:	6878      	ldr	r0, [r7, #4]
 800115c:	f005 fb78 	bl	8006850 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	2203      	movs	r2, #3
 8001164:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4618      	mov	r0, r3
 800116e:	f002 fcbf 	bl	8003af0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	603b      	str	r3, [r7, #0]
 8001178:	687e      	ldr	r6, [r7, #4]
 800117a:	466d      	mov	r5, sp
 800117c:	f106 0410 	add.w	r4, r6, #16
 8001180:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001182:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001184:	6823      	ldr	r3, [r4, #0]
 8001186:	602b      	str	r3, [r5, #0]
 8001188:	1d33      	adds	r3, r6, #4
 800118a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800118c:	6838      	ldr	r0, [r7, #0]
 800118e:	f002 fc88 	bl	8003aa2 <USB_CoreInit>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d005      	beq.n	80011a4 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	2202      	movs	r2, #2
 800119c:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 80011a0:	2301      	movs	r3, #1
 80011a2:	e0a4      	b.n	80012ee <HAL_PCD_Init+0x1ba>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	2100      	movs	r1, #0
 80011aa:	4618      	mov	r0, r3
 80011ac:	f002 fcbc 	bl	8003b28 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011b0:	2300      	movs	r3, #0
 80011b2:	73fb      	strb	r3, [r7, #15]
 80011b4:	e035      	b.n	8001222 <HAL_PCD_Init+0xee>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80011b6:	7bfb      	ldrb	r3, [r7, #15]
 80011b8:	687a      	ldr	r2, [r7, #4]
 80011ba:	015b      	lsls	r3, r3, #5
 80011bc:	4413      	add	r3, r2
 80011be:	3329      	adds	r3, #41	; 0x29
 80011c0:	2201      	movs	r2, #1
 80011c2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80011c4:	7bfb      	ldrb	r3, [r7, #15]
 80011c6:	687a      	ldr	r2, [r7, #4]
 80011c8:	015b      	lsls	r3, r3, #5
 80011ca:	4413      	add	r3, r2
 80011cc:	3328      	adds	r3, #40	; 0x28
 80011ce:	7bfa      	ldrb	r2, [r7, #15]
 80011d0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80011d2:	7bfb      	ldrb	r3, [r7, #15]
 80011d4:	7bfa      	ldrb	r2, [r7, #15]
 80011d6:	b291      	uxth	r1, r2
 80011d8:	687a      	ldr	r2, [r7, #4]
 80011da:	015b      	lsls	r3, r3, #5
 80011dc:	4413      	add	r3, r2
 80011de:	3336      	adds	r3, #54	; 0x36
 80011e0:	460a      	mov	r2, r1
 80011e2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80011e4:	7bfb      	ldrb	r3, [r7, #15]
 80011e6:	687a      	ldr	r2, [r7, #4]
 80011e8:	015b      	lsls	r3, r3, #5
 80011ea:	4413      	add	r3, r2
 80011ec:	332b      	adds	r3, #43	; 0x2b
 80011ee:	2200      	movs	r2, #0
 80011f0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80011f2:	7bfb      	ldrb	r3, [r7, #15]
 80011f4:	687a      	ldr	r2, [r7, #4]
 80011f6:	015b      	lsls	r3, r3, #5
 80011f8:	4413      	add	r3, r2
 80011fa:	3338      	adds	r3, #56	; 0x38
 80011fc:	2200      	movs	r2, #0
 80011fe:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001200:	7bfb      	ldrb	r3, [r7, #15]
 8001202:	687a      	ldr	r2, [r7, #4]
 8001204:	015b      	lsls	r3, r3, #5
 8001206:	4413      	add	r3, r2
 8001208:	333c      	adds	r3, #60	; 0x3c
 800120a:	2200      	movs	r2, #0
 800120c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800120e:	7bfb      	ldrb	r3, [r7, #15]
 8001210:	687a      	ldr	r2, [r7, #4]
 8001212:	3302      	adds	r3, #2
 8001214:	015b      	lsls	r3, r3, #5
 8001216:	4413      	add	r3, r2
 8001218:	2200      	movs	r2, #0
 800121a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800121c:	7bfb      	ldrb	r3, [r7, #15]
 800121e:	3301      	adds	r3, #1
 8001220:	73fb      	strb	r3, [r7, #15]
 8001222:	7bfa      	ldrb	r2, [r7, #15]
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	429a      	cmp	r2, r3
 800122a:	d3c4      	bcc.n	80011b6 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800122c:	2300      	movs	r3, #0
 800122e:	73fb      	strb	r3, [r7, #15]
 8001230:	e031      	b.n	8001296 <HAL_PCD_Init+0x162>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001232:	7bfb      	ldrb	r3, [r7, #15]
 8001234:	687a      	ldr	r2, [r7, #4]
 8001236:	015b      	lsls	r3, r3, #5
 8001238:	4413      	add	r3, r2
 800123a:	f203 1329 	addw	r3, r3, #297	; 0x129
 800123e:	2200      	movs	r2, #0
 8001240:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001242:	7bfb      	ldrb	r3, [r7, #15]
 8001244:	687a      	ldr	r2, [r7, #4]
 8001246:	015b      	lsls	r3, r3, #5
 8001248:	4413      	add	r3, r2
 800124a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800124e:	7bfa      	ldrb	r2, [r7, #15]
 8001250:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001252:	7bfb      	ldrb	r3, [r7, #15]
 8001254:	687a      	ldr	r2, [r7, #4]
 8001256:	015b      	lsls	r3, r3, #5
 8001258:	4413      	add	r3, r2
 800125a:	f203 132b 	addw	r3, r3, #299	; 0x12b
 800125e:	2200      	movs	r2, #0
 8001260:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001262:	7bfb      	ldrb	r3, [r7, #15]
 8001264:	687a      	ldr	r2, [r7, #4]
 8001266:	015b      	lsls	r3, r3, #5
 8001268:	4413      	add	r3, r2
 800126a:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800126e:	2200      	movs	r2, #0
 8001270:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001272:	7bfb      	ldrb	r3, [r7, #15]
 8001274:	687a      	ldr	r2, [r7, #4]
 8001276:	015b      	lsls	r3, r3, #5
 8001278:	4413      	add	r3, r2
 800127a:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800127e:	2200      	movs	r2, #0
 8001280:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001282:	7bfb      	ldrb	r3, [r7, #15]
 8001284:	687a      	ldr	r2, [r7, #4]
 8001286:	330a      	adds	r3, #10
 8001288:	015b      	lsls	r3, r3, #5
 800128a:	4413      	add	r3, r2
 800128c:	2200      	movs	r2, #0
 800128e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001290:	7bfb      	ldrb	r3, [r7, #15]
 8001292:	3301      	adds	r3, #1
 8001294:	73fb      	strb	r3, [r7, #15]
 8001296:	7bfa      	ldrb	r2, [r7, #15]
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	429a      	cmp	r2, r3
 800129e:	d3c8      	bcc.n	8001232 <HAL_PCD_Init+0xfe>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	603b      	str	r3, [r7, #0]
 80012a6:	687e      	ldr	r6, [r7, #4]
 80012a8:	466d      	mov	r5, sp
 80012aa:	f106 0410 	add.w	r4, r6, #16
 80012ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012b2:	6823      	ldr	r3, [r4, #0]
 80012b4:	602b      	str	r3, [r5, #0]
 80012b6:	1d33      	adds	r3, r6, #4
 80012b8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80012ba:	6838      	ldr	r0, [r7, #0]
 80012bc:	f002 fc40 	bl	8003b40 <USB_DevInit>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d005      	beq.n	80012d2 <HAL_PCD_Init+0x19e>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	2202      	movs	r2, #2
 80012ca:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 80012ce:	2301      	movs	r3, #1
 80012d0:	e00d      	b.n	80012ee <HAL_PCD_Init+0x1ba>
  }

  hpcd->USB_Address = 0U;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	2200      	movs	r2, #0
 80012d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	2201      	movs	r2, #1
 80012de:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  (void)USB_DevDisconnect(hpcd->Instance);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4618      	mov	r0, r3
 80012e8:	f003 fc7d 	bl	8004be6 <USB_DevDisconnect>

  return HAL_OK;
 80012ec:	2300      	movs	r3, #0
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	3714      	adds	r7, #20
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080012f6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80012f6:	b580      	push	{r7, lr}
 80012f8:	b082      	sub	sp, #8
 80012fa:	af00      	add	r7, sp, #0
 80012fc:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8001304:	2b01      	cmp	r3, #1
 8001306:	d101      	bne.n	800130c <HAL_PCD_Start+0x16>
 8001308:	2302      	movs	r3, #2
 800130a:	e016      	b.n	800133a <HAL_PCD_Start+0x44>
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	2201      	movs	r2, #1
 8001310:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001314:	2101      	movs	r1, #1
 8001316:	6878      	ldr	r0, [r7, #4]
 8001318:	f005 fd09 	bl	8006d2e <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */
  (void)USB_DevConnect(hpcd->Instance);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4618      	mov	r0, r3
 8001322:	f003 fc56 	bl	8004bd2 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4618      	mov	r0, r3
 800132c:	f002 fbc9 	bl	8003ac2 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	2200      	movs	r2, #0
 8001334:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8001338:	2300      	movs	r3, #0
}
 800133a:	4618      	mov	r0, r3
 800133c:	3708      	adds	r7, #8
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}

08001342 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001342:	b580      	push	{r7, lr}
 8001344:	b082      	sub	sp, #8
 8001346:	af00      	add	r7, sp, #0
 8001348:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4618      	mov	r0, r3
 8001350:	f003 fc53 	bl	8004bfa <USB_ReadInterrupts>
 8001354:	4603      	mov	r3, r0
 8001356:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800135a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800135e:	d102      	bne.n	8001366 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001360:	6878      	ldr	r0, [r7, #4]
 8001362:	f000 faf3 	bl	800194c <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4618      	mov	r0, r3
 800136c:	f003 fc45 	bl	8004bfa <USB_ReadInterrupts>
 8001370:	4603      	mov	r3, r0
 8001372:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001376:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800137a:	d112      	bne.n	80013a2 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001384:	b29a      	uxth	r2, r3
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800138e:	b292      	uxth	r2, r2
 8001390:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001394:	6878      	ldr	r0, [r7, #4]
 8001396:	f005 fad8 	bl	800694a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800139a:	2100      	movs	r1, #0
 800139c:	6878      	ldr	r0, [r7, #4]
 800139e:	f000 f8de 	bl	800155e <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4618      	mov	r0, r3
 80013a8:	f003 fc27 	bl	8004bfa <USB_ReadInterrupts>
 80013ac:	4603      	mov	r3, r0
 80013ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013b2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80013b6:	d10b      	bne.n	80013d0 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80013c0:	b29a      	uxth	r2, r3
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80013ca:	b292      	uxth	r2, r2
 80013cc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4618      	mov	r0, r3
 80013d6:	f003 fc10 	bl	8004bfa <USB_ReadInterrupts>
 80013da:	4603      	mov	r3, r0
 80013dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80013e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80013e4:	d10b      	bne.n	80013fe <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80013ee:	b29a      	uxth	r2, r3
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80013f8:	b292      	uxth	r2, r2
 80013fa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4618      	mov	r0, r3
 8001404:	f003 fbf9 	bl	8004bfa <USB_ReadInterrupts>
 8001408:	4603      	mov	r3, r0
 800140a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800140e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001412:	d126      	bne.n	8001462 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800141c:	b29a      	uxth	r2, r3
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f022 0204 	bic.w	r2, r2, #4
 8001426:	b292      	uxth	r2, r2
 8001428:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001434:	b29a      	uxth	r2, r3
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f022 0208 	bic.w	r2, r2, #8
 800143e:	b292      	uxth	r2, r2
 8001440:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001444:	6878      	ldr	r0, [r7, #4]
 8001446:	f005 fab9 	bl	80069bc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001452:	b29a      	uxth	r2, r3
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800145c:	b292      	uxth	r2, r2
 800145e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	4618      	mov	r0, r3
 8001468:	f003 fbc7 	bl	8004bfa <USB_ReadInterrupts>
 800146c:	4603      	mov	r3, r0
 800146e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001472:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001476:	d13d      	bne.n	80014f4 <HAL_PCD_IRQHandler+0x1b2>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001480:	b29a      	uxth	r2, r3
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f042 0208 	orr.w	r2, r2, #8
 800148a:	b292      	uxth	r2, r2
 800148c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001498:	b29a      	uxth	r2, r3
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80014a2:	b292      	uxth	r2, r2
 80014a4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80014b0:	b29a      	uxth	r2, r3
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f042 0204 	orr.w	r2, r2, #4
 80014ba:	b292      	uxth	r2, r2
 80014bc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* WA: Clear Wakeup flag if raised with suspend signal */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4618      	mov	r0, r3
 80014c6:	f003 fb98 	bl	8004bfa <USB_ReadInterrupts>
 80014ca:	4603      	mov	r3, r0
 80014cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80014d4:	d10b      	bne.n	80014ee <HAL_PCD_IRQHandler+0x1ac>
    {
       __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80014de:	b29a      	uxth	r2, r3
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80014e8:	b292      	uxth	r2, r2
 80014ea:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80014ee:	6878      	ldr	r0, [r7, #4]
 80014f0:	f005 fa4a 	bl	8006988 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4618      	mov	r0, r3
 80014fa:	f003 fb7e 	bl	8004bfa <USB_ReadInterrupts>
 80014fe:	4603      	mov	r3, r0
 8001500:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001504:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001508:	d10e      	bne.n	8001528 <HAL_PCD_IRQHandler+0x1e6>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001512:	b29a      	uxth	r2, r3
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800151c:	b292      	uxth	r2, r2
 800151e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001522:	6878      	ldr	r0, [r7, #4]
 8001524:	f005 fa03 	bl	800692e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4618      	mov	r0, r3
 800152e:	f003 fb64 	bl	8004bfa <USB_ReadInterrupts>
 8001532:	4603      	mov	r3, r0
 8001534:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001538:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800153c:	d10b      	bne.n	8001556 <HAL_PCD_IRQHandler+0x214>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001546:	b29a      	uxth	r2, r3
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001550:	b292      	uxth	r2, r2
 8001552:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8001556:	bf00      	nop
 8001558:	3708      	adds	r7, #8
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}

0800155e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800155e:	b580      	push	{r7, lr}
 8001560:	b082      	sub	sp, #8
 8001562:	af00      	add	r7, sp, #0
 8001564:	6078      	str	r0, [r7, #4]
 8001566:	460b      	mov	r3, r1
 8001568:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8001570:	2b01      	cmp	r3, #1
 8001572:	d101      	bne.n	8001578 <HAL_PCD_SetAddress+0x1a>
 8001574:	2302      	movs	r3, #2
 8001576:	e013      	b.n	80015a0 <HAL_PCD_SetAddress+0x42>
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2201      	movs	r2, #1
 800157c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  hpcd->USB_Address = address;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	78fa      	ldrb	r2, [r7, #3]
 8001584:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	78fa      	ldrb	r2, [r7, #3]
 800158e:	4611      	mov	r1, r2
 8001590:	4618      	mov	r0, r3
 8001592:	f003 fb0b 	bl	8004bac <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	2200      	movs	r2, #0
 800159a:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 800159e:	2300      	movs	r3, #0
}
 80015a0:	4618      	mov	r0, r3
 80015a2:	3708      	adds	r7, #8
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}

080015a8 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b084      	sub	sp, #16
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
 80015b0:	4608      	mov	r0, r1
 80015b2:	4611      	mov	r1, r2
 80015b4:	461a      	mov	r2, r3
 80015b6:	4603      	mov	r3, r0
 80015b8:	70fb      	strb	r3, [r7, #3]
 80015ba:	460b      	mov	r3, r1
 80015bc:	803b      	strh	r3, [r7, #0]
 80015be:	4613      	mov	r3, r2
 80015c0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80015c2:	2300      	movs	r3, #0
 80015c4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80015c6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	da0b      	bge.n	80015e6 <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80015ce:	78fb      	ldrb	r3, [r7, #3]
 80015d0:	f003 0307 	and.w	r3, r3, #7
 80015d4:	015b      	lsls	r3, r3, #5
 80015d6:	3328      	adds	r3, #40	; 0x28
 80015d8:	687a      	ldr	r2, [r7, #4]
 80015da:	4413      	add	r3, r2
 80015dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	2201      	movs	r2, #1
 80015e2:	705a      	strb	r2, [r3, #1]
 80015e4:	e00b      	b.n	80015fe <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80015e6:	78fb      	ldrb	r3, [r7, #3]
 80015e8:	f003 0307 	and.w	r3, r3, #7
 80015ec:	015b      	lsls	r3, r3, #5
 80015ee:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80015f2:	687a      	ldr	r2, [r7, #4]
 80015f4:	4413      	add	r3, r2
 80015f6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	2200      	movs	r2, #0
 80015fc:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80015fe:	78fb      	ldrb	r3, [r7, #3]
 8001600:	f003 0307 	and.w	r3, r3, #7
 8001604:	b2da      	uxtb	r2, r3
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800160a:	883a      	ldrh	r2, [r7, #0]
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	78ba      	ldrb	r2, [r7, #2]
 8001614:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	785b      	ldrb	r3, [r3, #1]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d004      	beq.n	8001628 <HAL_PCD_EP_Open+0x80>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	781b      	ldrb	r3, [r3, #0]
 8001622:	b29a      	uxth	r2, r3
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001628:	78bb      	ldrb	r3, [r7, #2]
 800162a:	2b02      	cmp	r3, #2
 800162c:	d102      	bne.n	8001634 <HAL_PCD_EP_Open+0x8c>
  {
    ep->data_pid_start = 0U;
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	2200      	movs	r2, #0
 8001632:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 800163a:	2b01      	cmp	r3, #1
 800163c:	d101      	bne.n	8001642 <HAL_PCD_EP_Open+0x9a>
 800163e:	2302      	movs	r3, #2
 8001640:	e00e      	b.n	8001660 <HAL_PCD_EP_Open+0xb8>
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	2201      	movs	r2, #1
 8001646:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	68f9      	ldr	r1, [r7, #12]
 8001650:	4618      	mov	r0, r3
 8001652:	f002 fa99 	bl	8003b88 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	2200      	movs	r2, #0
 800165a:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return ret;
 800165e:	7afb      	ldrb	r3, [r7, #11]
}
 8001660:	4618      	mov	r0, r3
 8001662:	3710      	adds	r7, #16
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}

08001668 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b084      	sub	sp, #16
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
 8001670:	460b      	mov	r3, r1
 8001672:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001674:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001678:	2b00      	cmp	r3, #0
 800167a:	da0b      	bge.n	8001694 <HAL_PCD_EP_Close+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800167c:	78fb      	ldrb	r3, [r7, #3]
 800167e:	f003 0307 	and.w	r3, r3, #7
 8001682:	015b      	lsls	r3, r3, #5
 8001684:	3328      	adds	r3, #40	; 0x28
 8001686:	687a      	ldr	r2, [r7, #4]
 8001688:	4413      	add	r3, r2
 800168a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	2201      	movs	r2, #1
 8001690:	705a      	strb	r2, [r3, #1]
 8001692:	e00b      	b.n	80016ac <HAL_PCD_EP_Close+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001694:	78fb      	ldrb	r3, [r7, #3]
 8001696:	f003 0307 	and.w	r3, r3, #7
 800169a:	015b      	lsls	r3, r3, #5
 800169c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80016a0:	687a      	ldr	r2, [r7, #4]
 80016a2:	4413      	add	r3, r2
 80016a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	2200      	movs	r2, #0
 80016aa:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80016ac:	78fb      	ldrb	r3, [r7, #3]
 80016ae:	f003 0307 	and.w	r3, r3, #7
 80016b2:	b2da      	uxtb	r2, r3
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80016be:	2b01      	cmp	r3, #1
 80016c0:	d101      	bne.n	80016c6 <HAL_PCD_EP_Close+0x5e>
 80016c2:	2302      	movs	r3, #2
 80016c4:	e00e      	b.n	80016e4 <HAL_PCD_EP_Close+0x7c>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2201      	movs	r2, #1
 80016ca:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	68f9      	ldr	r1, [r7, #12]
 80016d4:	4618      	mov	r0, r3
 80016d6:	f002 fd45 	bl	8004164 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2200      	movs	r2, #0
 80016de:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 80016e2:	2300      	movs	r3, #0
}
 80016e4:	4618      	mov	r0, r3
 80016e6:	3710      	adds	r7, #16
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}

080016ec <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b086      	sub	sp, #24
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	60f8      	str	r0, [r7, #12]
 80016f4:	607a      	str	r2, [r7, #4]
 80016f6:	603b      	str	r3, [r7, #0]
 80016f8:	460b      	mov	r3, r1
 80016fa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80016fc:	7afb      	ldrb	r3, [r7, #11]
 80016fe:	f003 0307 	and.w	r3, r3, #7
 8001702:	015b      	lsls	r3, r3, #5
 8001704:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001708:	68fa      	ldr	r2, [r7, #12]
 800170a:	4413      	add	r3, r2
 800170c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800170e:	697b      	ldr	r3, [r7, #20]
 8001710:	687a      	ldr	r2, [r7, #4]
 8001712:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	683a      	ldr	r2, [r7, #0]
 8001718:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800171a:	697b      	ldr	r3, [r7, #20]
 800171c:	2200      	movs	r2, #0
 800171e:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	2200      	movs	r2, #0
 8001724:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001726:	7afb      	ldrb	r3, [r7, #11]
 8001728:	f003 0307 	and.w	r3, r3, #7
 800172c:	b2da      	uxtb	r2, r3
 800172e:	697b      	ldr	r3, [r7, #20]
 8001730:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001732:	7afb      	ldrb	r3, [r7, #11]
 8001734:	f003 0307 	and.w	r3, r3, #7
 8001738:	2b00      	cmp	r3, #0
 800173a:	d106      	bne.n	800174a <HAL_PCD_EP_Receive+0x5e>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	6979      	ldr	r1, [r7, #20]
 8001742:	4618      	mov	r0, r3
 8001744:	f002 fea4 	bl	8004490 <USB_EPStartXfer>
 8001748:	e005      	b.n	8001756 <HAL_PCD_EP_Receive+0x6a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	6979      	ldr	r1, [r7, #20]
 8001750:	4618      	mov	r0, r3
 8001752:	f002 fe9d 	bl	8004490 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001756:	2300      	movs	r3, #0
}
 8001758:	4618      	mov	r0, r3
 800175a:	3718      	adds	r7, #24
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}

08001760 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001760:	b480      	push	{r7}
 8001762:	b083      	sub	sp, #12
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
 8001768:	460b      	mov	r3, r1
 800176a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800176c:	78fb      	ldrb	r3, [r7, #3]
 800176e:	f003 0307 	and.w	r3, r3, #7
 8001772:	687a      	ldr	r2, [r7, #4]
 8001774:	330a      	adds	r3, #10
 8001776:	015b      	lsls	r3, r3, #5
 8001778:	4413      	add	r3, r2
 800177a:	3304      	adds	r3, #4
 800177c:	681b      	ldr	r3, [r3, #0]
}
 800177e:	4618      	mov	r0, r3
 8001780:	370c      	adds	r7, #12
 8001782:	46bd      	mov	sp, r7
 8001784:	bc80      	pop	{r7}
 8001786:	4770      	bx	lr

08001788 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b086      	sub	sp, #24
 800178c:	af00      	add	r7, sp, #0
 800178e:	60f8      	str	r0, [r7, #12]
 8001790:	607a      	str	r2, [r7, #4]
 8001792:	603b      	str	r3, [r7, #0]
 8001794:	460b      	mov	r3, r1
 8001796:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001798:	7afb      	ldrb	r3, [r7, #11]
 800179a:	f003 0307 	and.w	r3, r3, #7
 800179e:	015b      	lsls	r3, r3, #5
 80017a0:	3328      	adds	r3, #40	; 0x28
 80017a2:	68fa      	ldr	r2, [r7, #12]
 80017a4:	4413      	add	r3, r2
 80017a6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	687a      	ldr	r2, [r7, #4]
 80017ac:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80017ae:	697b      	ldr	r3, [r7, #20]
 80017b0:	683a      	ldr	r2, [r7, #0]
 80017b2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	2200      	movs	r2, #0
 80017b8:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	2201      	movs	r2, #1
 80017be:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80017c0:	7afb      	ldrb	r3, [r7, #11]
 80017c2:	f003 0307 	and.w	r3, r3, #7
 80017c6:	b2da      	uxtb	r2, r3
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80017cc:	7afb      	ldrb	r3, [r7, #11]
 80017ce:	f003 0307 	and.w	r3, r3, #7
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d106      	bne.n	80017e4 <HAL_PCD_EP_Transmit+0x5c>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	6979      	ldr	r1, [r7, #20]
 80017dc:	4618      	mov	r0, r3
 80017de:	f002 fe57 	bl	8004490 <USB_EPStartXfer>
 80017e2:	e005      	b.n	80017f0 <HAL_PCD_EP_Transmit+0x68>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	6979      	ldr	r1, [r7, #20]
 80017ea:	4618      	mov	r0, r3
 80017ec:	f002 fe50 	bl	8004490 <USB_EPStartXfer>
  }

  return HAL_OK;
 80017f0:	2300      	movs	r3, #0
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	3718      	adds	r7, #24
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}

080017fa <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80017fa:	b580      	push	{r7, lr}
 80017fc:	b084      	sub	sp, #16
 80017fe:	af00      	add	r7, sp, #0
 8001800:	6078      	str	r0, [r7, #4]
 8001802:	460b      	mov	r3, r1
 8001804:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001806:	78fb      	ldrb	r3, [r7, #3]
 8001808:	f003 0207 	and.w	r2, r3, #7
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	429a      	cmp	r2, r3
 8001812:	d901      	bls.n	8001818 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001814:	2301      	movs	r3, #1
 8001816:	e046      	b.n	80018a6 <HAL_PCD_EP_SetStall+0xac>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001818:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800181c:	2b00      	cmp	r3, #0
 800181e:	da0b      	bge.n	8001838 <HAL_PCD_EP_SetStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001820:	78fb      	ldrb	r3, [r7, #3]
 8001822:	f003 0307 	and.w	r3, r3, #7
 8001826:	015b      	lsls	r3, r3, #5
 8001828:	3328      	adds	r3, #40	; 0x28
 800182a:	687a      	ldr	r2, [r7, #4]
 800182c:	4413      	add	r3, r2
 800182e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	2201      	movs	r2, #1
 8001834:	705a      	strb	r2, [r3, #1]
 8001836:	e009      	b.n	800184c <HAL_PCD_EP_SetStall+0x52>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001838:	78fb      	ldrb	r3, [r7, #3]
 800183a:	015b      	lsls	r3, r3, #5
 800183c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001840:	687a      	ldr	r2, [r7, #4]
 8001842:	4413      	add	r3, r2
 8001844:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	2200      	movs	r2, #0
 800184a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	2201      	movs	r2, #1
 8001850:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001852:	78fb      	ldrb	r3, [r7, #3]
 8001854:	f003 0307 	and.w	r3, r3, #7
 8001858:	b2da      	uxtb	r2, r3
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8001864:	2b01      	cmp	r3, #1
 8001866:	d101      	bne.n	800186c <HAL_PCD_EP_SetStall+0x72>
 8001868:	2302      	movs	r3, #2
 800186a:	e01c      	b.n	80018a6 <HAL_PCD_EP_SetStall+0xac>
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2201      	movs	r2, #1
 8001870:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	68f9      	ldr	r1, [r7, #12]
 800187a:	4618      	mov	r0, r3
 800187c:	f003 f8c0 	bl	8004a00 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001880:	78fb      	ldrb	r3, [r7, #3]
 8001882:	f003 0307 	and.w	r3, r3, #7
 8001886:	2b00      	cmp	r3, #0
 8001888:	d108      	bne.n	800189c <HAL_PCD_EP_SetStall+0xa2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681a      	ldr	r2, [r3, #0]
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8001894:	4619      	mov	r1, r3
 8001896:	4610      	mov	r0, r2
 8001898:	f003 f9be 	bl	8004c18 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2200      	movs	r2, #0
 80018a0:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 80018a4:	2300      	movs	r3, #0
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	3710      	adds	r7, #16
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}

080018ae <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80018ae:	b580      	push	{r7, lr}
 80018b0:	b084      	sub	sp, #16
 80018b2:	af00      	add	r7, sp, #0
 80018b4:	6078      	str	r0, [r7, #4]
 80018b6:	460b      	mov	r3, r1
 80018b8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80018ba:	78fb      	ldrb	r3, [r7, #3]
 80018bc:	f003 020f 	and.w	r2, r3, #15
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	429a      	cmp	r2, r3
 80018c6:	d901      	bls.n	80018cc <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80018c8:	2301      	movs	r3, #1
 80018ca:	e03a      	b.n	8001942 <HAL_PCD_EP_ClrStall+0x94>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80018cc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	da0b      	bge.n	80018ec <HAL_PCD_EP_ClrStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80018d4:	78fb      	ldrb	r3, [r7, #3]
 80018d6:	f003 0307 	and.w	r3, r3, #7
 80018da:	015b      	lsls	r3, r3, #5
 80018dc:	3328      	adds	r3, #40	; 0x28
 80018de:	687a      	ldr	r2, [r7, #4]
 80018e0:	4413      	add	r3, r2
 80018e2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	2201      	movs	r2, #1
 80018e8:	705a      	strb	r2, [r3, #1]
 80018ea:	e00b      	b.n	8001904 <HAL_PCD_EP_ClrStall+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80018ec:	78fb      	ldrb	r3, [r7, #3]
 80018ee:	f003 0307 	and.w	r3, r3, #7
 80018f2:	015b      	lsls	r3, r3, #5
 80018f4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80018f8:	687a      	ldr	r2, [r7, #4]
 80018fa:	4413      	add	r3, r2
 80018fc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	2200      	movs	r2, #0
 8001902:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	2200      	movs	r2, #0
 8001908:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800190a:	78fb      	ldrb	r3, [r7, #3]
 800190c:	f003 0307 	and.w	r3, r3, #7
 8001910:	b2da      	uxtb	r2, r3
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 800191c:	2b01      	cmp	r3, #1
 800191e:	d101      	bne.n	8001924 <HAL_PCD_EP_ClrStall+0x76>
 8001920:	2302      	movs	r3, #2
 8001922:	e00e      	b.n	8001942 <HAL_PCD_EP_ClrStall+0x94>
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2201      	movs	r2, #1
 8001928:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	68f9      	ldr	r1, [r7, #12]
 8001932:	4618      	mov	r0, r3
 8001934:	f003 f8a6 	bl	8004a84 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2200      	movs	r2, #0
 800193c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8001940:	2300      	movs	r3, #0
}
 8001942:	4618      	mov	r0, r3
 8001944:	3710      	adds	r7, #16
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
	...

0800194c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800194c:	b590      	push	{r4, r7, lr}
 800194e:	b089      	sub	sp, #36	; 0x24
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001954:	e282      	b.n	8001e5c <PCD_EP_ISR_Handler+0x510>
  {
    wIstr = hpcd->Instance->ISTR;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800195e:	82fb      	strh	r3, [r7, #22]
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001960:	8afb      	ldrh	r3, [r7, #22]
 8001962:	b2db      	uxtb	r3, r3
 8001964:	f003 030f 	and.w	r3, r3, #15
 8001968:	757b      	strb	r3, [r7, #21]

    if (epindex == 0U)
 800196a:	7d7b      	ldrb	r3, [r7, #21]
 800196c:	2b00      	cmp	r3, #0
 800196e:	f040 8142 	bne.w	8001bf6 <PCD_EP_ISR_Handler+0x2aa>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001972:	8afb      	ldrh	r3, [r7, #22]
 8001974:	f003 0310 	and.w	r3, r3, #16
 8001978:	2b00      	cmp	r3, #0
 800197a:	d151      	bne.n	8001a20 <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	881b      	ldrh	r3, [r3, #0]
 8001982:	b29b      	uxth	r3, r3
 8001984:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001988:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800198c:	b29c      	uxth	r4, r3
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681a      	ldr	r2, [r3, #0]
 8001992:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 8001996:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800199a:	b29b      	uxth	r3, r3
 800199c:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	3328      	adds	r3, #40	; 0x28
 80019a2:	60fb      	str	r3, [r7, #12]

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80019ac:	b29b      	uxth	r3, r3
 80019ae:	461a      	mov	r2, r3
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	781b      	ldrb	r3, [r3, #0]
 80019b4:	00db      	lsls	r3, r3, #3
 80019b6:	4413      	add	r3, r2
 80019b8:	3302      	adds	r3, #2
 80019ba:	005b      	lsls	r3, r3, #1
 80019bc:	687a      	ldr	r2, [r7, #4]
 80019be:	6812      	ldr	r2, [r2, #0]
 80019c0:	4413      	add	r3, r2
 80019c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80019c6:	881b      	ldrh	r3, [r3, #0]
 80019c8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	695a      	ldr	r2, [r3, #20]
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	69db      	ldr	r3, [r3, #28]
 80019d8:	441a      	add	r2, r3
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80019de:	2100      	movs	r1, #0
 80019e0:	6878      	ldr	r0, [r7, #4]
 80019e2:	f004 ff8d 	bl	8006900 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80019ec:	b2db      	uxtb	r3, r3
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	f000 8234 	beq.w	8001e5c <PCD_EP_ISR_Handler+0x510>
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	699b      	ldr	r3, [r3, #24]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	f040 822f 	bne.w	8001e5c <PCD_EP_ISR_Handler+0x510>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001a04:	b2db      	uxtb	r3, r3
 8001a06:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001a0a:	b2da      	uxtb	r2, r3
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	b292      	uxth	r2, r2
 8001a12:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2200      	movs	r2, #0
 8001a1a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001a1e:	e21d      	b.n	8001e5c <PCD_EP_ISR_Handler+0x510>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001a26:	60fb      	str	r3, [r7, #12]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	881b      	ldrh	r3, [r3, #0]
 8001a2e:	827b      	strh	r3, [r7, #18]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001a30:	8a7b      	ldrh	r3, [r7, #18]
 8001a32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d033      	beq.n	8001aa2 <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001a42:	b29b      	uxth	r3, r3
 8001a44:	461a      	mov	r2, r3
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	781b      	ldrb	r3, [r3, #0]
 8001a4a:	00db      	lsls	r3, r3, #3
 8001a4c:	4413      	add	r3, r2
 8001a4e:	3306      	adds	r3, #6
 8001a50:	005b      	lsls	r3, r3, #1
 8001a52:	687a      	ldr	r2, [r7, #4]
 8001a54:	6812      	ldr	r2, [r2, #0]
 8001a56:	4413      	add	r3, r2
 8001a58:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001a5c:	881b      	ldrh	r3, [r3, #0]
 8001a5e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6818      	ldr	r0, [r3, #0]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	f503 710c 	add.w	r1, r3, #560	; 0x230
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001a78:	b29b      	uxth	r3, r3
 8001a7a:	f003 f91c 	bl	8004cb6 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1*/
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	881b      	ldrh	r3, [r3, #0]
 8001a84:	b29a      	uxth	r2, r3
 8001a86:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001a8a:	4013      	ands	r3, r2
 8001a8c:	b29c      	uxth	r4, r3
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8001a96:	b292      	uxth	r2, r2
 8001a98:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001a9a:	6878      	ldr	r0, [r7, #4]
 8001a9c:	f004 ff06 	bl	80068ac <HAL_PCD_SetupStageCallback>
 8001aa0:	e1dc      	b.n	8001e5c <PCD_EP_ISR_Handler+0x510>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001aa2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	f280 81d8 	bge.w	8001e5c <PCD_EP_ISR_Handler+0x510>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	881b      	ldrh	r3, [r3, #0]
 8001ab2:	b29a      	uxth	r2, r3
 8001ab4:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001ab8:	4013      	ands	r3, r2
 8001aba:	b29c      	uxth	r4, r3
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8001ac4:	b292      	uxth	r2, r2
 8001ac6:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ad0:	b29b      	uxth	r3, r3
 8001ad2:	461a      	mov	r2, r3
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	781b      	ldrb	r3, [r3, #0]
 8001ad8:	00db      	lsls	r3, r3, #3
 8001ada:	4413      	add	r3, r2
 8001adc:	3306      	adds	r3, #6
 8001ade:	005b      	lsls	r3, r3, #1
 8001ae0:	687a      	ldr	r2, [r7, #4]
 8001ae2:	6812      	ldr	r2, [r2, #0]
 8001ae4:	4413      	add	r3, r2
 8001ae6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001aea:	881b      	ldrh	r3, [r3, #0]
 8001aec:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	69db      	ldr	r3, [r3, #28]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d019      	beq.n	8001b30 <PCD_EP_ISR_Handler+0x1e4>
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	695b      	ldr	r3, [r3, #20]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d015      	beq.n	8001b30 <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6818      	ldr	r0, [r3, #0]
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	6959      	ldr	r1, [r3, #20]
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001b14:	b29b      	uxth	r3, r3
 8001b16:	f003 f8ce 	bl	8004cb6 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	695a      	ldr	r2, [r3, #20]
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	69db      	ldr	r3, [r3, #28]
 8001b22:	441a      	add	r2, r3
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001b28:	2100      	movs	r1, #0
 8001b2a:	6878      	ldr	r0, [r7, #4]
 8001b2c:	f004 fed0 	bl	80068d0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	461c      	mov	r4, r3
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001b3e:	b29b      	uxth	r3, r3
 8001b40:	441c      	add	r4, r3
 8001b42:	f204 430c 	addw	r3, r4, #1036	; 0x40c
 8001b46:	461c      	mov	r4, r3
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	691b      	ldr	r3, [r3, #16]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d10e      	bne.n	8001b6e <PCD_EP_ISR_Handler+0x222>
 8001b50:	8823      	ldrh	r3, [r4, #0]
 8001b52:	b29b      	uxth	r3, r3
 8001b54:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001b58:	b29b      	uxth	r3, r3
 8001b5a:	8023      	strh	r3, [r4, #0]
 8001b5c:	8823      	ldrh	r3, [r4, #0]
 8001b5e:	b29b      	uxth	r3, r3
 8001b60:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001b64:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001b68:	b29b      	uxth	r3, r3
 8001b6a:	8023      	strh	r3, [r4, #0]
 8001b6c:	e02d      	b.n	8001bca <PCD_EP_ISR_Handler+0x27e>
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	691b      	ldr	r3, [r3, #16]
 8001b72:	2b3e      	cmp	r3, #62	; 0x3e
 8001b74:	d812      	bhi.n	8001b9c <PCD_EP_ISR_Handler+0x250>
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	691b      	ldr	r3, [r3, #16]
 8001b7a:	085b      	lsrs	r3, r3, #1
 8001b7c:	61bb      	str	r3, [r7, #24]
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	691b      	ldr	r3, [r3, #16]
 8001b82:	f003 0301 	and.w	r3, r3, #1
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d002      	beq.n	8001b90 <PCD_EP_ISR_Handler+0x244>
 8001b8a:	69bb      	ldr	r3, [r7, #24]
 8001b8c:	3301      	adds	r3, #1
 8001b8e:	61bb      	str	r3, [r7, #24]
 8001b90:	69bb      	ldr	r3, [r7, #24]
 8001b92:	b29b      	uxth	r3, r3
 8001b94:	029b      	lsls	r3, r3, #10
 8001b96:	b29b      	uxth	r3, r3
 8001b98:	8023      	strh	r3, [r4, #0]
 8001b9a:	e016      	b.n	8001bca <PCD_EP_ISR_Handler+0x27e>
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	691b      	ldr	r3, [r3, #16]
 8001ba0:	095b      	lsrs	r3, r3, #5
 8001ba2:	61bb      	str	r3, [r7, #24]
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	691b      	ldr	r3, [r3, #16]
 8001ba8:	f003 031f 	and.w	r3, r3, #31
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d102      	bne.n	8001bb6 <PCD_EP_ISR_Handler+0x26a>
 8001bb0:	69bb      	ldr	r3, [r7, #24]
 8001bb2:	3b01      	subs	r3, #1
 8001bb4:	61bb      	str	r3, [r7, #24]
 8001bb6:	69bb      	ldr	r3, [r7, #24]
 8001bb8:	b29b      	uxth	r3, r3
 8001bba:	029b      	lsls	r3, r3, #10
 8001bbc:	b29b      	uxth	r3, r3
 8001bbe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001bc2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001bc6:	b29b      	uxth	r3, r3
 8001bc8:	8023      	strh	r3, [r4, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	881b      	ldrh	r3, [r3, #0]
 8001bd0:	b29b      	uxth	r3, r3
 8001bd2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001bd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001bda:	b29c      	uxth	r4, r3
 8001bdc:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8001be0:	b29c      	uxth	r4, r3
 8001be2:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8001be6:	b29c      	uxth	r4, r3
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681a      	ldr	r2, [r3, #0]
 8001bec:	4ba2      	ldr	r3, [pc, #648]	; (8001e78 <PCD_EP_ISR_Handler+0x52c>)
 8001bee:	4323      	orrs	r3, r4
 8001bf0:	b29b      	uxth	r3, r3
 8001bf2:	8013      	strh	r3, [r2, #0]
 8001bf4:	e132      	b.n	8001e5c <PCD_EP_ISR_Handler+0x510>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	461a      	mov	r2, r3
 8001bfc:	7d7b      	ldrb	r3, [r7, #21]
 8001bfe:	009b      	lsls	r3, r3, #2
 8001c00:	4413      	add	r3, r2
 8001c02:	881b      	ldrh	r3, [r3, #0]
 8001c04:	827b      	strh	r3, [r7, #18]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001c06:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	f280 80d1 	bge.w	8001db2 <PCD_EP_ISR_Handler+0x466>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	461a      	mov	r2, r3
 8001c16:	7d7b      	ldrb	r3, [r7, #21]
 8001c18:	009b      	lsls	r3, r3, #2
 8001c1a:	4413      	add	r3, r2
 8001c1c:	881b      	ldrh	r3, [r3, #0]
 8001c1e:	b29a      	uxth	r2, r3
 8001c20:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001c24:	4013      	ands	r3, r2
 8001c26:	b29c      	uxth	r4, r3
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	461a      	mov	r2, r3
 8001c2e:	7d7b      	ldrb	r3, [r7, #21]
 8001c30:	009b      	lsls	r3, r3, #2
 8001c32:	4413      	add	r3, r2
 8001c34:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8001c38:	b292      	uxth	r2, r2
 8001c3a:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001c3c:	7d7b      	ldrb	r3, [r7, #21]
 8001c3e:	015b      	lsls	r3, r3, #5
 8001c40:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001c44:	687a      	ldr	r2, [r7, #4]
 8001c46:	4413      	add	r3, r2
 8001c48:	60fb      	str	r3, [r7, #12]

        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	7b1b      	ldrb	r3, [r3, #12]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d121      	bne.n	8001c96 <PCD_EP_ISR_Handler+0x34a>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c5a:	b29b      	uxth	r3, r3
 8001c5c:	461a      	mov	r2, r3
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	781b      	ldrb	r3, [r3, #0]
 8001c62:	00db      	lsls	r3, r3, #3
 8001c64:	4413      	add	r3, r2
 8001c66:	3306      	adds	r3, #6
 8001c68:	005b      	lsls	r3, r3, #1
 8001c6a:	687a      	ldr	r2, [r7, #4]
 8001c6c:	6812      	ldr	r2, [r2, #0]
 8001c6e:	4413      	add	r3, r2
 8001c70:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001c74:	881b      	ldrh	r3, [r3, #0]
 8001c76:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001c7a:	83fb      	strh	r3, [r7, #30]
          if (count != 0U)
 8001c7c:	8bfb      	ldrh	r3, [r7, #30]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d072      	beq.n	8001d68 <PCD_EP_ISR_Handler+0x41c>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6818      	ldr	r0, [r3, #0]
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	6959      	ldr	r1, [r3, #20]
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	88da      	ldrh	r2, [r3, #6]
 8001c8e:	8bfb      	ldrh	r3, [r7, #30]
 8001c90:	f003 f811 	bl	8004cb6 <USB_ReadPMA>
 8001c94:	e068      	b.n	8001d68 <PCD_EP_ISR_Handler+0x41c>
          }
        }
        else
        {
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	461a      	mov	r2, r3
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	781b      	ldrb	r3, [r3, #0]
 8001ca0:	009b      	lsls	r3, r3, #2
 8001ca2:	4413      	add	r3, r2
 8001ca4:	881b      	ldrh	r3, [r3, #0]
 8001ca6:	b29b      	uxth	r3, r3
 8001ca8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d021      	beq.n	8001cf4 <PCD_EP_ISR_Handler+0x3a8>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001cb8:	b29b      	uxth	r3, r3
 8001cba:	461a      	mov	r2, r3
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	781b      	ldrb	r3, [r3, #0]
 8001cc0:	00db      	lsls	r3, r3, #3
 8001cc2:	4413      	add	r3, r2
 8001cc4:	3302      	adds	r3, #2
 8001cc6:	005b      	lsls	r3, r3, #1
 8001cc8:	687a      	ldr	r2, [r7, #4]
 8001cca:	6812      	ldr	r2, [r2, #0]
 8001ccc:	4413      	add	r3, r2
 8001cce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001cd2:	881b      	ldrh	r3, [r3, #0]
 8001cd4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001cd8:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 8001cda:	8bfb      	ldrh	r3, [r7, #30]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d02a      	beq.n	8001d36 <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6818      	ldr	r0, [r3, #0]
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	6959      	ldr	r1, [r3, #20]
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	891a      	ldrh	r2, [r3, #8]
 8001cec:	8bfb      	ldrh	r3, [r7, #30]
 8001cee:	f002 ffe2 	bl	8004cb6 <USB_ReadPMA>
 8001cf2:	e020      	b.n	8001d36 <PCD_EP_ISR_Handler+0x3ea>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001cfc:	b29b      	uxth	r3, r3
 8001cfe:	461a      	mov	r2, r3
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	781b      	ldrb	r3, [r3, #0]
 8001d04:	00db      	lsls	r3, r3, #3
 8001d06:	4413      	add	r3, r2
 8001d08:	3306      	adds	r3, #6
 8001d0a:	005b      	lsls	r3, r3, #1
 8001d0c:	687a      	ldr	r2, [r7, #4]
 8001d0e:	6812      	ldr	r2, [r2, #0]
 8001d10:	4413      	add	r3, r2
 8001d12:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001d16:	881b      	ldrh	r3, [r3, #0]
 8001d18:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d1c:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 8001d1e:	8bfb      	ldrh	r3, [r7, #30]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d008      	beq.n	8001d36 <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6818      	ldr	r0, [r3, #0]
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	6959      	ldr	r1, [r3, #20]
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	895a      	ldrh	r2, [r3, #10]
 8001d30:	8bfb      	ldrh	r3, [r7, #30]
 8001d32:	f002 ffc0 	bl	8004cb6 <USB_ReadPMA>
            }
          }
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	461a      	mov	r2, r3
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	781b      	ldrb	r3, [r3, #0]
 8001d40:	009b      	lsls	r3, r3, #2
 8001d42:	4413      	add	r3, r2
 8001d44:	881b      	ldrh	r3, [r3, #0]
 8001d46:	b29b      	uxth	r3, r3
 8001d48:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001d4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d50:	b29c      	uxth	r4, r3
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	461a      	mov	r2, r3
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	781b      	ldrb	r3, [r3, #0]
 8001d5c:	009b      	lsls	r3, r3, #2
 8001d5e:	441a      	add	r2, r3
 8001d60:	4b46      	ldr	r3, [pc, #280]	; (8001e7c <PCD_EP_ISR_Handler+0x530>)
 8001d62:	4323      	orrs	r3, r4
 8001d64:	b29b      	uxth	r3, r3
 8001d66:	8013      	strh	r3, [r2, #0]
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count += count;
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	69da      	ldr	r2, [r3, #28]
 8001d6c:	8bfb      	ldrh	r3, [r7, #30]
 8001d6e:	441a      	add	r2, r3
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	695a      	ldr	r2, [r3, #20]
 8001d78:	8bfb      	ldrh	r3, [r7, #30]
 8001d7a:	441a      	add	r2, r3
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	699b      	ldr	r3, [r3, #24]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d004      	beq.n	8001d92 <PCD_EP_ISR_Handler+0x446>
 8001d88:	8bfa      	ldrh	r2, [r7, #30]
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	691b      	ldr	r3, [r3, #16]
 8001d8e:	429a      	cmp	r2, r3
 8001d90:	d206      	bcs.n	8001da0 <PCD_EP_ISR_Handler+0x454>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	781b      	ldrb	r3, [r3, #0]
 8001d96:	4619      	mov	r1, r3
 8001d98:	6878      	ldr	r0, [r7, #4]
 8001d9a:	f004 fd99 	bl	80068d0 <HAL_PCD_DataOutStageCallback>
 8001d9e:	e008      	b.n	8001db2 <PCD_EP_ISR_Handler+0x466>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	7819      	ldrb	r1, [r3, #0]
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	695a      	ldr	r2, [r3, #20]
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	699b      	ldr	r3, [r3, #24]
 8001dac:	6878      	ldr	r0, [r7, #4]
 8001dae:	f7ff fc9d 	bl	80016ec <HAL_PCD_EP_Receive>
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001db2:	8a7b      	ldrh	r3, [r7, #18]
 8001db4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d04f      	beq.n	8001e5c <PCD_EP_ISR_Handler+0x510>
      {
        ep = &hpcd->IN_ep[epindex];
 8001dbc:	7d7b      	ldrb	r3, [r7, #21]
 8001dbe:	015b      	lsls	r3, r3, #5
 8001dc0:	3328      	adds	r3, #40	; 0x28
 8001dc2:	687a      	ldr	r2, [r7, #4]
 8001dc4:	4413      	add	r3, r2
 8001dc6:	60fb      	str	r3, [r7, #12]

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	461a      	mov	r2, r3
 8001dce:	7d7b      	ldrb	r3, [r7, #21]
 8001dd0:	009b      	lsls	r3, r3, #2
 8001dd2:	4413      	add	r3, r2
 8001dd4:	881b      	ldrh	r3, [r3, #0]
 8001dd6:	b29b      	uxth	r3, r3
 8001dd8:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001ddc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001de0:	b29c      	uxth	r4, r3
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	461a      	mov	r2, r3
 8001de8:	7d7b      	ldrb	r3, [r7, #21]
 8001dea:	009b      	lsls	r3, r3, #2
 8001dec:	441a      	add	r2, r3
 8001dee:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 8001df2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001df6:	b29b      	uxth	r3, r3
 8001df8:	8013      	strh	r3, [r2, #0]

        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e02:	b29b      	uxth	r3, r3
 8001e04:	461a      	mov	r2, r3
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	781b      	ldrb	r3, [r3, #0]
 8001e0a:	00db      	lsls	r3, r3, #3
 8001e0c:	4413      	add	r3, r2
 8001e0e:	3302      	adds	r3, #2
 8001e10:	005b      	lsls	r3, r3, #1
 8001e12:	687a      	ldr	r2, [r7, #4]
 8001e14:	6812      	ldr	r2, [r2, #0]
 8001e16:	4413      	add	r3, r2
 8001e18:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001e1c:	881b      	ldrh	r3, [r3, #0]
 8001e1e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	695a      	ldr	r2, [r3, #20]
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	69db      	ldr	r3, [r3, #28]
 8001e2e:	441a      	add	r2, r3
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	615a      	str	r2, [r3, #20]

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	699b      	ldr	r3, [r3, #24]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d106      	bne.n	8001e4a <PCD_EP_ISR_Handler+0x4fe>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	781b      	ldrb	r3, [r3, #0]
 8001e40:	4619      	mov	r1, r3
 8001e42:	6878      	ldr	r0, [r7, #4]
 8001e44:	f004 fd5c 	bl	8006900 <HAL_PCD_DataInStageCallback>
 8001e48:	e008      	b.n	8001e5c <PCD_EP_ISR_Handler+0x510>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	7819      	ldrb	r1, [r3, #0]
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	695a      	ldr	r2, [r3, #20]
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	699b      	ldr	r3, [r3, #24]
 8001e56:	6878      	ldr	r0, [r7, #4]
 8001e58:	f7ff fc96 	bl	8001788 <HAL_PCD_EP_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e64:	b29b      	uxth	r3, r3
 8001e66:	b21b      	sxth	r3, r3
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	f6ff ad74 	blt.w	8001956 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }
  return HAL_OK;
 8001e6e:	2300      	movs	r3, #0
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	3724      	adds	r7, #36	; 0x24
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd90      	pop	{r4, r7, pc}
 8001e78:	ffff8080 	.word	0xffff8080
 8001e7c:	ffff80c0 	.word	0xffff80c0

08001e80 <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b087      	sub	sp, #28
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	60f8      	str	r0, [r7, #12]
 8001e88:	607b      	str	r3, [r7, #4]
 8001e8a:	460b      	mov	r3, r1
 8001e8c:	817b      	strh	r3, [r7, #10]
 8001e8e:	4613      	mov	r3, r2
 8001e90:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8001e92:	897b      	ldrh	r3, [r7, #10]
 8001e94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e98:	b29b      	uxth	r3, r3
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d008      	beq.n	8001eb0 <HAL_PCDEx_PMAConfig+0x30>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e9e:	897b      	ldrh	r3, [r7, #10]
 8001ea0:	f003 0307 	and.w	r3, r3, #7
 8001ea4:	015b      	lsls	r3, r3, #5
 8001ea6:	3328      	adds	r3, #40	; 0x28
 8001ea8:	68fa      	ldr	r2, [r7, #12]
 8001eaa:	4413      	add	r3, r2
 8001eac:	617b      	str	r3, [r7, #20]
 8001eae:	e006      	b.n	8001ebe <HAL_PCDEx_PMAConfig+0x3e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001eb0:	897b      	ldrh	r3, [r7, #10]
 8001eb2:	015b      	lsls	r3, r3, #5
 8001eb4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001eb8:	68fa      	ldr	r2, [r7, #12]
 8001eba:	4413      	add	r3, r2
 8001ebc:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8001ebe:	893b      	ldrh	r3, [r7, #8]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d107      	bne.n	8001ed4 <HAL_PCDEx_PMAConfig+0x54>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	b29a      	uxth	r2, r3
 8001ece:	697b      	ldr	r3, [r7, #20]
 8001ed0:	80da      	strh	r2, [r3, #6]
 8001ed2:	e00b      	b.n	8001eec <HAL_PCDEx_PMAConfig+0x6c>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	b29a      	uxth	r2, r3
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	0c1b      	lsrs	r3, r3, #16
 8001ee6:	b29a      	uxth	r2, r3
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8001eec:	2300      	movs	r3, #0
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	371c      	adds	r7, #28
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bc80      	pop	{r7}
 8001ef6:	4770      	bx	lr

08001ef8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b086      	sub	sp, #24
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d101      	bne.n	8001f0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f06:	2301      	movs	r3, #1
 8001f08:	e26c      	b.n	80023e4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f003 0301 	and.w	r3, r3, #1
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	f000 8087 	beq.w	8002026 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f18:	4b92      	ldr	r3, [pc, #584]	; (8002164 <HAL_RCC_OscConfig+0x26c>)
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	f003 030c 	and.w	r3, r3, #12
 8001f20:	2b04      	cmp	r3, #4
 8001f22:	d00c      	beq.n	8001f3e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001f24:	4b8f      	ldr	r3, [pc, #572]	; (8002164 <HAL_RCC_OscConfig+0x26c>)
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	f003 030c 	and.w	r3, r3, #12
 8001f2c:	2b08      	cmp	r3, #8
 8001f2e:	d112      	bne.n	8001f56 <HAL_RCC_OscConfig+0x5e>
 8001f30:	4b8c      	ldr	r3, [pc, #560]	; (8002164 <HAL_RCC_OscConfig+0x26c>)
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f3c:	d10b      	bne.n	8001f56 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f3e:	4b89      	ldr	r3, [pc, #548]	; (8002164 <HAL_RCC_OscConfig+0x26c>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d06c      	beq.n	8002024 <HAL_RCC_OscConfig+0x12c>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d168      	bne.n	8002024 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	e246      	b.n	80023e4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f5e:	d106      	bne.n	8001f6e <HAL_RCC_OscConfig+0x76>
 8001f60:	4b80      	ldr	r3, [pc, #512]	; (8002164 <HAL_RCC_OscConfig+0x26c>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a7f      	ldr	r2, [pc, #508]	; (8002164 <HAL_RCC_OscConfig+0x26c>)
 8001f66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f6a:	6013      	str	r3, [r2, #0]
 8001f6c:	e02e      	b.n	8001fcc <HAL_RCC_OscConfig+0xd4>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d10c      	bne.n	8001f90 <HAL_RCC_OscConfig+0x98>
 8001f76:	4b7b      	ldr	r3, [pc, #492]	; (8002164 <HAL_RCC_OscConfig+0x26c>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4a7a      	ldr	r2, [pc, #488]	; (8002164 <HAL_RCC_OscConfig+0x26c>)
 8001f7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f80:	6013      	str	r3, [r2, #0]
 8001f82:	4b78      	ldr	r3, [pc, #480]	; (8002164 <HAL_RCC_OscConfig+0x26c>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4a77      	ldr	r2, [pc, #476]	; (8002164 <HAL_RCC_OscConfig+0x26c>)
 8001f88:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f8c:	6013      	str	r3, [r2, #0]
 8001f8e:	e01d      	b.n	8001fcc <HAL_RCC_OscConfig+0xd4>
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f98:	d10c      	bne.n	8001fb4 <HAL_RCC_OscConfig+0xbc>
 8001f9a:	4b72      	ldr	r3, [pc, #456]	; (8002164 <HAL_RCC_OscConfig+0x26c>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4a71      	ldr	r2, [pc, #452]	; (8002164 <HAL_RCC_OscConfig+0x26c>)
 8001fa0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fa4:	6013      	str	r3, [r2, #0]
 8001fa6:	4b6f      	ldr	r3, [pc, #444]	; (8002164 <HAL_RCC_OscConfig+0x26c>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4a6e      	ldr	r2, [pc, #440]	; (8002164 <HAL_RCC_OscConfig+0x26c>)
 8001fac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fb0:	6013      	str	r3, [r2, #0]
 8001fb2:	e00b      	b.n	8001fcc <HAL_RCC_OscConfig+0xd4>
 8001fb4:	4b6b      	ldr	r3, [pc, #428]	; (8002164 <HAL_RCC_OscConfig+0x26c>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a6a      	ldr	r2, [pc, #424]	; (8002164 <HAL_RCC_OscConfig+0x26c>)
 8001fba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fbe:	6013      	str	r3, [r2, #0]
 8001fc0:	4b68      	ldr	r3, [pc, #416]	; (8002164 <HAL_RCC_OscConfig+0x26c>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a67      	ldr	r2, [pc, #412]	; (8002164 <HAL_RCC_OscConfig+0x26c>)
 8001fc6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fca:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d013      	beq.n	8001ffc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fd4:	f7fe fe0c 	bl	8000bf0 <HAL_GetTick>
 8001fd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fda:	e008      	b.n	8001fee <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fdc:	f7fe fe08 	bl	8000bf0 <HAL_GetTick>
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	1ad3      	subs	r3, r2, r3
 8001fe6:	2b64      	cmp	r3, #100	; 0x64
 8001fe8:	d901      	bls.n	8001fee <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001fea:	2303      	movs	r3, #3
 8001fec:	e1fa      	b.n	80023e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fee:	4b5d      	ldr	r3, [pc, #372]	; (8002164 <HAL_RCC_OscConfig+0x26c>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d0f0      	beq.n	8001fdc <HAL_RCC_OscConfig+0xe4>
 8001ffa:	e014      	b.n	8002026 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ffc:	f7fe fdf8 	bl	8000bf0 <HAL_GetTick>
 8002000:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002002:	e008      	b.n	8002016 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002004:	f7fe fdf4 	bl	8000bf0 <HAL_GetTick>
 8002008:	4602      	mov	r2, r0
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	1ad3      	subs	r3, r2, r3
 800200e:	2b64      	cmp	r3, #100	; 0x64
 8002010:	d901      	bls.n	8002016 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002012:	2303      	movs	r3, #3
 8002014:	e1e6      	b.n	80023e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002016:	4b53      	ldr	r3, [pc, #332]	; (8002164 <HAL_RCC_OscConfig+0x26c>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800201e:	2b00      	cmp	r3, #0
 8002020:	d1f0      	bne.n	8002004 <HAL_RCC_OscConfig+0x10c>
 8002022:	e000      	b.n	8002026 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002024:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f003 0302 	and.w	r3, r3, #2
 800202e:	2b00      	cmp	r3, #0
 8002030:	d063      	beq.n	80020fa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002032:	4b4c      	ldr	r3, [pc, #304]	; (8002164 <HAL_RCC_OscConfig+0x26c>)
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	f003 030c 	and.w	r3, r3, #12
 800203a:	2b00      	cmp	r3, #0
 800203c:	d00b      	beq.n	8002056 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800203e:	4b49      	ldr	r3, [pc, #292]	; (8002164 <HAL_RCC_OscConfig+0x26c>)
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	f003 030c 	and.w	r3, r3, #12
 8002046:	2b08      	cmp	r3, #8
 8002048:	d11c      	bne.n	8002084 <HAL_RCC_OscConfig+0x18c>
 800204a:	4b46      	ldr	r3, [pc, #280]	; (8002164 <HAL_RCC_OscConfig+0x26c>)
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002052:	2b00      	cmp	r3, #0
 8002054:	d116      	bne.n	8002084 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002056:	4b43      	ldr	r3, [pc, #268]	; (8002164 <HAL_RCC_OscConfig+0x26c>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f003 0302 	and.w	r3, r3, #2
 800205e:	2b00      	cmp	r3, #0
 8002060:	d005      	beq.n	800206e <HAL_RCC_OscConfig+0x176>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	691b      	ldr	r3, [r3, #16]
 8002066:	2b01      	cmp	r3, #1
 8002068:	d001      	beq.n	800206e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800206a:	2301      	movs	r3, #1
 800206c:	e1ba      	b.n	80023e4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800206e:	4b3d      	ldr	r3, [pc, #244]	; (8002164 <HAL_RCC_OscConfig+0x26c>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	695b      	ldr	r3, [r3, #20]
 800207a:	00db      	lsls	r3, r3, #3
 800207c:	4939      	ldr	r1, [pc, #228]	; (8002164 <HAL_RCC_OscConfig+0x26c>)
 800207e:	4313      	orrs	r3, r2
 8002080:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002082:	e03a      	b.n	80020fa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	691b      	ldr	r3, [r3, #16]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d020      	beq.n	80020ce <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800208c:	4b36      	ldr	r3, [pc, #216]	; (8002168 <HAL_RCC_OscConfig+0x270>)
 800208e:	2201      	movs	r2, #1
 8002090:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002092:	f7fe fdad 	bl	8000bf0 <HAL_GetTick>
 8002096:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002098:	e008      	b.n	80020ac <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800209a:	f7fe fda9 	bl	8000bf0 <HAL_GetTick>
 800209e:	4602      	mov	r2, r0
 80020a0:	693b      	ldr	r3, [r7, #16]
 80020a2:	1ad3      	subs	r3, r2, r3
 80020a4:	2b02      	cmp	r3, #2
 80020a6:	d901      	bls.n	80020ac <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80020a8:	2303      	movs	r3, #3
 80020aa:	e19b      	b.n	80023e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020ac:	4b2d      	ldr	r3, [pc, #180]	; (8002164 <HAL_RCC_OscConfig+0x26c>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f003 0302 	and.w	r3, r3, #2
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d0f0      	beq.n	800209a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020b8:	4b2a      	ldr	r3, [pc, #168]	; (8002164 <HAL_RCC_OscConfig+0x26c>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	695b      	ldr	r3, [r3, #20]
 80020c4:	00db      	lsls	r3, r3, #3
 80020c6:	4927      	ldr	r1, [pc, #156]	; (8002164 <HAL_RCC_OscConfig+0x26c>)
 80020c8:	4313      	orrs	r3, r2
 80020ca:	600b      	str	r3, [r1, #0]
 80020cc:	e015      	b.n	80020fa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020ce:	4b26      	ldr	r3, [pc, #152]	; (8002168 <HAL_RCC_OscConfig+0x270>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020d4:	f7fe fd8c 	bl	8000bf0 <HAL_GetTick>
 80020d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020da:	e008      	b.n	80020ee <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020dc:	f7fe fd88 	bl	8000bf0 <HAL_GetTick>
 80020e0:	4602      	mov	r2, r0
 80020e2:	693b      	ldr	r3, [r7, #16]
 80020e4:	1ad3      	subs	r3, r2, r3
 80020e6:	2b02      	cmp	r3, #2
 80020e8:	d901      	bls.n	80020ee <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80020ea:	2303      	movs	r3, #3
 80020ec:	e17a      	b.n	80023e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020ee:	4b1d      	ldr	r3, [pc, #116]	; (8002164 <HAL_RCC_OscConfig+0x26c>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f003 0302 	and.w	r3, r3, #2
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d1f0      	bne.n	80020dc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f003 0308 	and.w	r3, r3, #8
 8002102:	2b00      	cmp	r3, #0
 8002104:	d03a      	beq.n	800217c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	699b      	ldr	r3, [r3, #24]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d019      	beq.n	8002142 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800210e:	4b17      	ldr	r3, [pc, #92]	; (800216c <HAL_RCC_OscConfig+0x274>)
 8002110:	2201      	movs	r2, #1
 8002112:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002114:	f7fe fd6c 	bl	8000bf0 <HAL_GetTick>
 8002118:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800211a:	e008      	b.n	800212e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800211c:	f7fe fd68 	bl	8000bf0 <HAL_GetTick>
 8002120:	4602      	mov	r2, r0
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	1ad3      	subs	r3, r2, r3
 8002126:	2b02      	cmp	r3, #2
 8002128:	d901      	bls.n	800212e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800212a:	2303      	movs	r3, #3
 800212c:	e15a      	b.n	80023e4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800212e:	4b0d      	ldr	r3, [pc, #52]	; (8002164 <HAL_RCC_OscConfig+0x26c>)
 8002130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002132:	f003 0302 	and.w	r3, r3, #2
 8002136:	2b00      	cmp	r3, #0
 8002138:	d0f0      	beq.n	800211c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800213a:	2001      	movs	r0, #1
 800213c:	f000 fac6 	bl	80026cc <RCC_Delay>
 8002140:	e01c      	b.n	800217c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002142:	4b0a      	ldr	r3, [pc, #40]	; (800216c <HAL_RCC_OscConfig+0x274>)
 8002144:	2200      	movs	r2, #0
 8002146:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002148:	f7fe fd52 	bl	8000bf0 <HAL_GetTick>
 800214c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800214e:	e00f      	b.n	8002170 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002150:	f7fe fd4e 	bl	8000bf0 <HAL_GetTick>
 8002154:	4602      	mov	r2, r0
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	1ad3      	subs	r3, r2, r3
 800215a:	2b02      	cmp	r3, #2
 800215c:	d908      	bls.n	8002170 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800215e:	2303      	movs	r3, #3
 8002160:	e140      	b.n	80023e4 <HAL_RCC_OscConfig+0x4ec>
 8002162:	bf00      	nop
 8002164:	40021000 	.word	0x40021000
 8002168:	42420000 	.word	0x42420000
 800216c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002170:	4b9e      	ldr	r3, [pc, #632]	; (80023ec <HAL_RCC_OscConfig+0x4f4>)
 8002172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002174:	f003 0302 	and.w	r3, r3, #2
 8002178:	2b00      	cmp	r3, #0
 800217a:	d1e9      	bne.n	8002150 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f003 0304 	and.w	r3, r3, #4
 8002184:	2b00      	cmp	r3, #0
 8002186:	f000 80a6 	beq.w	80022d6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800218a:	2300      	movs	r3, #0
 800218c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800218e:	4b97      	ldr	r3, [pc, #604]	; (80023ec <HAL_RCC_OscConfig+0x4f4>)
 8002190:	69db      	ldr	r3, [r3, #28]
 8002192:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002196:	2b00      	cmp	r3, #0
 8002198:	d10d      	bne.n	80021b6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800219a:	4b94      	ldr	r3, [pc, #592]	; (80023ec <HAL_RCC_OscConfig+0x4f4>)
 800219c:	69db      	ldr	r3, [r3, #28]
 800219e:	4a93      	ldr	r2, [pc, #588]	; (80023ec <HAL_RCC_OscConfig+0x4f4>)
 80021a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021a4:	61d3      	str	r3, [r2, #28]
 80021a6:	4b91      	ldr	r3, [pc, #580]	; (80023ec <HAL_RCC_OscConfig+0x4f4>)
 80021a8:	69db      	ldr	r3, [r3, #28]
 80021aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021ae:	60bb      	str	r3, [r7, #8]
 80021b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021b2:	2301      	movs	r3, #1
 80021b4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021b6:	4b8e      	ldr	r3, [pc, #568]	; (80023f0 <HAL_RCC_OscConfig+0x4f8>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d118      	bne.n	80021f4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021c2:	4b8b      	ldr	r3, [pc, #556]	; (80023f0 <HAL_RCC_OscConfig+0x4f8>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a8a      	ldr	r2, [pc, #552]	; (80023f0 <HAL_RCC_OscConfig+0x4f8>)
 80021c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021ce:	f7fe fd0f 	bl	8000bf0 <HAL_GetTick>
 80021d2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021d4:	e008      	b.n	80021e8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021d6:	f7fe fd0b 	bl	8000bf0 <HAL_GetTick>
 80021da:	4602      	mov	r2, r0
 80021dc:	693b      	ldr	r3, [r7, #16]
 80021de:	1ad3      	subs	r3, r2, r3
 80021e0:	2b64      	cmp	r3, #100	; 0x64
 80021e2:	d901      	bls.n	80021e8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80021e4:	2303      	movs	r3, #3
 80021e6:	e0fd      	b.n	80023e4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021e8:	4b81      	ldr	r3, [pc, #516]	; (80023f0 <HAL_RCC_OscConfig+0x4f8>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d0f0      	beq.n	80021d6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	68db      	ldr	r3, [r3, #12]
 80021f8:	2b01      	cmp	r3, #1
 80021fa:	d106      	bne.n	800220a <HAL_RCC_OscConfig+0x312>
 80021fc:	4b7b      	ldr	r3, [pc, #492]	; (80023ec <HAL_RCC_OscConfig+0x4f4>)
 80021fe:	6a1b      	ldr	r3, [r3, #32]
 8002200:	4a7a      	ldr	r2, [pc, #488]	; (80023ec <HAL_RCC_OscConfig+0x4f4>)
 8002202:	f043 0301 	orr.w	r3, r3, #1
 8002206:	6213      	str	r3, [r2, #32]
 8002208:	e02d      	b.n	8002266 <HAL_RCC_OscConfig+0x36e>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	68db      	ldr	r3, [r3, #12]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d10c      	bne.n	800222c <HAL_RCC_OscConfig+0x334>
 8002212:	4b76      	ldr	r3, [pc, #472]	; (80023ec <HAL_RCC_OscConfig+0x4f4>)
 8002214:	6a1b      	ldr	r3, [r3, #32]
 8002216:	4a75      	ldr	r2, [pc, #468]	; (80023ec <HAL_RCC_OscConfig+0x4f4>)
 8002218:	f023 0301 	bic.w	r3, r3, #1
 800221c:	6213      	str	r3, [r2, #32]
 800221e:	4b73      	ldr	r3, [pc, #460]	; (80023ec <HAL_RCC_OscConfig+0x4f4>)
 8002220:	6a1b      	ldr	r3, [r3, #32]
 8002222:	4a72      	ldr	r2, [pc, #456]	; (80023ec <HAL_RCC_OscConfig+0x4f4>)
 8002224:	f023 0304 	bic.w	r3, r3, #4
 8002228:	6213      	str	r3, [r2, #32]
 800222a:	e01c      	b.n	8002266 <HAL_RCC_OscConfig+0x36e>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	68db      	ldr	r3, [r3, #12]
 8002230:	2b05      	cmp	r3, #5
 8002232:	d10c      	bne.n	800224e <HAL_RCC_OscConfig+0x356>
 8002234:	4b6d      	ldr	r3, [pc, #436]	; (80023ec <HAL_RCC_OscConfig+0x4f4>)
 8002236:	6a1b      	ldr	r3, [r3, #32]
 8002238:	4a6c      	ldr	r2, [pc, #432]	; (80023ec <HAL_RCC_OscConfig+0x4f4>)
 800223a:	f043 0304 	orr.w	r3, r3, #4
 800223e:	6213      	str	r3, [r2, #32]
 8002240:	4b6a      	ldr	r3, [pc, #424]	; (80023ec <HAL_RCC_OscConfig+0x4f4>)
 8002242:	6a1b      	ldr	r3, [r3, #32]
 8002244:	4a69      	ldr	r2, [pc, #420]	; (80023ec <HAL_RCC_OscConfig+0x4f4>)
 8002246:	f043 0301 	orr.w	r3, r3, #1
 800224a:	6213      	str	r3, [r2, #32]
 800224c:	e00b      	b.n	8002266 <HAL_RCC_OscConfig+0x36e>
 800224e:	4b67      	ldr	r3, [pc, #412]	; (80023ec <HAL_RCC_OscConfig+0x4f4>)
 8002250:	6a1b      	ldr	r3, [r3, #32]
 8002252:	4a66      	ldr	r2, [pc, #408]	; (80023ec <HAL_RCC_OscConfig+0x4f4>)
 8002254:	f023 0301 	bic.w	r3, r3, #1
 8002258:	6213      	str	r3, [r2, #32]
 800225a:	4b64      	ldr	r3, [pc, #400]	; (80023ec <HAL_RCC_OscConfig+0x4f4>)
 800225c:	6a1b      	ldr	r3, [r3, #32]
 800225e:	4a63      	ldr	r2, [pc, #396]	; (80023ec <HAL_RCC_OscConfig+0x4f4>)
 8002260:	f023 0304 	bic.w	r3, r3, #4
 8002264:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	68db      	ldr	r3, [r3, #12]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d015      	beq.n	800229a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800226e:	f7fe fcbf 	bl	8000bf0 <HAL_GetTick>
 8002272:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002274:	e00a      	b.n	800228c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002276:	f7fe fcbb 	bl	8000bf0 <HAL_GetTick>
 800227a:	4602      	mov	r2, r0
 800227c:	693b      	ldr	r3, [r7, #16]
 800227e:	1ad3      	subs	r3, r2, r3
 8002280:	f241 3288 	movw	r2, #5000	; 0x1388
 8002284:	4293      	cmp	r3, r2
 8002286:	d901      	bls.n	800228c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002288:	2303      	movs	r3, #3
 800228a:	e0ab      	b.n	80023e4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800228c:	4b57      	ldr	r3, [pc, #348]	; (80023ec <HAL_RCC_OscConfig+0x4f4>)
 800228e:	6a1b      	ldr	r3, [r3, #32]
 8002290:	f003 0302 	and.w	r3, r3, #2
 8002294:	2b00      	cmp	r3, #0
 8002296:	d0ee      	beq.n	8002276 <HAL_RCC_OscConfig+0x37e>
 8002298:	e014      	b.n	80022c4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800229a:	f7fe fca9 	bl	8000bf0 <HAL_GetTick>
 800229e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022a0:	e00a      	b.n	80022b8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022a2:	f7fe fca5 	bl	8000bf0 <HAL_GetTick>
 80022a6:	4602      	mov	r2, r0
 80022a8:	693b      	ldr	r3, [r7, #16]
 80022aa:	1ad3      	subs	r3, r2, r3
 80022ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d901      	bls.n	80022b8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80022b4:	2303      	movs	r3, #3
 80022b6:	e095      	b.n	80023e4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022b8:	4b4c      	ldr	r3, [pc, #304]	; (80023ec <HAL_RCC_OscConfig+0x4f4>)
 80022ba:	6a1b      	ldr	r3, [r3, #32]
 80022bc:	f003 0302 	and.w	r3, r3, #2
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d1ee      	bne.n	80022a2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80022c4:	7dfb      	ldrb	r3, [r7, #23]
 80022c6:	2b01      	cmp	r3, #1
 80022c8:	d105      	bne.n	80022d6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022ca:	4b48      	ldr	r3, [pc, #288]	; (80023ec <HAL_RCC_OscConfig+0x4f4>)
 80022cc:	69db      	ldr	r3, [r3, #28]
 80022ce:	4a47      	ldr	r2, [pc, #284]	; (80023ec <HAL_RCC_OscConfig+0x4f4>)
 80022d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022d4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	69db      	ldr	r3, [r3, #28]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	f000 8081 	beq.w	80023e2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022e0:	4b42      	ldr	r3, [pc, #264]	; (80023ec <HAL_RCC_OscConfig+0x4f4>)
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	f003 030c 	and.w	r3, r3, #12
 80022e8:	2b08      	cmp	r3, #8
 80022ea:	d061      	beq.n	80023b0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	69db      	ldr	r3, [r3, #28]
 80022f0:	2b02      	cmp	r3, #2
 80022f2:	d146      	bne.n	8002382 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022f4:	4b3f      	ldr	r3, [pc, #252]	; (80023f4 <HAL_RCC_OscConfig+0x4fc>)
 80022f6:	2200      	movs	r2, #0
 80022f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022fa:	f7fe fc79 	bl	8000bf0 <HAL_GetTick>
 80022fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002300:	e008      	b.n	8002314 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002302:	f7fe fc75 	bl	8000bf0 <HAL_GetTick>
 8002306:	4602      	mov	r2, r0
 8002308:	693b      	ldr	r3, [r7, #16]
 800230a:	1ad3      	subs	r3, r2, r3
 800230c:	2b02      	cmp	r3, #2
 800230e:	d901      	bls.n	8002314 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002310:	2303      	movs	r3, #3
 8002312:	e067      	b.n	80023e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002314:	4b35      	ldr	r3, [pc, #212]	; (80023ec <HAL_RCC_OscConfig+0x4f4>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800231c:	2b00      	cmp	r3, #0
 800231e:	d1f0      	bne.n	8002302 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6a1b      	ldr	r3, [r3, #32]
 8002324:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002328:	d108      	bne.n	800233c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800232a:	4b30      	ldr	r3, [pc, #192]	; (80023ec <HAL_RCC_OscConfig+0x4f4>)
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	689b      	ldr	r3, [r3, #8]
 8002336:	492d      	ldr	r1, [pc, #180]	; (80023ec <HAL_RCC_OscConfig+0x4f4>)
 8002338:	4313      	orrs	r3, r2
 800233a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800233c:	4b2b      	ldr	r3, [pc, #172]	; (80023ec <HAL_RCC_OscConfig+0x4f4>)
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6a19      	ldr	r1, [r3, #32]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800234c:	430b      	orrs	r3, r1
 800234e:	4927      	ldr	r1, [pc, #156]	; (80023ec <HAL_RCC_OscConfig+0x4f4>)
 8002350:	4313      	orrs	r3, r2
 8002352:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002354:	4b27      	ldr	r3, [pc, #156]	; (80023f4 <HAL_RCC_OscConfig+0x4fc>)
 8002356:	2201      	movs	r2, #1
 8002358:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800235a:	f7fe fc49 	bl	8000bf0 <HAL_GetTick>
 800235e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002360:	e008      	b.n	8002374 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002362:	f7fe fc45 	bl	8000bf0 <HAL_GetTick>
 8002366:	4602      	mov	r2, r0
 8002368:	693b      	ldr	r3, [r7, #16]
 800236a:	1ad3      	subs	r3, r2, r3
 800236c:	2b02      	cmp	r3, #2
 800236e:	d901      	bls.n	8002374 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002370:	2303      	movs	r3, #3
 8002372:	e037      	b.n	80023e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002374:	4b1d      	ldr	r3, [pc, #116]	; (80023ec <HAL_RCC_OscConfig+0x4f4>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800237c:	2b00      	cmp	r3, #0
 800237e:	d0f0      	beq.n	8002362 <HAL_RCC_OscConfig+0x46a>
 8002380:	e02f      	b.n	80023e2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002382:	4b1c      	ldr	r3, [pc, #112]	; (80023f4 <HAL_RCC_OscConfig+0x4fc>)
 8002384:	2200      	movs	r2, #0
 8002386:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002388:	f7fe fc32 	bl	8000bf0 <HAL_GetTick>
 800238c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800238e:	e008      	b.n	80023a2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002390:	f7fe fc2e 	bl	8000bf0 <HAL_GetTick>
 8002394:	4602      	mov	r2, r0
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	1ad3      	subs	r3, r2, r3
 800239a:	2b02      	cmp	r3, #2
 800239c:	d901      	bls.n	80023a2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800239e:	2303      	movs	r3, #3
 80023a0:	e020      	b.n	80023e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023a2:	4b12      	ldr	r3, [pc, #72]	; (80023ec <HAL_RCC_OscConfig+0x4f4>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d1f0      	bne.n	8002390 <HAL_RCC_OscConfig+0x498>
 80023ae:	e018      	b.n	80023e2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	69db      	ldr	r3, [r3, #28]
 80023b4:	2b01      	cmp	r3, #1
 80023b6:	d101      	bne.n	80023bc <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80023b8:	2301      	movs	r3, #1
 80023ba:	e013      	b.n	80023e4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80023bc:	4b0b      	ldr	r3, [pc, #44]	; (80023ec <HAL_RCC_OscConfig+0x4f4>)
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6a1b      	ldr	r3, [r3, #32]
 80023cc:	429a      	cmp	r2, r3
 80023ce:	d106      	bne.n	80023de <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023da:	429a      	cmp	r2, r3
 80023dc:	d001      	beq.n	80023e2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	e000      	b.n	80023e4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80023e2:	2300      	movs	r3, #0
}
 80023e4:	4618      	mov	r0, r3
 80023e6:	3718      	adds	r7, #24
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bd80      	pop	{r7, pc}
 80023ec:	40021000 	.word	0x40021000
 80023f0:	40007000 	.word	0x40007000
 80023f4:	42420060 	.word	0x42420060

080023f8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b084      	sub	sp, #16
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
 8002400:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d101      	bne.n	800240c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002408:	2301      	movs	r3, #1
 800240a:	e0d0      	b.n	80025ae <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800240c:	4b6a      	ldr	r3, [pc, #424]	; (80025b8 <HAL_RCC_ClockConfig+0x1c0>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f003 0307 	and.w	r3, r3, #7
 8002414:	683a      	ldr	r2, [r7, #0]
 8002416:	429a      	cmp	r2, r3
 8002418:	d910      	bls.n	800243c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800241a:	4b67      	ldr	r3, [pc, #412]	; (80025b8 <HAL_RCC_ClockConfig+0x1c0>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f023 0207 	bic.w	r2, r3, #7
 8002422:	4965      	ldr	r1, [pc, #404]	; (80025b8 <HAL_RCC_ClockConfig+0x1c0>)
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	4313      	orrs	r3, r2
 8002428:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800242a:	4b63      	ldr	r3, [pc, #396]	; (80025b8 <HAL_RCC_ClockConfig+0x1c0>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f003 0307 	and.w	r3, r3, #7
 8002432:	683a      	ldr	r2, [r7, #0]
 8002434:	429a      	cmp	r2, r3
 8002436:	d001      	beq.n	800243c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002438:	2301      	movs	r3, #1
 800243a:	e0b8      	b.n	80025ae <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f003 0302 	and.w	r3, r3, #2
 8002444:	2b00      	cmp	r3, #0
 8002446:	d020      	beq.n	800248a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f003 0304 	and.w	r3, r3, #4
 8002450:	2b00      	cmp	r3, #0
 8002452:	d005      	beq.n	8002460 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002454:	4b59      	ldr	r3, [pc, #356]	; (80025bc <HAL_RCC_ClockConfig+0x1c4>)
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	4a58      	ldr	r2, [pc, #352]	; (80025bc <HAL_RCC_ClockConfig+0x1c4>)
 800245a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800245e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f003 0308 	and.w	r3, r3, #8
 8002468:	2b00      	cmp	r3, #0
 800246a:	d005      	beq.n	8002478 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800246c:	4b53      	ldr	r3, [pc, #332]	; (80025bc <HAL_RCC_ClockConfig+0x1c4>)
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	4a52      	ldr	r2, [pc, #328]	; (80025bc <HAL_RCC_ClockConfig+0x1c4>)
 8002472:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002476:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002478:	4b50      	ldr	r3, [pc, #320]	; (80025bc <HAL_RCC_ClockConfig+0x1c4>)
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	689b      	ldr	r3, [r3, #8]
 8002484:	494d      	ldr	r1, [pc, #308]	; (80025bc <HAL_RCC_ClockConfig+0x1c4>)
 8002486:	4313      	orrs	r3, r2
 8002488:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f003 0301 	and.w	r3, r3, #1
 8002492:	2b00      	cmp	r3, #0
 8002494:	d040      	beq.n	8002518 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	2b01      	cmp	r3, #1
 800249c:	d107      	bne.n	80024ae <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800249e:	4b47      	ldr	r3, [pc, #284]	; (80025bc <HAL_RCC_ClockConfig+0x1c4>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d115      	bne.n	80024d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	e07f      	b.n	80025ae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	2b02      	cmp	r3, #2
 80024b4:	d107      	bne.n	80024c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024b6:	4b41      	ldr	r3, [pc, #260]	; (80025bc <HAL_RCC_ClockConfig+0x1c4>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d109      	bne.n	80024d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	e073      	b.n	80025ae <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024c6:	4b3d      	ldr	r3, [pc, #244]	; (80025bc <HAL_RCC_ClockConfig+0x1c4>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 0302 	and.w	r3, r3, #2
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d101      	bne.n	80024d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024d2:	2301      	movs	r3, #1
 80024d4:	e06b      	b.n	80025ae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024d6:	4b39      	ldr	r3, [pc, #228]	; (80025bc <HAL_RCC_ClockConfig+0x1c4>)
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	f023 0203 	bic.w	r2, r3, #3
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	4936      	ldr	r1, [pc, #216]	; (80025bc <HAL_RCC_ClockConfig+0x1c4>)
 80024e4:	4313      	orrs	r3, r2
 80024e6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80024e8:	f7fe fb82 	bl	8000bf0 <HAL_GetTick>
 80024ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024ee:	e00a      	b.n	8002506 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024f0:	f7fe fb7e 	bl	8000bf0 <HAL_GetTick>
 80024f4:	4602      	mov	r2, r0
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	1ad3      	subs	r3, r2, r3
 80024fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80024fe:	4293      	cmp	r3, r2
 8002500:	d901      	bls.n	8002506 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002502:	2303      	movs	r3, #3
 8002504:	e053      	b.n	80025ae <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002506:	4b2d      	ldr	r3, [pc, #180]	; (80025bc <HAL_RCC_ClockConfig+0x1c4>)
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	f003 020c 	and.w	r2, r3, #12
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	009b      	lsls	r3, r3, #2
 8002514:	429a      	cmp	r2, r3
 8002516:	d1eb      	bne.n	80024f0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002518:	4b27      	ldr	r3, [pc, #156]	; (80025b8 <HAL_RCC_ClockConfig+0x1c0>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f003 0307 	and.w	r3, r3, #7
 8002520:	683a      	ldr	r2, [r7, #0]
 8002522:	429a      	cmp	r2, r3
 8002524:	d210      	bcs.n	8002548 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002526:	4b24      	ldr	r3, [pc, #144]	; (80025b8 <HAL_RCC_ClockConfig+0x1c0>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f023 0207 	bic.w	r2, r3, #7
 800252e:	4922      	ldr	r1, [pc, #136]	; (80025b8 <HAL_RCC_ClockConfig+0x1c0>)
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	4313      	orrs	r3, r2
 8002534:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002536:	4b20      	ldr	r3, [pc, #128]	; (80025b8 <HAL_RCC_ClockConfig+0x1c0>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f003 0307 	and.w	r3, r3, #7
 800253e:	683a      	ldr	r2, [r7, #0]
 8002540:	429a      	cmp	r2, r3
 8002542:	d001      	beq.n	8002548 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002544:	2301      	movs	r3, #1
 8002546:	e032      	b.n	80025ae <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f003 0304 	and.w	r3, r3, #4
 8002550:	2b00      	cmp	r3, #0
 8002552:	d008      	beq.n	8002566 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002554:	4b19      	ldr	r3, [pc, #100]	; (80025bc <HAL_RCC_ClockConfig+0x1c4>)
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	68db      	ldr	r3, [r3, #12]
 8002560:	4916      	ldr	r1, [pc, #88]	; (80025bc <HAL_RCC_ClockConfig+0x1c4>)
 8002562:	4313      	orrs	r3, r2
 8002564:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f003 0308 	and.w	r3, r3, #8
 800256e:	2b00      	cmp	r3, #0
 8002570:	d009      	beq.n	8002586 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002572:	4b12      	ldr	r3, [pc, #72]	; (80025bc <HAL_RCC_ClockConfig+0x1c4>)
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	691b      	ldr	r3, [r3, #16]
 800257e:	00db      	lsls	r3, r3, #3
 8002580:	490e      	ldr	r1, [pc, #56]	; (80025bc <HAL_RCC_ClockConfig+0x1c4>)
 8002582:	4313      	orrs	r3, r2
 8002584:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002586:	f000 f821 	bl	80025cc <HAL_RCC_GetSysClockFreq>
 800258a:	4601      	mov	r1, r0
 800258c:	4b0b      	ldr	r3, [pc, #44]	; (80025bc <HAL_RCC_ClockConfig+0x1c4>)
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	091b      	lsrs	r3, r3, #4
 8002592:	f003 030f 	and.w	r3, r3, #15
 8002596:	4a0a      	ldr	r2, [pc, #40]	; (80025c0 <HAL_RCC_ClockConfig+0x1c8>)
 8002598:	5cd3      	ldrb	r3, [r2, r3]
 800259a:	fa21 f303 	lsr.w	r3, r1, r3
 800259e:	4a09      	ldr	r2, [pc, #36]	; (80025c4 <HAL_RCC_ClockConfig+0x1cc>)
 80025a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80025a2:	4b09      	ldr	r3, [pc, #36]	; (80025c8 <HAL_RCC_ClockConfig+0x1d0>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4618      	mov	r0, r3
 80025a8:	f7fe fae0 	bl	8000b6c <HAL_InitTick>

  return HAL_OK;
 80025ac:	2300      	movs	r3, #0
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	3710      	adds	r7, #16
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	bf00      	nop
 80025b8:	40022000 	.word	0x40022000
 80025bc:	40021000 	.word	0x40021000
 80025c0:	080080a0 	.word	0x080080a0
 80025c4:	20000000 	.word	0x20000000
 80025c8:	20000004 	.word	0x20000004

080025cc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025cc:	b490      	push	{r4, r7}
 80025ce:	b08a      	sub	sp, #40	; 0x28
 80025d0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80025d2:	4b2a      	ldr	r3, [pc, #168]	; (800267c <HAL_RCC_GetSysClockFreq+0xb0>)
 80025d4:	1d3c      	adds	r4, r7, #4
 80025d6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80025d8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80025dc:	4b28      	ldr	r3, [pc, #160]	; (8002680 <HAL_RCC_GetSysClockFreq+0xb4>)
 80025de:	881b      	ldrh	r3, [r3, #0]
 80025e0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80025e2:	2300      	movs	r3, #0
 80025e4:	61fb      	str	r3, [r7, #28]
 80025e6:	2300      	movs	r3, #0
 80025e8:	61bb      	str	r3, [r7, #24]
 80025ea:	2300      	movs	r3, #0
 80025ec:	627b      	str	r3, [r7, #36]	; 0x24
 80025ee:	2300      	movs	r3, #0
 80025f0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80025f2:	2300      	movs	r3, #0
 80025f4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80025f6:	4b23      	ldr	r3, [pc, #140]	; (8002684 <HAL_RCC_GetSysClockFreq+0xb8>)
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80025fc:	69fb      	ldr	r3, [r7, #28]
 80025fe:	f003 030c 	and.w	r3, r3, #12
 8002602:	2b04      	cmp	r3, #4
 8002604:	d002      	beq.n	800260c <HAL_RCC_GetSysClockFreq+0x40>
 8002606:	2b08      	cmp	r3, #8
 8002608:	d003      	beq.n	8002612 <HAL_RCC_GetSysClockFreq+0x46>
 800260a:	e02d      	b.n	8002668 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800260c:	4b1e      	ldr	r3, [pc, #120]	; (8002688 <HAL_RCC_GetSysClockFreq+0xbc>)
 800260e:	623b      	str	r3, [r7, #32]
      break;
 8002610:	e02d      	b.n	800266e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002612:	69fb      	ldr	r3, [r7, #28]
 8002614:	0c9b      	lsrs	r3, r3, #18
 8002616:	f003 030f 	and.w	r3, r3, #15
 800261a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800261e:	4413      	add	r3, r2
 8002620:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002624:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002626:	69fb      	ldr	r3, [r7, #28]
 8002628:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800262c:	2b00      	cmp	r3, #0
 800262e:	d013      	beq.n	8002658 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002630:	4b14      	ldr	r3, [pc, #80]	; (8002684 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	0c5b      	lsrs	r3, r3, #17
 8002636:	f003 0301 	and.w	r3, r3, #1
 800263a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800263e:	4413      	add	r3, r2
 8002640:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002644:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	4a0f      	ldr	r2, [pc, #60]	; (8002688 <HAL_RCC_GetSysClockFreq+0xbc>)
 800264a:	fb02 f203 	mul.w	r2, r2, r3
 800264e:	69bb      	ldr	r3, [r7, #24]
 8002650:	fbb2 f3f3 	udiv	r3, r2, r3
 8002654:	627b      	str	r3, [r7, #36]	; 0x24
 8002656:	e004      	b.n	8002662 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	4a0c      	ldr	r2, [pc, #48]	; (800268c <HAL_RCC_GetSysClockFreq+0xc0>)
 800265c:	fb02 f303 	mul.w	r3, r2, r3
 8002660:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002664:	623b      	str	r3, [r7, #32]
      break;
 8002666:	e002      	b.n	800266e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002668:	4b07      	ldr	r3, [pc, #28]	; (8002688 <HAL_RCC_GetSysClockFreq+0xbc>)
 800266a:	623b      	str	r3, [r7, #32]
      break;
 800266c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800266e:	6a3b      	ldr	r3, [r7, #32]
}
 8002670:	4618      	mov	r0, r3
 8002672:	3728      	adds	r7, #40	; 0x28
 8002674:	46bd      	mov	sp, r7
 8002676:	bc90      	pop	{r4, r7}
 8002678:	4770      	bx	lr
 800267a:	bf00      	nop
 800267c:	0800801c 	.word	0x0800801c
 8002680:	0800802c 	.word	0x0800802c
 8002684:	40021000 	.word	0x40021000
 8002688:	007a1200 	.word	0x007a1200
 800268c:	003d0900 	.word	0x003d0900

08002690 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002690:	b480      	push	{r7}
 8002692:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002694:	4b02      	ldr	r3, [pc, #8]	; (80026a0 <HAL_RCC_GetHCLKFreq+0x10>)
 8002696:	681b      	ldr	r3, [r3, #0]
}
 8002698:	4618      	mov	r0, r3
 800269a:	46bd      	mov	sp, r7
 800269c:	bc80      	pop	{r7}
 800269e:	4770      	bx	lr
 80026a0:	20000000 	.word	0x20000000

080026a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80026a8:	f7ff fff2 	bl	8002690 <HAL_RCC_GetHCLKFreq>
 80026ac:	4601      	mov	r1, r0
 80026ae:	4b05      	ldr	r3, [pc, #20]	; (80026c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	0a1b      	lsrs	r3, r3, #8
 80026b4:	f003 0307 	and.w	r3, r3, #7
 80026b8:	4a03      	ldr	r2, [pc, #12]	; (80026c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80026ba:	5cd3      	ldrb	r3, [r2, r3]
 80026bc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	bd80      	pop	{r7, pc}
 80026c4:	40021000 	.word	0x40021000
 80026c8:	080080b0 	.word	0x080080b0

080026cc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b085      	sub	sp, #20
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80026d4:	4b0a      	ldr	r3, [pc, #40]	; (8002700 <RCC_Delay+0x34>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a0a      	ldr	r2, [pc, #40]	; (8002704 <RCC_Delay+0x38>)
 80026da:	fba2 2303 	umull	r2, r3, r2, r3
 80026de:	0a5b      	lsrs	r3, r3, #9
 80026e0:	687a      	ldr	r2, [r7, #4]
 80026e2:	fb02 f303 	mul.w	r3, r2, r3
 80026e6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80026e8:	bf00      	nop
  }
  while (Delay --);
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	1e5a      	subs	r2, r3, #1
 80026ee:	60fa      	str	r2, [r7, #12]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d1f9      	bne.n	80026e8 <RCC_Delay+0x1c>
}
 80026f4:	bf00      	nop
 80026f6:	3714      	adds	r7, #20
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bc80      	pop	{r7}
 80026fc:	4770      	bx	lr
 80026fe:	bf00      	nop
 8002700:	20000000 	.word	0x20000000
 8002704:	10624dd3 	.word	0x10624dd3

08002708 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b086      	sub	sp, #24
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002710:	2300      	movs	r3, #0
 8002712:	613b      	str	r3, [r7, #16]
 8002714:	2300      	movs	r3, #0
 8002716:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f003 0301 	and.w	r3, r3, #1
 8002720:	2b00      	cmp	r3, #0
 8002722:	d07d      	beq.n	8002820 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8002724:	2300      	movs	r3, #0
 8002726:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002728:	4b4f      	ldr	r3, [pc, #316]	; (8002868 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800272a:	69db      	ldr	r3, [r3, #28]
 800272c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002730:	2b00      	cmp	r3, #0
 8002732:	d10d      	bne.n	8002750 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002734:	4b4c      	ldr	r3, [pc, #304]	; (8002868 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002736:	69db      	ldr	r3, [r3, #28]
 8002738:	4a4b      	ldr	r2, [pc, #300]	; (8002868 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800273a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800273e:	61d3      	str	r3, [r2, #28]
 8002740:	4b49      	ldr	r3, [pc, #292]	; (8002868 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002742:	69db      	ldr	r3, [r3, #28]
 8002744:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002748:	60bb      	str	r3, [r7, #8]
 800274a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800274c:	2301      	movs	r3, #1
 800274e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002750:	4b46      	ldr	r3, [pc, #280]	; (800286c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002758:	2b00      	cmp	r3, #0
 800275a:	d118      	bne.n	800278e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800275c:	4b43      	ldr	r3, [pc, #268]	; (800286c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a42      	ldr	r2, [pc, #264]	; (800286c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002762:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002766:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002768:	f7fe fa42 	bl	8000bf0 <HAL_GetTick>
 800276c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800276e:	e008      	b.n	8002782 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002770:	f7fe fa3e 	bl	8000bf0 <HAL_GetTick>
 8002774:	4602      	mov	r2, r0
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	1ad3      	subs	r3, r2, r3
 800277a:	2b64      	cmp	r3, #100	; 0x64
 800277c:	d901      	bls.n	8002782 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800277e:	2303      	movs	r3, #3
 8002780:	e06d      	b.n	800285e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002782:	4b3a      	ldr	r3, [pc, #232]	; (800286c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800278a:	2b00      	cmp	r3, #0
 800278c:	d0f0      	beq.n	8002770 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800278e:	4b36      	ldr	r3, [pc, #216]	; (8002868 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002790:	6a1b      	ldr	r3, [r3, #32]
 8002792:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002796:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d02e      	beq.n	80027fc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027a6:	68fa      	ldr	r2, [r7, #12]
 80027a8:	429a      	cmp	r2, r3
 80027aa:	d027      	beq.n	80027fc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80027ac:	4b2e      	ldr	r3, [pc, #184]	; (8002868 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027ae:	6a1b      	ldr	r3, [r3, #32]
 80027b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027b4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80027b6:	4b2e      	ldr	r3, [pc, #184]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80027b8:	2201      	movs	r2, #1
 80027ba:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80027bc:	4b2c      	ldr	r3, [pc, #176]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80027be:	2200      	movs	r2, #0
 80027c0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80027c2:	4a29      	ldr	r2, [pc, #164]	; (8002868 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	f003 0301 	and.w	r3, r3, #1
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d014      	beq.n	80027fc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027d2:	f7fe fa0d 	bl	8000bf0 <HAL_GetTick>
 80027d6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027d8:	e00a      	b.n	80027f0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027da:	f7fe fa09 	bl	8000bf0 <HAL_GetTick>
 80027de:	4602      	mov	r2, r0
 80027e0:	693b      	ldr	r3, [r7, #16]
 80027e2:	1ad3      	subs	r3, r2, r3
 80027e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d901      	bls.n	80027f0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80027ec:	2303      	movs	r3, #3
 80027ee:	e036      	b.n	800285e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027f0:	4b1d      	ldr	r3, [pc, #116]	; (8002868 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027f2:	6a1b      	ldr	r3, [r3, #32]
 80027f4:	f003 0302 	and.w	r3, r3, #2
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d0ee      	beq.n	80027da <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80027fc:	4b1a      	ldr	r3, [pc, #104]	; (8002868 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027fe:	6a1b      	ldr	r3, [r3, #32]
 8002800:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	4917      	ldr	r1, [pc, #92]	; (8002868 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800280a:	4313      	orrs	r3, r2
 800280c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800280e:	7dfb      	ldrb	r3, [r7, #23]
 8002810:	2b01      	cmp	r3, #1
 8002812:	d105      	bne.n	8002820 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002814:	4b14      	ldr	r3, [pc, #80]	; (8002868 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002816:	69db      	ldr	r3, [r3, #28]
 8002818:	4a13      	ldr	r2, [pc, #76]	; (8002868 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800281a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800281e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f003 0302 	and.w	r3, r3, #2
 8002828:	2b00      	cmp	r3, #0
 800282a:	d008      	beq.n	800283e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800282c:	4b0e      	ldr	r3, [pc, #56]	; (8002868 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	490b      	ldr	r1, [pc, #44]	; (8002868 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800283a:	4313      	orrs	r3, r2
 800283c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f003 0310 	and.w	r3, r3, #16
 8002846:	2b00      	cmp	r3, #0
 8002848:	d008      	beq.n	800285c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800284a:	4b07      	ldr	r3, [pc, #28]	; (8002868 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	68db      	ldr	r3, [r3, #12]
 8002856:	4904      	ldr	r1, [pc, #16]	; (8002868 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002858:	4313      	orrs	r3, r2
 800285a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800285c:	2300      	movs	r3, #0
}
 800285e:	4618      	mov	r0, r3
 8002860:	3718      	adds	r7, #24
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}
 8002866:	bf00      	nop
 8002868:	40021000 	.word	0x40021000
 800286c:	40007000 	.word	0x40007000
 8002870:	42420440 	.word	0x42420440

08002874 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b082      	sub	sp, #8
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d101      	bne.n	8002886 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	e01d      	b.n	80028c2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800288c:	b2db      	uxtb	r3, r3
 800288e:	2b00      	cmp	r3, #0
 8002890:	d106      	bne.n	80028a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2200      	movs	r2, #0
 8002896:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800289a:	6878      	ldr	r0, [r7, #4]
 800289c:	f7fe f806 	bl	80008ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2202      	movs	r2, #2
 80028a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681a      	ldr	r2, [r3, #0]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	3304      	adds	r3, #4
 80028b0:	4619      	mov	r1, r3
 80028b2:	4610      	mov	r0, r2
 80028b4:	f000 fcee 	bl	8003294 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2201      	movs	r2, #1
 80028bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80028c0:	2300      	movs	r3, #0
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	3708      	adds	r7, #8
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}

080028ca <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80028ca:	b480      	push	{r7}
 80028cc:	b085      	sub	sp, #20
 80028ce:	af00      	add	r7, sp, #0
 80028d0:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	68da      	ldr	r2, [r3, #12]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f042 0201 	orr.w	r2, r2, #1
 80028e0:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	689b      	ldr	r3, [r3, #8]
 80028e8:	f003 0307 	and.w	r3, r3, #7
 80028ec:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	2b06      	cmp	r3, #6
 80028f2:	d007      	beq.n	8002904 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f042 0201 	orr.w	r2, r2, #1
 8002902:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002904:	2300      	movs	r3, #0
}
 8002906:	4618      	mov	r0, r3
 8002908:	3714      	adds	r7, #20
 800290a:	46bd      	mov	sp, r7
 800290c:	bc80      	pop	{r7}
 800290e:	4770      	bx	lr

08002910 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b082      	sub	sp, #8
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d101      	bne.n	8002922 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800291e:	2301      	movs	r3, #1
 8002920:	e01d      	b.n	800295e <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002928:	b2db      	uxtb	r3, r3
 800292a:	2b00      	cmp	r3, #0
 800292c:	d106      	bne.n	800293c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2200      	movs	r2, #0
 8002932:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002936:	6878      	ldr	r0, [r7, #4]
 8002938:	f000 f815 	bl	8002966 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2202      	movs	r2, #2
 8002940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681a      	ldr	r2, [r3, #0]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	3304      	adds	r3, #4
 800294c:	4619      	mov	r1, r3
 800294e:	4610      	mov	r0, r2
 8002950:	f000 fca0 	bl	8003294 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2201      	movs	r2, #1
 8002958:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800295c:	2300      	movs	r3, #0
}
 800295e:	4618      	mov	r0, r3
 8002960:	3708      	adds	r7, #8
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}

08002966 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002966:	b480      	push	{r7}
 8002968:	b083      	sub	sp, #12
 800296a:	af00      	add	r7, sp, #0
 800296c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800296e:	bf00      	nop
 8002970:	370c      	adds	r7, #12
 8002972:	46bd      	mov	sp, r7
 8002974:	bc80      	pop	{r7}
 8002976:	4770      	bx	lr

08002978 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b084      	sub	sp, #16
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
 8002980:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	2b0c      	cmp	r3, #12
 8002986:	d841      	bhi.n	8002a0c <HAL_TIM_PWM_Start_IT+0x94>
 8002988:	a201      	add	r2, pc, #4	; (adr r2, 8002990 <HAL_TIM_PWM_Start_IT+0x18>)
 800298a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800298e:	bf00      	nop
 8002990:	080029c5 	.word	0x080029c5
 8002994:	08002a0d 	.word	0x08002a0d
 8002998:	08002a0d 	.word	0x08002a0d
 800299c:	08002a0d 	.word	0x08002a0d
 80029a0:	080029d7 	.word	0x080029d7
 80029a4:	08002a0d 	.word	0x08002a0d
 80029a8:	08002a0d 	.word	0x08002a0d
 80029ac:	08002a0d 	.word	0x08002a0d
 80029b0:	080029e9 	.word	0x080029e9
 80029b4:	08002a0d 	.word	0x08002a0d
 80029b8:	08002a0d 	.word	0x08002a0d
 80029bc:	08002a0d 	.word	0x08002a0d
 80029c0:	080029fb 	.word	0x080029fb
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	68da      	ldr	r2, [r3, #12]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f042 0202 	orr.w	r2, r2, #2
 80029d2:	60da      	str	r2, [r3, #12]
      break;
 80029d4:	e01b      	b.n	8002a0e <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	68da      	ldr	r2, [r3, #12]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f042 0204 	orr.w	r2, r2, #4
 80029e4:	60da      	str	r2, [r3, #12]
      break;
 80029e6:	e012      	b.n	8002a0e <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	68da      	ldr	r2, [r3, #12]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f042 0208 	orr.w	r2, r2, #8
 80029f6:	60da      	str	r2, [r3, #12]
      break;
 80029f8:	e009      	b.n	8002a0e <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	68da      	ldr	r2, [r3, #12]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f042 0210 	orr.w	r2, r2, #16
 8002a08:	60da      	str	r2, [r3, #12]
      break;
 8002a0a:	e000      	b.n	8002a0e <HAL_TIM_PWM_Start_IT+0x96>
    }

    default:
      break;
 8002a0c:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	2201      	movs	r2, #1
 8002a14:	6839      	ldr	r1, [r7, #0]
 8002a16:	4618      	mov	r0, r3
 8002a18:	f000 ffc9 	bl	80039ae <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a10      	ldr	r2, [pc, #64]	; (8002a64 <HAL_TIM_PWM_Start_IT+0xec>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d107      	bne.n	8002a36 <HAL_TIM_PWM_Start_IT+0xbe>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002a34:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	f003 0307 	and.w	r3, r3, #7
 8002a40:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	2b06      	cmp	r3, #6
 8002a46:	d007      	beq.n	8002a58 <HAL_TIM_PWM_Start_IT+0xe0>
  {
    __HAL_TIM_ENABLE(htim);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	681a      	ldr	r2, [r3, #0]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f042 0201 	orr.w	r2, r2, #1
 8002a56:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a58:	2300      	movs	r3, #0
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	3710      	adds	r7, #16
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}
 8002a62:	bf00      	nop
 8002a64:	40012c00 	.word	0x40012c00

08002a68 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b082      	sub	sp, #8
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d101      	bne.n	8002a7a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002a76:	2301      	movs	r3, #1
 8002a78:	e01d      	b.n	8002ab6 <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a80:	b2db      	uxtb	r3, r3
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d106      	bne.n	8002a94 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002a8e:	6878      	ldr	r0, [r7, #4]
 8002a90:	f7fd fec8 	bl	8000824 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2202      	movs	r2, #2
 8002a98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	3304      	adds	r3, #4
 8002aa4:	4619      	mov	r1, r3
 8002aa6:	4610      	mov	r0, r2
 8002aa8:	f000 fbf4 	bl	8003294 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2201      	movs	r2, #1
 8002ab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ab4:	2300      	movs	r3, #0
}
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	3708      	adds	r7, #8
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}
	...

08002ac0 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b084      	sub	sp, #16
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
 8002ac8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	2b0c      	cmp	r3, #12
 8002ace:	d841      	bhi.n	8002b54 <HAL_TIM_IC_Start_IT+0x94>
 8002ad0:	a201      	add	r2, pc, #4	; (adr r2, 8002ad8 <HAL_TIM_IC_Start_IT+0x18>)
 8002ad2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ad6:	bf00      	nop
 8002ad8:	08002b0d 	.word	0x08002b0d
 8002adc:	08002b55 	.word	0x08002b55
 8002ae0:	08002b55 	.word	0x08002b55
 8002ae4:	08002b55 	.word	0x08002b55
 8002ae8:	08002b1f 	.word	0x08002b1f
 8002aec:	08002b55 	.word	0x08002b55
 8002af0:	08002b55 	.word	0x08002b55
 8002af4:	08002b55 	.word	0x08002b55
 8002af8:	08002b31 	.word	0x08002b31
 8002afc:	08002b55 	.word	0x08002b55
 8002b00:	08002b55 	.word	0x08002b55
 8002b04:	08002b55 	.word	0x08002b55
 8002b08:	08002b43 	.word	0x08002b43
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	68da      	ldr	r2, [r3, #12]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f042 0202 	orr.w	r2, r2, #2
 8002b1a:	60da      	str	r2, [r3, #12]
      break;
 8002b1c:	e01b      	b.n	8002b56 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	68da      	ldr	r2, [r3, #12]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f042 0204 	orr.w	r2, r2, #4
 8002b2c:	60da      	str	r2, [r3, #12]
      break;
 8002b2e:	e012      	b.n	8002b56 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	68da      	ldr	r2, [r3, #12]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f042 0208 	orr.w	r2, r2, #8
 8002b3e:	60da      	str	r2, [r3, #12]
      break;
 8002b40:	e009      	b.n	8002b56 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	68da      	ldr	r2, [r3, #12]
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f042 0210 	orr.w	r2, r2, #16
 8002b50:	60da      	str	r2, [r3, #12]
      break;
 8002b52:	e000      	b.n	8002b56 <HAL_TIM_IC_Start_IT+0x96>
    }

    default:
      break;
 8002b54:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	6839      	ldr	r1, [r7, #0]
 8002b5e:	4618      	mov	r0, r3
 8002b60:	f000 ff25 	bl	80039ae <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	689b      	ldr	r3, [r3, #8]
 8002b6a:	f003 0307 	and.w	r3, r3, #7
 8002b6e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	2b06      	cmp	r3, #6
 8002b74:	d007      	beq.n	8002b86 <HAL_TIM_IC_Start_IT+0xc6>
  {
    __HAL_TIM_ENABLE(htim);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	681a      	ldr	r2, [r3, #0]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f042 0201 	orr.w	r2, r2, #1
 8002b84:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002b86:	2300      	movs	r3, #0
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	3710      	adds	r7, #16
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd80      	pop	{r7, pc}

08002b90 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b082      	sub	sp, #8
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	691b      	ldr	r3, [r3, #16]
 8002b9e:	f003 0302 	and.w	r3, r3, #2
 8002ba2:	2b02      	cmp	r3, #2
 8002ba4:	d122      	bne.n	8002bec <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	68db      	ldr	r3, [r3, #12]
 8002bac:	f003 0302 	and.w	r3, r3, #2
 8002bb0:	2b02      	cmp	r3, #2
 8002bb2:	d11b      	bne.n	8002bec <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f06f 0202 	mvn.w	r2, #2
 8002bbc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2201      	movs	r2, #1
 8002bc2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	699b      	ldr	r3, [r3, #24]
 8002bca:	f003 0303 	and.w	r3, r3, #3
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d003      	beq.n	8002bda <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002bd2:	6878      	ldr	r0, [r7, #4]
 8002bd4:	f7fd fafc 	bl	80001d0 <HAL_TIM_IC_CaptureCallback>
 8002bd8:	e005      	b.n	8002be6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bda:	6878      	ldr	r0, [r7, #4]
 8002bdc:	f000 fb3e 	bl	800325c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002be0:	6878      	ldr	r0, [r7, #4]
 8002be2:	f000 fb44 	bl	800326e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2200      	movs	r2, #0
 8002bea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	691b      	ldr	r3, [r3, #16]
 8002bf2:	f003 0304 	and.w	r3, r3, #4
 8002bf6:	2b04      	cmp	r3, #4
 8002bf8:	d122      	bne.n	8002c40 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	68db      	ldr	r3, [r3, #12]
 8002c00:	f003 0304 	and.w	r3, r3, #4
 8002c04:	2b04      	cmp	r3, #4
 8002c06:	d11b      	bne.n	8002c40 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f06f 0204 	mvn.w	r2, #4
 8002c10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2202      	movs	r2, #2
 8002c16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	699b      	ldr	r3, [r3, #24]
 8002c1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d003      	beq.n	8002c2e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c26:	6878      	ldr	r0, [r7, #4]
 8002c28:	f7fd fad2 	bl	80001d0 <HAL_TIM_IC_CaptureCallback>
 8002c2c:	e005      	b.n	8002c3a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c2e:	6878      	ldr	r0, [r7, #4]
 8002c30:	f000 fb14 	bl	800325c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c34:	6878      	ldr	r0, [r7, #4]
 8002c36:	f000 fb1a 	bl	800326e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	691b      	ldr	r3, [r3, #16]
 8002c46:	f003 0308 	and.w	r3, r3, #8
 8002c4a:	2b08      	cmp	r3, #8
 8002c4c:	d122      	bne.n	8002c94 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	68db      	ldr	r3, [r3, #12]
 8002c54:	f003 0308 	and.w	r3, r3, #8
 8002c58:	2b08      	cmp	r3, #8
 8002c5a:	d11b      	bne.n	8002c94 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f06f 0208 	mvn.w	r2, #8
 8002c64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2204      	movs	r2, #4
 8002c6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	69db      	ldr	r3, [r3, #28]
 8002c72:	f003 0303 	and.w	r3, r3, #3
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d003      	beq.n	8002c82 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c7a:	6878      	ldr	r0, [r7, #4]
 8002c7c:	f7fd faa8 	bl	80001d0 <HAL_TIM_IC_CaptureCallback>
 8002c80:	e005      	b.n	8002c8e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c82:	6878      	ldr	r0, [r7, #4]
 8002c84:	f000 faea 	bl	800325c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c88:	6878      	ldr	r0, [r7, #4]
 8002c8a:	f000 faf0 	bl	800326e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2200      	movs	r2, #0
 8002c92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	691b      	ldr	r3, [r3, #16]
 8002c9a:	f003 0310 	and.w	r3, r3, #16
 8002c9e:	2b10      	cmp	r3, #16
 8002ca0:	d122      	bne.n	8002ce8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	68db      	ldr	r3, [r3, #12]
 8002ca8:	f003 0310 	and.w	r3, r3, #16
 8002cac:	2b10      	cmp	r3, #16
 8002cae:	d11b      	bne.n	8002ce8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f06f 0210 	mvn.w	r2, #16
 8002cb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2208      	movs	r2, #8
 8002cbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	69db      	ldr	r3, [r3, #28]
 8002cc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d003      	beq.n	8002cd6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002cce:	6878      	ldr	r0, [r7, #4]
 8002cd0:	f7fd fa7e 	bl	80001d0 <HAL_TIM_IC_CaptureCallback>
 8002cd4:	e005      	b.n	8002ce2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cd6:	6878      	ldr	r0, [r7, #4]
 8002cd8:	f000 fac0 	bl	800325c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cdc:	6878      	ldr	r0, [r7, #4]
 8002cde:	f000 fac6 	bl	800326e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	691b      	ldr	r3, [r3, #16]
 8002cee:	f003 0301 	and.w	r3, r3, #1
 8002cf2:	2b01      	cmp	r3, #1
 8002cf4:	d10e      	bne.n	8002d14 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	68db      	ldr	r3, [r3, #12]
 8002cfc:	f003 0301 	and.w	r3, r3, #1
 8002d00:	2b01      	cmp	r3, #1
 8002d02:	d107      	bne.n	8002d14 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f06f 0201 	mvn.w	r2, #1
 8002d0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002d0e:	6878      	ldr	r0, [r7, #4]
 8002d10:	f7fd fa24 	bl	800015c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	691b      	ldr	r3, [r3, #16]
 8002d1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d1e:	2b80      	cmp	r3, #128	; 0x80
 8002d20:	d10e      	bne.n	8002d40 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	68db      	ldr	r3, [r3, #12]
 8002d28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d2c:	2b80      	cmp	r3, #128	; 0x80
 8002d2e:	d107      	bne.n	8002d40 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002d38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002d3a:	6878      	ldr	r0, [r7, #4]
 8002d3c:	f000 fea8 	bl	8003a90 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	691b      	ldr	r3, [r3, #16]
 8002d46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d4a:	2b40      	cmp	r3, #64	; 0x40
 8002d4c:	d10e      	bne.n	8002d6c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	68db      	ldr	r3, [r3, #12]
 8002d54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d58:	2b40      	cmp	r3, #64	; 0x40
 8002d5a:	d107      	bne.n	8002d6c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002d64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002d66:	6878      	ldr	r0, [r7, #4]
 8002d68:	f000 fa8a 	bl	8003280 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	691b      	ldr	r3, [r3, #16]
 8002d72:	f003 0320 	and.w	r3, r3, #32
 8002d76:	2b20      	cmp	r3, #32
 8002d78:	d10e      	bne.n	8002d98 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	68db      	ldr	r3, [r3, #12]
 8002d80:	f003 0320 	and.w	r3, r3, #32
 8002d84:	2b20      	cmp	r3, #32
 8002d86:	d107      	bne.n	8002d98 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f06f 0220 	mvn.w	r2, #32
 8002d90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002d92:	6878      	ldr	r0, [r7, #4]
 8002d94:	f000 fe73 	bl	8003a7e <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002d98:	bf00      	nop
 8002d9a:	3708      	adds	r7, #8
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}

08002da0 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b084      	sub	sp, #16
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	60f8      	str	r0, [r7, #12]
 8002da8:	60b9      	str	r1, [r7, #8]
 8002daa:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002db2:	2b01      	cmp	r3, #1
 8002db4:	d101      	bne.n	8002dba <HAL_TIM_IC_ConfigChannel+0x1a>
 8002db6:	2302      	movs	r3, #2
 8002db8:	e08a      	b.n	8002ed0 <HAL_TIM_IC_ConfigChannel+0x130>
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	2201      	movs	r2, #1
 8002dbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	2202      	movs	r2, #2
 8002dc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d11b      	bne.n	8002e08 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	6818      	ldr	r0, [r3, #0]
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	6819      	ldr	r1, [r3, #0]
 8002dd8:	68bb      	ldr	r3, [r7, #8]
 8002dda:	685a      	ldr	r2, [r3, #4]
 8002ddc:	68bb      	ldr	r3, [r7, #8]
 8002dde:	68db      	ldr	r3, [r3, #12]
 8002de0:	f000 fc42 	bl	8003668 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	699a      	ldr	r2, [r3, #24]
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f022 020c 	bic.w	r2, r2, #12
 8002df2:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	6999      	ldr	r1, [r3, #24]
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	689a      	ldr	r2, [r3, #8]
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	430a      	orrs	r2, r1
 8002e04:	619a      	str	r2, [r3, #24]
 8002e06:	e05a      	b.n	8002ebe <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2b04      	cmp	r3, #4
 8002e0c:	d11c      	bne.n	8002e48 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	6818      	ldr	r0, [r3, #0]
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	6819      	ldr	r1, [r3, #0]
 8002e16:	68bb      	ldr	r3, [r7, #8]
 8002e18:	685a      	ldr	r2, [r3, #4]
 8002e1a:	68bb      	ldr	r3, [r7, #8]
 8002e1c:	68db      	ldr	r3, [r3, #12]
 8002e1e:	f000 fcab 	bl	8003778 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	699a      	ldr	r2, [r3, #24]
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002e30:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	6999      	ldr	r1, [r3, #24]
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	689b      	ldr	r3, [r3, #8]
 8002e3c:	021a      	lsls	r2, r3, #8
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	430a      	orrs	r2, r1
 8002e44:	619a      	str	r2, [r3, #24]
 8002e46:	e03a      	b.n	8002ebe <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2b08      	cmp	r3, #8
 8002e4c:	d11b      	bne.n	8002e86 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	6818      	ldr	r0, [r3, #0]
 8002e52:	68bb      	ldr	r3, [r7, #8]
 8002e54:	6819      	ldr	r1, [r3, #0]
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	685a      	ldr	r2, [r3, #4]
 8002e5a:	68bb      	ldr	r3, [r7, #8]
 8002e5c:	68db      	ldr	r3, [r3, #12]
 8002e5e:	f000 fcf6 	bl	800384e <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	69da      	ldr	r2, [r3, #28]
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f022 020c 	bic.w	r2, r2, #12
 8002e70:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	69d9      	ldr	r1, [r3, #28]
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	689a      	ldr	r2, [r3, #8]
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	430a      	orrs	r2, r1
 8002e82:	61da      	str	r2, [r3, #28]
 8002e84:	e01b      	b.n	8002ebe <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	6818      	ldr	r0, [r3, #0]
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	6819      	ldr	r1, [r3, #0]
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	685a      	ldr	r2, [r3, #4]
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	68db      	ldr	r3, [r3, #12]
 8002e96:	f000 fd15 	bl	80038c4 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	69da      	ldr	r2, [r3, #28]
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002ea8:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	69d9      	ldr	r1, [r3, #28]
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	689b      	ldr	r3, [r3, #8]
 8002eb4:	021a      	lsls	r2, r3, #8
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	430a      	orrs	r2, r1
 8002ebc:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	2201      	movs	r2, #1
 8002ec2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002ece:	2300      	movs	r3, #0
}
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	3710      	adds	r7, #16
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bd80      	pop	{r7, pc}

08002ed8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b084      	sub	sp, #16
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	60f8      	str	r0, [r7, #12]
 8002ee0:	60b9      	str	r1, [r7, #8]
 8002ee2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002eea:	2b01      	cmp	r3, #1
 8002eec:	d101      	bne.n	8002ef2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002eee:	2302      	movs	r3, #2
 8002ef0:	e0b4      	b.n	800305c <HAL_TIM_PWM_ConfigChannel+0x184>
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	2201      	movs	r2, #1
 8002ef6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	2202      	movs	r2, #2
 8002efe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2b0c      	cmp	r3, #12
 8002f06:	f200 809f 	bhi.w	8003048 <HAL_TIM_PWM_ConfigChannel+0x170>
 8002f0a:	a201      	add	r2, pc, #4	; (adr r2, 8002f10 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8002f0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f10:	08002f45 	.word	0x08002f45
 8002f14:	08003049 	.word	0x08003049
 8002f18:	08003049 	.word	0x08003049
 8002f1c:	08003049 	.word	0x08003049
 8002f20:	08002f85 	.word	0x08002f85
 8002f24:	08003049 	.word	0x08003049
 8002f28:	08003049 	.word	0x08003049
 8002f2c:	08003049 	.word	0x08003049
 8002f30:	08002fc7 	.word	0x08002fc7
 8002f34:	08003049 	.word	0x08003049
 8002f38:	08003049 	.word	0x08003049
 8002f3c:	08003049 	.word	0x08003049
 8002f40:	08003007 	.word	0x08003007
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	68b9      	ldr	r1, [r7, #8]
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f000 fa04 	bl	8003358 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	699a      	ldr	r2, [r3, #24]
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f042 0208 	orr.w	r2, r2, #8
 8002f5e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	699a      	ldr	r2, [r3, #24]
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f022 0204 	bic.w	r2, r2, #4
 8002f6e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	6999      	ldr	r1, [r3, #24]
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	691a      	ldr	r2, [r3, #16]
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	430a      	orrs	r2, r1
 8002f80:	619a      	str	r2, [r3, #24]
      break;
 8002f82:	e062      	b.n	800304a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	68b9      	ldr	r1, [r7, #8]
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f000 fa4a 	bl	8003424 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	699a      	ldr	r2, [r3, #24]
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f9e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	699a      	ldr	r2, [r3, #24]
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	6999      	ldr	r1, [r3, #24]
 8002fb6:	68bb      	ldr	r3, [r7, #8]
 8002fb8:	691b      	ldr	r3, [r3, #16]
 8002fba:	021a      	lsls	r2, r3, #8
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	430a      	orrs	r2, r1
 8002fc2:	619a      	str	r2, [r3, #24]
      break;
 8002fc4:	e041      	b.n	800304a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	68b9      	ldr	r1, [r7, #8]
 8002fcc:	4618      	mov	r0, r3
 8002fce:	f000 fa93 	bl	80034f8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	69da      	ldr	r2, [r3, #28]
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f042 0208 	orr.w	r2, r2, #8
 8002fe0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	69da      	ldr	r2, [r3, #28]
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f022 0204 	bic.w	r2, r2, #4
 8002ff0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	69d9      	ldr	r1, [r3, #28]
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	691a      	ldr	r2, [r3, #16]
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	430a      	orrs	r2, r1
 8003002:	61da      	str	r2, [r3, #28]
      break;
 8003004:	e021      	b.n	800304a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	68b9      	ldr	r1, [r7, #8]
 800300c:	4618      	mov	r0, r3
 800300e:	f000 fadd 	bl	80035cc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	69da      	ldr	r2, [r3, #28]
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003020:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	69da      	ldr	r2, [r3, #28]
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003030:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	69d9      	ldr	r1, [r3, #28]
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	691b      	ldr	r3, [r3, #16]
 800303c:	021a      	lsls	r2, r3, #8
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	430a      	orrs	r2, r1
 8003044:	61da      	str	r2, [r3, #28]
      break;
 8003046:	e000      	b.n	800304a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8003048:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	2201      	movs	r2, #1
 800304e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	2200      	movs	r2, #0
 8003056:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800305a:	2300      	movs	r3, #0
}
 800305c:	4618      	mov	r0, r3
 800305e:	3710      	adds	r7, #16
 8003060:	46bd      	mov	sp, r7
 8003062:	bd80      	pop	{r7, pc}

08003064 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b084      	sub	sp, #16
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
 800306c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003074:	2b01      	cmp	r3, #1
 8003076:	d101      	bne.n	800307c <HAL_TIM_ConfigClockSource+0x18>
 8003078:	2302      	movs	r3, #2
 800307a:	e0a6      	b.n	80031ca <HAL_TIM_ConfigClockSource+0x166>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2201      	movs	r2, #1
 8003080:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2202      	movs	r2, #2
 8003088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	689b      	ldr	r3, [r3, #8]
 8003092:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800309a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80030a2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	68fa      	ldr	r2, [r7, #12]
 80030aa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	2b40      	cmp	r3, #64	; 0x40
 80030b2:	d067      	beq.n	8003184 <HAL_TIM_ConfigClockSource+0x120>
 80030b4:	2b40      	cmp	r3, #64	; 0x40
 80030b6:	d80b      	bhi.n	80030d0 <HAL_TIM_ConfigClockSource+0x6c>
 80030b8:	2b10      	cmp	r3, #16
 80030ba:	d073      	beq.n	80031a4 <HAL_TIM_ConfigClockSource+0x140>
 80030bc:	2b10      	cmp	r3, #16
 80030be:	d802      	bhi.n	80030c6 <HAL_TIM_ConfigClockSource+0x62>
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d06f      	beq.n	80031a4 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80030c4:	e078      	b.n	80031b8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80030c6:	2b20      	cmp	r3, #32
 80030c8:	d06c      	beq.n	80031a4 <HAL_TIM_ConfigClockSource+0x140>
 80030ca:	2b30      	cmp	r3, #48	; 0x30
 80030cc:	d06a      	beq.n	80031a4 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80030ce:	e073      	b.n	80031b8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80030d0:	2b70      	cmp	r3, #112	; 0x70
 80030d2:	d00d      	beq.n	80030f0 <HAL_TIM_ConfigClockSource+0x8c>
 80030d4:	2b70      	cmp	r3, #112	; 0x70
 80030d6:	d804      	bhi.n	80030e2 <HAL_TIM_ConfigClockSource+0x7e>
 80030d8:	2b50      	cmp	r3, #80	; 0x50
 80030da:	d033      	beq.n	8003144 <HAL_TIM_ConfigClockSource+0xe0>
 80030dc:	2b60      	cmp	r3, #96	; 0x60
 80030de:	d041      	beq.n	8003164 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80030e0:	e06a      	b.n	80031b8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80030e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030e6:	d066      	beq.n	80031b6 <HAL_TIM_ConfigClockSource+0x152>
 80030e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030ec:	d017      	beq.n	800311e <HAL_TIM_ConfigClockSource+0xba>
      break;
 80030ee:	e063      	b.n	80031b8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6818      	ldr	r0, [r3, #0]
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	6899      	ldr	r1, [r3, #8]
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	685a      	ldr	r2, [r3, #4]
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	68db      	ldr	r3, [r3, #12]
 8003100:	f000 fc36 	bl	8003970 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003112:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	68fa      	ldr	r2, [r7, #12]
 800311a:	609a      	str	r2, [r3, #8]
      break;
 800311c:	e04c      	b.n	80031b8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6818      	ldr	r0, [r3, #0]
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	6899      	ldr	r1, [r3, #8]
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	685a      	ldr	r2, [r3, #4]
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	68db      	ldr	r3, [r3, #12]
 800312e:	f000 fc1f 	bl	8003970 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	689a      	ldr	r2, [r3, #8]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003140:	609a      	str	r2, [r3, #8]
      break;
 8003142:	e039      	b.n	80031b8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6818      	ldr	r0, [r3, #0]
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	6859      	ldr	r1, [r3, #4]
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	68db      	ldr	r3, [r3, #12]
 8003150:	461a      	mov	r2, r3
 8003152:	f000 fae3 	bl	800371c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	2150      	movs	r1, #80	; 0x50
 800315c:	4618      	mov	r0, r3
 800315e:	f000 fbed 	bl	800393c <TIM_ITRx_SetConfig>
      break;
 8003162:	e029      	b.n	80031b8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6818      	ldr	r0, [r3, #0]
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	6859      	ldr	r1, [r3, #4]
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	68db      	ldr	r3, [r3, #12]
 8003170:	461a      	mov	r2, r3
 8003172:	f000 fb3d 	bl	80037f0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	2160      	movs	r1, #96	; 0x60
 800317c:	4618      	mov	r0, r3
 800317e:	f000 fbdd 	bl	800393c <TIM_ITRx_SetConfig>
      break;
 8003182:	e019      	b.n	80031b8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6818      	ldr	r0, [r3, #0]
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	6859      	ldr	r1, [r3, #4]
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	68db      	ldr	r3, [r3, #12]
 8003190:	461a      	mov	r2, r3
 8003192:	f000 fac3 	bl	800371c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	2140      	movs	r1, #64	; 0x40
 800319c:	4618      	mov	r0, r3
 800319e:	f000 fbcd 	bl	800393c <TIM_ITRx_SetConfig>
      break;
 80031a2:	e009      	b.n	80031b8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681a      	ldr	r2, [r3, #0]
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4619      	mov	r1, r3
 80031ae:	4610      	mov	r0, r2
 80031b0:	f000 fbc4 	bl	800393c <TIM_ITRx_SetConfig>
      break;
 80031b4:	e000      	b.n	80031b8 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80031b6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2201      	movs	r2, #1
 80031bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2200      	movs	r2, #0
 80031c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80031c8:	2300      	movs	r3, #0
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	3710      	adds	r7, #16
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}
	...

080031d4 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b085      	sub	sp, #20
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
 80031dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80031de:	2300      	movs	r3, #0
 80031e0:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	2b0c      	cmp	r3, #12
 80031e6:	d831      	bhi.n	800324c <HAL_TIM_ReadCapturedValue+0x78>
 80031e8:	a201      	add	r2, pc, #4	; (adr r2, 80031f0 <HAL_TIM_ReadCapturedValue+0x1c>)
 80031ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031ee:	bf00      	nop
 80031f0:	08003225 	.word	0x08003225
 80031f4:	0800324d 	.word	0x0800324d
 80031f8:	0800324d 	.word	0x0800324d
 80031fc:	0800324d 	.word	0x0800324d
 8003200:	0800322f 	.word	0x0800322f
 8003204:	0800324d 	.word	0x0800324d
 8003208:	0800324d 	.word	0x0800324d
 800320c:	0800324d 	.word	0x0800324d
 8003210:	08003239 	.word	0x08003239
 8003214:	0800324d 	.word	0x0800324d
 8003218:	0800324d 	.word	0x0800324d
 800321c:	0800324d 	.word	0x0800324d
 8003220:	08003243 	.word	0x08003243
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800322a:	60fb      	str	r3, [r7, #12]

      break;
 800322c:	e00f      	b.n	800324e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003234:	60fb      	str	r3, [r7, #12]

      break;
 8003236:	e00a      	b.n	800324e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800323e:	60fb      	str	r3, [r7, #12]

      break;
 8003240:	e005      	b.n	800324e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003248:	60fb      	str	r3, [r7, #12]

      break;
 800324a:	e000      	b.n	800324e <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 800324c:	bf00      	nop
  }

  return tmpreg;
 800324e:	68fb      	ldr	r3, [r7, #12]
}
 8003250:	4618      	mov	r0, r3
 8003252:	3714      	adds	r7, #20
 8003254:	46bd      	mov	sp, r7
 8003256:	bc80      	pop	{r7}
 8003258:	4770      	bx	lr
 800325a:	bf00      	nop

0800325c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800325c:	b480      	push	{r7}
 800325e:	b083      	sub	sp, #12
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003264:	bf00      	nop
 8003266:	370c      	adds	r7, #12
 8003268:	46bd      	mov	sp, r7
 800326a:	bc80      	pop	{r7}
 800326c:	4770      	bx	lr

0800326e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800326e:	b480      	push	{r7}
 8003270:	b083      	sub	sp, #12
 8003272:	af00      	add	r7, sp, #0
 8003274:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003276:	bf00      	nop
 8003278:	370c      	adds	r7, #12
 800327a:	46bd      	mov	sp, r7
 800327c:	bc80      	pop	{r7}
 800327e:	4770      	bx	lr

08003280 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003280:	b480      	push	{r7}
 8003282:	b083      	sub	sp, #12
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003288:	bf00      	nop
 800328a:	370c      	adds	r7, #12
 800328c:	46bd      	mov	sp, r7
 800328e:	bc80      	pop	{r7}
 8003290:	4770      	bx	lr
	...

08003294 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003294:	b480      	push	{r7}
 8003296:	b085      	sub	sp, #20
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
 800329c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	4a29      	ldr	r2, [pc, #164]	; (800334c <TIM_Base_SetConfig+0xb8>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d00b      	beq.n	80032c4 <TIM_Base_SetConfig+0x30>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032b2:	d007      	beq.n	80032c4 <TIM_Base_SetConfig+0x30>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	4a26      	ldr	r2, [pc, #152]	; (8003350 <TIM_Base_SetConfig+0xbc>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d003      	beq.n	80032c4 <TIM_Base_SetConfig+0x30>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	4a25      	ldr	r2, [pc, #148]	; (8003354 <TIM_Base_SetConfig+0xc0>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d108      	bne.n	80032d6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	68fa      	ldr	r2, [r7, #12]
 80032d2:	4313      	orrs	r3, r2
 80032d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	4a1c      	ldr	r2, [pc, #112]	; (800334c <TIM_Base_SetConfig+0xb8>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d00b      	beq.n	80032f6 <TIM_Base_SetConfig+0x62>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032e4:	d007      	beq.n	80032f6 <TIM_Base_SetConfig+0x62>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	4a19      	ldr	r2, [pc, #100]	; (8003350 <TIM_Base_SetConfig+0xbc>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d003      	beq.n	80032f6 <TIM_Base_SetConfig+0x62>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	4a18      	ldr	r2, [pc, #96]	; (8003354 <TIM_Base_SetConfig+0xc0>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d108      	bne.n	8003308 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	68db      	ldr	r3, [r3, #12]
 8003302:	68fa      	ldr	r2, [r7, #12]
 8003304:	4313      	orrs	r3, r2
 8003306:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	695b      	ldr	r3, [r3, #20]
 8003312:	4313      	orrs	r3, r2
 8003314:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	68fa      	ldr	r2, [r7, #12]
 800331a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	689a      	ldr	r2, [r3, #8]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	681a      	ldr	r2, [r3, #0]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	4a07      	ldr	r2, [pc, #28]	; (800334c <TIM_Base_SetConfig+0xb8>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d103      	bne.n	800333c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	691a      	ldr	r2, [r3, #16]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2201      	movs	r2, #1
 8003340:	615a      	str	r2, [r3, #20]
}
 8003342:	bf00      	nop
 8003344:	3714      	adds	r7, #20
 8003346:	46bd      	mov	sp, r7
 8003348:	bc80      	pop	{r7}
 800334a:	4770      	bx	lr
 800334c:	40012c00 	.word	0x40012c00
 8003350:	40000400 	.word	0x40000400
 8003354:	40000800 	.word	0x40000800

08003358 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003358:	b480      	push	{r7}
 800335a:	b087      	sub	sp, #28
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
 8003360:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6a1b      	ldr	r3, [r3, #32]
 8003366:	f023 0201 	bic.w	r2, r3, #1
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6a1b      	ldr	r3, [r3, #32]
 8003372:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	699b      	ldr	r3, [r3, #24]
 800337e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003386:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	f023 0303 	bic.w	r3, r3, #3
 800338e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	68fa      	ldr	r2, [r7, #12]
 8003396:	4313      	orrs	r3, r2
 8003398:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	f023 0302 	bic.w	r3, r3, #2
 80033a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	689b      	ldr	r3, [r3, #8]
 80033a6:	697a      	ldr	r2, [r7, #20]
 80033a8:	4313      	orrs	r3, r2
 80033aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	4a1c      	ldr	r2, [pc, #112]	; (8003420 <TIM_OC1_SetConfig+0xc8>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d10c      	bne.n	80033ce <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	f023 0308 	bic.w	r3, r3, #8
 80033ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	68db      	ldr	r3, [r3, #12]
 80033c0:	697a      	ldr	r2, [r7, #20]
 80033c2:	4313      	orrs	r3, r2
 80033c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	f023 0304 	bic.w	r3, r3, #4
 80033cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	4a13      	ldr	r2, [pc, #76]	; (8003420 <TIM_OC1_SetConfig+0xc8>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d111      	bne.n	80033fa <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80033d6:	693b      	ldr	r3, [r7, #16]
 80033d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80033dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80033e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	695b      	ldr	r3, [r3, #20]
 80033ea:	693a      	ldr	r2, [r7, #16]
 80033ec:	4313      	orrs	r3, r2
 80033ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	699b      	ldr	r3, [r3, #24]
 80033f4:	693a      	ldr	r2, [r7, #16]
 80033f6:	4313      	orrs	r3, r2
 80033f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	693a      	ldr	r2, [r7, #16]
 80033fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	68fa      	ldr	r2, [r7, #12]
 8003404:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	685a      	ldr	r2, [r3, #4]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	697a      	ldr	r2, [r7, #20]
 8003412:	621a      	str	r2, [r3, #32]
}
 8003414:	bf00      	nop
 8003416:	371c      	adds	r7, #28
 8003418:	46bd      	mov	sp, r7
 800341a:	bc80      	pop	{r7}
 800341c:	4770      	bx	lr
 800341e:	bf00      	nop
 8003420:	40012c00 	.word	0x40012c00

08003424 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003424:	b480      	push	{r7}
 8003426:	b087      	sub	sp, #28
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
 800342c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6a1b      	ldr	r3, [r3, #32]
 8003432:	f023 0210 	bic.w	r2, r3, #16
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6a1b      	ldr	r3, [r3, #32]
 800343e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	699b      	ldr	r3, [r3, #24]
 800344a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003452:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800345a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	021b      	lsls	r3, r3, #8
 8003462:	68fa      	ldr	r2, [r7, #12]
 8003464:	4313      	orrs	r3, r2
 8003466:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003468:	697b      	ldr	r3, [r7, #20]
 800346a:	f023 0320 	bic.w	r3, r3, #32
 800346e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	689b      	ldr	r3, [r3, #8]
 8003474:	011b      	lsls	r3, r3, #4
 8003476:	697a      	ldr	r2, [r7, #20]
 8003478:	4313      	orrs	r3, r2
 800347a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	4a1d      	ldr	r2, [pc, #116]	; (80034f4 <TIM_OC2_SetConfig+0xd0>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d10d      	bne.n	80034a0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003484:	697b      	ldr	r3, [r7, #20]
 8003486:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800348a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	68db      	ldr	r3, [r3, #12]
 8003490:	011b      	lsls	r3, r3, #4
 8003492:	697a      	ldr	r2, [r7, #20]
 8003494:	4313      	orrs	r3, r2
 8003496:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800349e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	4a14      	ldr	r2, [pc, #80]	; (80034f4 <TIM_OC2_SetConfig+0xd0>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d113      	bne.n	80034d0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80034a8:	693b      	ldr	r3, [r7, #16]
 80034aa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80034ae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80034b0:	693b      	ldr	r3, [r7, #16]
 80034b2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80034b6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	695b      	ldr	r3, [r3, #20]
 80034bc:	009b      	lsls	r3, r3, #2
 80034be:	693a      	ldr	r2, [r7, #16]
 80034c0:	4313      	orrs	r3, r2
 80034c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	699b      	ldr	r3, [r3, #24]
 80034c8:	009b      	lsls	r3, r3, #2
 80034ca:	693a      	ldr	r2, [r7, #16]
 80034cc:	4313      	orrs	r3, r2
 80034ce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	693a      	ldr	r2, [r7, #16]
 80034d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	68fa      	ldr	r2, [r7, #12]
 80034da:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	685a      	ldr	r2, [r3, #4]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	697a      	ldr	r2, [r7, #20]
 80034e8:	621a      	str	r2, [r3, #32]
}
 80034ea:	bf00      	nop
 80034ec:	371c      	adds	r7, #28
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bc80      	pop	{r7}
 80034f2:	4770      	bx	lr
 80034f4:	40012c00 	.word	0x40012c00

080034f8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b087      	sub	sp, #28
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
 8003500:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6a1b      	ldr	r3, [r3, #32]
 8003506:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6a1b      	ldr	r3, [r3, #32]
 8003512:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	69db      	ldr	r3, [r3, #28]
 800351e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003526:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	f023 0303 	bic.w	r3, r3, #3
 800352e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	68fa      	ldr	r2, [r7, #12]
 8003536:	4313      	orrs	r3, r2
 8003538:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003540:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	689b      	ldr	r3, [r3, #8]
 8003546:	021b      	lsls	r3, r3, #8
 8003548:	697a      	ldr	r2, [r7, #20]
 800354a:	4313      	orrs	r3, r2
 800354c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	4a1d      	ldr	r2, [pc, #116]	; (80035c8 <TIM_OC3_SetConfig+0xd0>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d10d      	bne.n	8003572 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800355c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	68db      	ldr	r3, [r3, #12]
 8003562:	021b      	lsls	r3, r3, #8
 8003564:	697a      	ldr	r2, [r7, #20]
 8003566:	4313      	orrs	r3, r2
 8003568:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003570:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	4a14      	ldr	r2, [pc, #80]	; (80035c8 <TIM_OC3_SetConfig+0xd0>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d113      	bne.n	80035a2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003580:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003582:	693b      	ldr	r3, [r7, #16]
 8003584:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003588:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	695b      	ldr	r3, [r3, #20]
 800358e:	011b      	lsls	r3, r3, #4
 8003590:	693a      	ldr	r2, [r7, #16]
 8003592:	4313      	orrs	r3, r2
 8003594:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	699b      	ldr	r3, [r3, #24]
 800359a:	011b      	lsls	r3, r3, #4
 800359c:	693a      	ldr	r2, [r7, #16]
 800359e:	4313      	orrs	r3, r2
 80035a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	693a      	ldr	r2, [r7, #16]
 80035a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	68fa      	ldr	r2, [r7, #12]
 80035ac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	685a      	ldr	r2, [r3, #4]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	697a      	ldr	r2, [r7, #20]
 80035ba:	621a      	str	r2, [r3, #32]
}
 80035bc:	bf00      	nop
 80035be:	371c      	adds	r7, #28
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bc80      	pop	{r7}
 80035c4:	4770      	bx	lr
 80035c6:	bf00      	nop
 80035c8:	40012c00 	.word	0x40012c00

080035cc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80035cc:	b480      	push	{r7}
 80035ce:	b087      	sub	sp, #28
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
 80035d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6a1b      	ldr	r3, [r3, #32]
 80035da:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6a1b      	ldr	r3, [r3, #32]
 80035e6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	69db      	ldr	r3, [r3, #28]
 80035f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80035fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003602:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	021b      	lsls	r3, r3, #8
 800360a:	68fa      	ldr	r2, [r7, #12]
 800360c:	4313      	orrs	r3, r2
 800360e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003610:	693b      	ldr	r3, [r7, #16]
 8003612:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003616:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	689b      	ldr	r3, [r3, #8]
 800361c:	031b      	lsls	r3, r3, #12
 800361e:	693a      	ldr	r2, [r7, #16]
 8003620:	4313      	orrs	r3, r2
 8003622:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	4a0f      	ldr	r2, [pc, #60]	; (8003664 <TIM_OC4_SetConfig+0x98>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d109      	bne.n	8003640 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800362c:	697b      	ldr	r3, [r7, #20]
 800362e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003632:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	695b      	ldr	r3, [r3, #20]
 8003638:	019b      	lsls	r3, r3, #6
 800363a:	697a      	ldr	r2, [r7, #20]
 800363c:	4313      	orrs	r3, r2
 800363e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	697a      	ldr	r2, [r7, #20]
 8003644:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	68fa      	ldr	r2, [r7, #12]
 800364a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	685a      	ldr	r2, [r3, #4]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	693a      	ldr	r2, [r7, #16]
 8003658:	621a      	str	r2, [r3, #32]
}
 800365a:	bf00      	nop
 800365c:	371c      	adds	r7, #28
 800365e:	46bd      	mov	sp, r7
 8003660:	bc80      	pop	{r7}
 8003662:	4770      	bx	lr
 8003664:	40012c00 	.word	0x40012c00

08003668 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003668:	b480      	push	{r7}
 800366a:	b087      	sub	sp, #28
 800366c:	af00      	add	r7, sp, #0
 800366e:	60f8      	str	r0, [r7, #12]
 8003670:	60b9      	str	r1, [r7, #8]
 8003672:	607a      	str	r2, [r7, #4]
 8003674:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	6a1b      	ldr	r3, [r3, #32]
 800367a:	f023 0201 	bic.w	r2, r3, #1
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	699b      	ldr	r3, [r3, #24]
 8003686:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	6a1b      	ldr	r3, [r3, #32]
 800368c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	4a1f      	ldr	r2, [pc, #124]	; (8003710 <TIM_TI1_SetConfig+0xa8>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d00b      	beq.n	80036ae <TIM_TI1_SetConfig+0x46>
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800369c:	d007      	beq.n	80036ae <TIM_TI1_SetConfig+0x46>
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	4a1c      	ldr	r2, [pc, #112]	; (8003714 <TIM_TI1_SetConfig+0xac>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d003      	beq.n	80036ae <TIM_TI1_SetConfig+0x46>
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	4a1b      	ldr	r2, [pc, #108]	; (8003718 <TIM_TI1_SetConfig+0xb0>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d101      	bne.n	80036b2 <TIM_TI1_SetConfig+0x4a>
 80036ae:	2301      	movs	r3, #1
 80036b0:	e000      	b.n	80036b4 <TIM_TI1_SetConfig+0x4c>
 80036b2:	2300      	movs	r3, #0
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d008      	beq.n	80036ca <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80036b8:	697b      	ldr	r3, [r7, #20]
 80036ba:	f023 0303 	bic.w	r3, r3, #3
 80036be:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80036c0:	697a      	ldr	r2, [r7, #20]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	4313      	orrs	r3, r2
 80036c6:	617b      	str	r3, [r7, #20]
 80036c8:	e003      	b.n	80036d2 <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80036ca:	697b      	ldr	r3, [r7, #20]
 80036cc:	f043 0301 	orr.w	r3, r3, #1
 80036d0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80036d8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	011b      	lsls	r3, r3, #4
 80036de:	b2db      	uxtb	r3, r3
 80036e0:	697a      	ldr	r2, [r7, #20]
 80036e2:	4313      	orrs	r3, r2
 80036e4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80036e6:	693b      	ldr	r3, [r7, #16]
 80036e8:	f023 030a 	bic.w	r3, r3, #10
 80036ec:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80036ee:	68bb      	ldr	r3, [r7, #8]
 80036f0:	f003 030a 	and.w	r3, r3, #10
 80036f4:	693a      	ldr	r2, [r7, #16]
 80036f6:	4313      	orrs	r3, r2
 80036f8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	697a      	ldr	r2, [r7, #20]
 80036fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	693a      	ldr	r2, [r7, #16]
 8003704:	621a      	str	r2, [r3, #32]
}
 8003706:	bf00      	nop
 8003708:	371c      	adds	r7, #28
 800370a:	46bd      	mov	sp, r7
 800370c:	bc80      	pop	{r7}
 800370e:	4770      	bx	lr
 8003710:	40012c00 	.word	0x40012c00
 8003714:	40000400 	.word	0x40000400
 8003718:	40000800 	.word	0x40000800

0800371c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800371c:	b480      	push	{r7}
 800371e:	b087      	sub	sp, #28
 8003720:	af00      	add	r7, sp, #0
 8003722:	60f8      	str	r0, [r7, #12]
 8003724:	60b9      	str	r1, [r7, #8]
 8003726:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	6a1b      	ldr	r3, [r3, #32]
 800372c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	6a1b      	ldr	r3, [r3, #32]
 8003732:	f023 0201 	bic.w	r2, r3, #1
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	699b      	ldr	r3, [r3, #24]
 800373e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003740:	693b      	ldr	r3, [r7, #16]
 8003742:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003746:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	011b      	lsls	r3, r3, #4
 800374c:	693a      	ldr	r2, [r7, #16]
 800374e:	4313      	orrs	r3, r2
 8003750:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	f023 030a 	bic.w	r3, r3, #10
 8003758:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800375a:	697a      	ldr	r2, [r7, #20]
 800375c:	68bb      	ldr	r3, [r7, #8]
 800375e:	4313      	orrs	r3, r2
 8003760:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	693a      	ldr	r2, [r7, #16]
 8003766:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	697a      	ldr	r2, [r7, #20]
 800376c:	621a      	str	r2, [r3, #32]
}
 800376e:	bf00      	nop
 8003770:	371c      	adds	r7, #28
 8003772:	46bd      	mov	sp, r7
 8003774:	bc80      	pop	{r7}
 8003776:	4770      	bx	lr

08003778 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003778:	b480      	push	{r7}
 800377a:	b087      	sub	sp, #28
 800377c:	af00      	add	r7, sp, #0
 800377e:	60f8      	str	r0, [r7, #12]
 8003780:	60b9      	str	r1, [r7, #8]
 8003782:	607a      	str	r2, [r7, #4]
 8003784:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	6a1b      	ldr	r3, [r3, #32]
 800378a:	f023 0210 	bic.w	r2, r3, #16
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	699b      	ldr	r3, [r3, #24]
 8003796:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	6a1b      	ldr	r3, [r3, #32]
 800379c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800379e:	697b      	ldr	r3, [r7, #20]
 80037a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037a4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	021b      	lsls	r3, r3, #8
 80037aa:	697a      	ldr	r2, [r7, #20]
 80037ac:	4313      	orrs	r3, r2
 80037ae:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80037b0:	697b      	ldr	r3, [r7, #20]
 80037b2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80037b6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	031b      	lsls	r3, r3, #12
 80037bc:	b29b      	uxth	r3, r3
 80037be:	697a      	ldr	r2, [r7, #20]
 80037c0:	4313      	orrs	r3, r2
 80037c2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80037c4:	693b      	ldr	r3, [r7, #16]
 80037c6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80037ca:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	011b      	lsls	r3, r3, #4
 80037d0:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80037d4:	693a      	ldr	r2, [r7, #16]
 80037d6:	4313      	orrs	r3, r2
 80037d8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	697a      	ldr	r2, [r7, #20]
 80037de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	693a      	ldr	r2, [r7, #16]
 80037e4:	621a      	str	r2, [r3, #32]
}
 80037e6:	bf00      	nop
 80037e8:	371c      	adds	r7, #28
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bc80      	pop	{r7}
 80037ee:	4770      	bx	lr

080037f0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80037f0:	b480      	push	{r7}
 80037f2:	b087      	sub	sp, #28
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	60f8      	str	r0, [r7, #12]
 80037f8:	60b9      	str	r1, [r7, #8]
 80037fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	6a1b      	ldr	r3, [r3, #32]
 8003800:	f023 0210 	bic.w	r2, r3, #16
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	699b      	ldr	r3, [r3, #24]
 800380c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	6a1b      	ldr	r3, [r3, #32]
 8003812:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800381a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	031b      	lsls	r3, r3, #12
 8003820:	697a      	ldr	r2, [r7, #20]
 8003822:	4313      	orrs	r3, r2
 8003824:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003826:	693b      	ldr	r3, [r7, #16]
 8003828:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800382c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	011b      	lsls	r3, r3, #4
 8003832:	693a      	ldr	r2, [r7, #16]
 8003834:	4313      	orrs	r3, r2
 8003836:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	697a      	ldr	r2, [r7, #20]
 800383c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	693a      	ldr	r2, [r7, #16]
 8003842:	621a      	str	r2, [r3, #32]
}
 8003844:	bf00      	nop
 8003846:	371c      	adds	r7, #28
 8003848:	46bd      	mov	sp, r7
 800384a:	bc80      	pop	{r7}
 800384c:	4770      	bx	lr

0800384e <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800384e:	b480      	push	{r7}
 8003850:	b087      	sub	sp, #28
 8003852:	af00      	add	r7, sp, #0
 8003854:	60f8      	str	r0, [r7, #12]
 8003856:	60b9      	str	r1, [r7, #8]
 8003858:	607a      	str	r2, [r7, #4]
 800385a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	6a1b      	ldr	r3, [r3, #32]
 8003860:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	69db      	ldr	r3, [r3, #28]
 800386c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	6a1b      	ldr	r3, [r3, #32]
 8003872:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	f023 0303 	bic.w	r3, r3, #3
 800387a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800387c:	697a      	ldr	r2, [r7, #20]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	4313      	orrs	r3, r2
 8003882:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003884:	697b      	ldr	r3, [r7, #20]
 8003886:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800388a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	011b      	lsls	r3, r3, #4
 8003890:	b2db      	uxtb	r3, r3
 8003892:	697a      	ldr	r2, [r7, #20]
 8003894:	4313      	orrs	r3, r2
 8003896:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8003898:	693b      	ldr	r3, [r7, #16]
 800389a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800389e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	021b      	lsls	r3, r3, #8
 80038a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80038a8:	693a      	ldr	r2, [r7, #16]
 80038aa:	4313      	orrs	r3, r2
 80038ac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	697a      	ldr	r2, [r7, #20]
 80038b2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	693a      	ldr	r2, [r7, #16]
 80038b8:	621a      	str	r2, [r3, #32]
}
 80038ba:	bf00      	nop
 80038bc:	371c      	adds	r7, #28
 80038be:	46bd      	mov	sp, r7
 80038c0:	bc80      	pop	{r7}
 80038c2:	4770      	bx	lr

080038c4 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80038c4:	b480      	push	{r7}
 80038c6:	b087      	sub	sp, #28
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	60f8      	str	r0, [r7, #12]
 80038cc:	60b9      	str	r1, [r7, #8]
 80038ce:	607a      	str	r2, [r7, #4]
 80038d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	6a1b      	ldr	r3, [r3, #32]
 80038d6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	69db      	ldr	r3, [r3, #28]
 80038e2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	6a1b      	ldr	r3, [r3, #32]
 80038e8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038f0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	021b      	lsls	r3, r3, #8
 80038f6:	697a      	ldr	r2, [r7, #20]
 80038f8:	4313      	orrs	r3, r2
 80038fa:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80038fc:	697b      	ldr	r3, [r7, #20]
 80038fe:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003902:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	031b      	lsls	r3, r3, #12
 8003908:	b29b      	uxth	r3, r3
 800390a:	697a      	ldr	r2, [r7, #20]
 800390c:	4313      	orrs	r3, r2
 800390e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8003910:	693b      	ldr	r3, [r7, #16]
 8003912:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003916:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	031b      	lsls	r3, r3, #12
 800391c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003920:	693a      	ldr	r2, [r7, #16]
 8003922:	4313      	orrs	r3, r2
 8003924:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	697a      	ldr	r2, [r7, #20]
 800392a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	693a      	ldr	r2, [r7, #16]
 8003930:	621a      	str	r2, [r3, #32]
}
 8003932:	bf00      	nop
 8003934:	371c      	adds	r7, #28
 8003936:	46bd      	mov	sp, r7
 8003938:	bc80      	pop	{r7}
 800393a:	4770      	bx	lr

0800393c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800393c:	b480      	push	{r7}
 800393e:	b085      	sub	sp, #20
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
 8003944:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	689b      	ldr	r3, [r3, #8]
 800394a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003952:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003954:	683a      	ldr	r2, [r7, #0]
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	4313      	orrs	r3, r2
 800395a:	f043 0307 	orr.w	r3, r3, #7
 800395e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	68fa      	ldr	r2, [r7, #12]
 8003964:	609a      	str	r2, [r3, #8]
}
 8003966:	bf00      	nop
 8003968:	3714      	adds	r7, #20
 800396a:	46bd      	mov	sp, r7
 800396c:	bc80      	pop	{r7}
 800396e:	4770      	bx	lr

08003970 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003970:	b480      	push	{r7}
 8003972:	b087      	sub	sp, #28
 8003974:	af00      	add	r7, sp, #0
 8003976:	60f8      	str	r0, [r7, #12]
 8003978:	60b9      	str	r1, [r7, #8]
 800397a:	607a      	str	r2, [r7, #4]
 800397c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	689b      	ldr	r3, [r3, #8]
 8003982:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003984:	697b      	ldr	r3, [r7, #20]
 8003986:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800398a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	021a      	lsls	r2, r3, #8
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	431a      	orrs	r2, r3
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	4313      	orrs	r3, r2
 8003998:	697a      	ldr	r2, [r7, #20]
 800399a:	4313      	orrs	r3, r2
 800399c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	697a      	ldr	r2, [r7, #20]
 80039a2:	609a      	str	r2, [r3, #8]
}
 80039a4:	bf00      	nop
 80039a6:	371c      	adds	r7, #28
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bc80      	pop	{r7}
 80039ac:	4770      	bx	lr

080039ae <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80039ae:	b480      	push	{r7}
 80039b0:	b087      	sub	sp, #28
 80039b2:	af00      	add	r7, sp, #0
 80039b4:	60f8      	str	r0, [r7, #12]
 80039b6:	60b9      	str	r1, [r7, #8]
 80039b8:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	f003 031f 	and.w	r3, r3, #31
 80039c0:	2201      	movs	r2, #1
 80039c2:	fa02 f303 	lsl.w	r3, r2, r3
 80039c6:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	6a1a      	ldr	r2, [r3, #32]
 80039cc:	697b      	ldr	r3, [r7, #20]
 80039ce:	43db      	mvns	r3, r3
 80039d0:	401a      	ands	r2, r3
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	6a1a      	ldr	r2, [r3, #32]
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	f003 031f 	and.w	r3, r3, #31
 80039e0:	6879      	ldr	r1, [r7, #4]
 80039e2:	fa01 f303 	lsl.w	r3, r1, r3
 80039e6:	431a      	orrs	r2, r3
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	621a      	str	r2, [r3, #32]
}
 80039ec:	bf00      	nop
 80039ee:	371c      	adds	r7, #28
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bc80      	pop	{r7}
 80039f4:	4770      	bx	lr

080039f6 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80039f6:	b480      	push	{r7}
 80039f8:	b085      	sub	sp, #20
 80039fa:	af00      	add	r7, sp, #0
 80039fc:	6078      	str	r0, [r7, #4]
 80039fe:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a06:	2b01      	cmp	r3, #1
 8003a08:	d101      	bne.n	8003a0e <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003a0a:	2302      	movs	r3, #2
 8003a0c:	e032      	b.n	8003a74 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2201      	movs	r2, #1
 8003a12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2202      	movs	r2, #2
 8003a1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	689b      	ldr	r3, [r3, #8]
 8003a2c:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a34:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	68fa      	ldr	r2, [r7, #12]
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a46:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	68ba      	ldr	r2, [r7, #8]
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	68fa      	ldr	r2, [r7, #12]
 8003a58:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	68ba      	ldr	r2, [r7, #8]
 8003a60:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2201      	movs	r2, #1
 8003a66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003a72:	2300      	movs	r3, #0
}
 8003a74:	4618      	mov	r0, r3
 8003a76:	3714      	adds	r7, #20
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bc80      	pop	{r7}
 8003a7c:	4770      	bx	lr

08003a7e <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003a7e:	b480      	push	{r7}
 8003a80:	b083      	sub	sp, #12
 8003a82:	af00      	add	r7, sp, #0
 8003a84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003a86:	bf00      	nop
 8003a88:	370c      	adds	r7, #12
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bc80      	pop	{r7}
 8003a8e:	4770      	bx	lr

08003a90 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003a90:	b480      	push	{r7}
 8003a92:	b083      	sub	sp, #12
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003a98:	bf00      	nop
 8003a9a:	370c      	adds	r7, #12
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	bc80      	pop	{r7}
 8003aa0:	4770      	bx	lr

08003aa2 <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003aa2:	b084      	sub	sp, #16
 8003aa4:	b480      	push	{r7}
 8003aa6:	b083      	sub	sp, #12
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
 8003aac:	f107 0014 	add.w	r0, r7, #20
 8003ab0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8003ab4:	2300      	movs	r3, #0
}
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	370c      	adds	r7, #12
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bc80      	pop	{r7}
 8003abe:	b004      	add	sp, #16
 8003ac0:	4770      	bx	lr

08003ac2 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8003ac2:	b480      	push	{r7}
 8003ac4:	b085      	sub	sp, #20
 8003ac6:	af00      	add	r7, sp, #0
 8003ac8:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003aca:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003ace:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003ad6:	b29a      	uxth	r2, r3
 8003ad8:	89fb      	ldrh	r3, [r7, #14]
 8003ada:	4313      	orrs	r3, r2
 8003adc:	b29a      	uxth	r2, r3
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003ae4:	2300      	movs	r3, #0
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	3714      	adds	r7, #20
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bc80      	pop	{r7}
 8003aee:	4770      	bx	lr

08003af0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003af0:	b480      	push	{r7}
 8003af2:	b085      	sub	sp, #20
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003af8:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003afc:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003b04:	b29b      	uxth	r3, r3
 8003b06:	b21a      	sxth	r2, r3
 8003b08:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003b0c:	43db      	mvns	r3, r3
 8003b0e:	b21b      	sxth	r3, r3
 8003b10:	4013      	ands	r3, r2
 8003b12:	b21b      	sxth	r3, r3
 8003b14:	b29a      	uxth	r2, r3
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003b1c:	2300      	movs	r3, #0
}
 8003b1e:	4618      	mov	r0, r3
 8003b20:	3714      	adds	r7, #20
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bc80      	pop	{r7}
 8003b26:	4770      	bx	lr

08003b28 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE: Peripheral mode mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	b083      	sub	sp, #12
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
 8003b30:	460b      	mov	r3, r1
 8003b32:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8003b34:	2300      	movs	r3, #0
}
 8003b36:	4618      	mov	r0, r3
 8003b38:	370c      	adds	r7, #12
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bc80      	pop	{r7}
 8003b3e:	4770      	bx	lr

08003b40 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003b40:	b084      	sub	sp, #16
 8003b42:	b580      	push	{r7, lr}
 8003b44:	b082      	sub	sp, #8
 8003b46:	af00      	add	r7, sp, #0
 8003b48:	6078      	str	r0, [r7, #4]
 8003b4a:	f107 0014 	add.w	r0, r7, #20
 8003b4e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2201      	movs	r2, #1
 8003b56:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2200      	movs	r2, #0
 8003b66:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 8003b72:	6878      	ldr	r0, [r7, #4]
 8003b74:	f7ff ffa5 	bl	8003ac2 <USB_EnableGlobalInt>

  return HAL_OK;
 8003b78:	2300      	movs	r3, #0
}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	3708      	adds	r7, #8
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003b84:	b004      	add	sp, #16
 8003b86:	4770      	bx	lr

08003b88 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003b88:	b490      	push	{r4, r7}
 8003b8a:	b084      	sub	sp, #16
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
 8003b90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8003b92:	2300      	movs	r3, #0
 8003b94:	73fb      	strb	r3, [r7, #15]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8003b96:	687a      	ldr	r2, [r7, #4]
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	781b      	ldrb	r3, [r3, #0]
 8003b9c:	009b      	lsls	r3, r3, #2
 8003b9e:	4413      	add	r3, r2
 8003ba0:	881b      	ldrh	r3, [r3, #0]
 8003ba2:	b29b      	uxth	r3, r3
 8003ba4:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8003ba8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bac:	81bb      	strh	r3, [r7, #12]

  /* initialize Endpoint */
  switch (ep->type)
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	78db      	ldrb	r3, [r3, #3]
 8003bb2:	2b03      	cmp	r3, #3
 8003bb4:	d819      	bhi.n	8003bea <USB_ActivateEndpoint+0x62>
 8003bb6:	a201      	add	r2, pc, #4	; (adr r2, 8003bbc <USB_ActivateEndpoint+0x34>)
 8003bb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bbc:	08003bcd 	.word	0x08003bcd
 8003bc0:	08003be1 	.word	0x08003be1
 8003bc4:	08003bf1 	.word	0x08003bf1
 8003bc8:	08003bd7 	.word	0x08003bd7
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8003bcc:	89bb      	ldrh	r3, [r7, #12]
 8003bce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003bd2:	81bb      	strh	r3, [r7, #12]
      break;
 8003bd4:	e00d      	b.n	8003bf2 <USB_ActivateEndpoint+0x6a>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8003bd6:	89bb      	ldrh	r3, [r7, #12]
 8003bd8:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8003bdc:	81bb      	strh	r3, [r7, #12]
      break;
 8003bde:	e008      	b.n	8003bf2 <USB_ActivateEndpoint+0x6a>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8003be0:	89bb      	ldrh	r3, [r7, #12]
 8003be2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003be6:	81bb      	strh	r3, [r7, #12]
      break;
 8003be8:	e003      	b.n	8003bf2 <USB_ActivateEndpoint+0x6a>

    default:
      ret = HAL_ERROR;
 8003bea:	2301      	movs	r3, #1
 8003bec:	73fb      	strb	r3, [r7, #15]
      break;
 8003bee:	e000      	b.n	8003bf2 <USB_ActivateEndpoint+0x6a>
      break;
 8003bf0:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX);
 8003bf2:	687a      	ldr	r2, [r7, #4]
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	781b      	ldrb	r3, [r3, #0]
 8003bf8:	009b      	lsls	r3, r3, #2
 8003bfa:	441a      	add	r2, r3
 8003bfc:	89bb      	ldrh	r3, [r7, #12]
 8003bfe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c02:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c0e:	b29b      	uxth	r3, r3
 8003c10:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8003c12:	687a      	ldr	r2, [r7, #4]
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	781b      	ldrb	r3, [r3, #0]
 8003c18:	009b      	lsls	r3, r3, #2
 8003c1a:	4413      	add	r3, r2
 8003c1c:	881b      	ldrh	r3, [r3, #0]
 8003c1e:	b29b      	uxth	r3, r3
 8003c20:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c28:	b29a      	uxth	r2, r3
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	781b      	ldrb	r3, [r3, #0]
 8003c2e:	b29b      	uxth	r3, r3
 8003c30:	4313      	orrs	r3, r2
 8003c32:	b29c      	uxth	r4, r3
 8003c34:	687a      	ldr	r2, [r7, #4]
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	781b      	ldrb	r3, [r3, #0]
 8003c3a:	009b      	lsls	r3, r3, #2
 8003c3c:	441a      	add	r2, r3
 8003c3e:	4b8a      	ldr	r3, [pc, #552]	; (8003e68 <USB_ActivateEndpoint+0x2e0>)
 8003c40:	4323      	orrs	r3, r4
 8003c42:	b29b      	uxth	r3, r3
 8003c44:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	7b1b      	ldrb	r3, [r3, #12]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	f040 8112 	bne.w	8003e74 <USB_ActivateEndpoint+0x2ec>
  {
    if (ep->is_in != 0U)
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	785b      	ldrb	r3, [r3, #1]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d067      	beq.n	8003d28 <USB_ActivateEndpoint+0x1a0>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003c58:	687c      	ldr	r4, [r7, #4]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c60:	b29b      	uxth	r3, r3
 8003c62:	441c      	add	r4, r3
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	781b      	ldrb	r3, [r3, #0]
 8003c68:	011b      	lsls	r3, r3, #4
 8003c6a:	4423      	add	r3, r4
 8003c6c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003c70:	461c      	mov	r4, r3
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	88db      	ldrh	r3, [r3, #6]
 8003c76:	085b      	lsrs	r3, r3, #1
 8003c78:	b29b      	uxth	r3, r3
 8003c7a:	005b      	lsls	r3, r3, #1
 8003c7c:	b29b      	uxth	r3, r3
 8003c7e:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003c80:	687a      	ldr	r2, [r7, #4]
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	781b      	ldrb	r3, [r3, #0]
 8003c86:	009b      	lsls	r3, r3, #2
 8003c88:	4413      	add	r3, r2
 8003c8a:	881b      	ldrh	r3, [r3, #0]
 8003c8c:	b29c      	uxth	r4, r3
 8003c8e:	4623      	mov	r3, r4
 8003c90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d014      	beq.n	8003cc2 <USB_ActivateEndpoint+0x13a>
 8003c98:	687a      	ldr	r2, [r7, #4]
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	781b      	ldrb	r3, [r3, #0]
 8003c9e:	009b      	lsls	r3, r3, #2
 8003ca0:	4413      	add	r3, r2
 8003ca2:	881b      	ldrh	r3, [r3, #0]
 8003ca4:	b29b      	uxth	r3, r3
 8003ca6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003caa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cae:	b29c      	uxth	r4, r3
 8003cb0:	687a      	ldr	r2, [r7, #4]
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	781b      	ldrb	r3, [r3, #0]
 8003cb6:	009b      	lsls	r3, r3, #2
 8003cb8:	441a      	add	r2, r3
 8003cba:	4b6c      	ldr	r3, [pc, #432]	; (8003e6c <USB_ActivateEndpoint+0x2e4>)
 8003cbc:	4323      	orrs	r3, r4
 8003cbe:	b29b      	uxth	r3, r3
 8003cc0:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	78db      	ldrb	r3, [r3, #3]
 8003cc6:	2b01      	cmp	r3, #1
 8003cc8:	d018      	beq.n	8003cfc <USB_ActivateEndpoint+0x174>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003cca:	687a      	ldr	r2, [r7, #4]
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	781b      	ldrb	r3, [r3, #0]
 8003cd0:	009b      	lsls	r3, r3, #2
 8003cd2:	4413      	add	r3, r2
 8003cd4:	881b      	ldrh	r3, [r3, #0]
 8003cd6:	b29b      	uxth	r3, r3
 8003cd8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003cdc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ce0:	b29c      	uxth	r4, r3
 8003ce2:	f084 0320 	eor.w	r3, r4, #32
 8003ce6:	b29c      	uxth	r4, r3
 8003ce8:	687a      	ldr	r2, [r7, #4]
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	781b      	ldrb	r3, [r3, #0]
 8003cee:	009b      	lsls	r3, r3, #2
 8003cf0:	441a      	add	r2, r3
 8003cf2:	4b5d      	ldr	r3, [pc, #372]	; (8003e68 <USB_ActivateEndpoint+0x2e0>)
 8003cf4:	4323      	orrs	r3, r4
 8003cf6:	b29b      	uxth	r3, r3
 8003cf8:	8013      	strh	r3, [r2, #0]
 8003cfa:	e22b      	b.n	8004154 <USB_ActivateEndpoint+0x5cc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003cfc:	687a      	ldr	r2, [r7, #4]
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	781b      	ldrb	r3, [r3, #0]
 8003d02:	009b      	lsls	r3, r3, #2
 8003d04:	4413      	add	r3, r2
 8003d06:	881b      	ldrh	r3, [r3, #0]
 8003d08:	b29b      	uxth	r3, r3
 8003d0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d0e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d12:	b29c      	uxth	r4, r3
 8003d14:	687a      	ldr	r2, [r7, #4]
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	781b      	ldrb	r3, [r3, #0]
 8003d1a:	009b      	lsls	r3, r3, #2
 8003d1c:	441a      	add	r2, r3
 8003d1e:	4b52      	ldr	r3, [pc, #328]	; (8003e68 <USB_ActivateEndpoint+0x2e0>)
 8003d20:	4323      	orrs	r3, r4
 8003d22:	b29b      	uxth	r3, r3
 8003d24:	8013      	strh	r3, [r2, #0]
 8003d26:	e215      	b.n	8004154 <USB_ActivateEndpoint+0x5cc>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003d28:	687c      	ldr	r4, [r7, #4]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d30:	b29b      	uxth	r3, r3
 8003d32:	441c      	add	r4, r3
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	781b      	ldrb	r3, [r3, #0]
 8003d38:	011b      	lsls	r3, r3, #4
 8003d3a:	4423      	add	r3, r4
 8003d3c:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8003d40:	461c      	mov	r4, r3
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	88db      	ldrh	r3, [r3, #6]
 8003d46:	085b      	lsrs	r3, r3, #1
 8003d48:	b29b      	uxth	r3, r3
 8003d4a:	005b      	lsls	r3, r3, #1
 8003d4c:	b29b      	uxth	r3, r3
 8003d4e:	8023      	strh	r3, [r4, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8003d50:	687c      	ldr	r4, [r7, #4]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d58:	b29b      	uxth	r3, r3
 8003d5a:	441c      	add	r4, r3
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	781b      	ldrb	r3, [r3, #0]
 8003d60:	011b      	lsls	r3, r3, #4
 8003d62:	4423      	add	r3, r4
 8003d64:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003d68:	461c      	mov	r4, r3
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	691b      	ldr	r3, [r3, #16]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d10e      	bne.n	8003d90 <USB_ActivateEndpoint+0x208>
 8003d72:	8823      	ldrh	r3, [r4, #0]
 8003d74:	b29b      	uxth	r3, r3
 8003d76:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003d7a:	b29b      	uxth	r3, r3
 8003d7c:	8023      	strh	r3, [r4, #0]
 8003d7e:	8823      	ldrh	r3, [r4, #0]
 8003d80:	b29b      	uxth	r3, r3
 8003d82:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d86:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d8a:	b29b      	uxth	r3, r3
 8003d8c:	8023      	strh	r3, [r4, #0]
 8003d8e:	e02d      	b.n	8003dec <USB_ActivateEndpoint+0x264>
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	691b      	ldr	r3, [r3, #16]
 8003d94:	2b3e      	cmp	r3, #62	; 0x3e
 8003d96:	d812      	bhi.n	8003dbe <USB_ActivateEndpoint+0x236>
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	691b      	ldr	r3, [r3, #16]
 8003d9c:	085b      	lsrs	r3, r3, #1
 8003d9e:	60bb      	str	r3, [r7, #8]
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	691b      	ldr	r3, [r3, #16]
 8003da4:	f003 0301 	and.w	r3, r3, #1
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d002      	beq.n	8003db2 <USB_ActivateEndpoint+0x22a>
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	3301      	adds	r3, #1
 8003db0:	60bb      	str	r3, [r7, #8]
 8003db2:	68bb      	ldr	r3, [r7, #8]
 8003db4:	b29b      	uxth	r3, r3
 8003db6:	029b      	lsls	r3, r3, #10
 8003db8:	b29b      	uxth	r3, r3
 8003dba:	8023      	strh	r3, [r4, #0]
 8003dbc:	e016      	b.n	8003dec <USB_ActivateEndpoint+0x264>
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	691b      	ldr	r3, [r3, #16]
 8003dc2:	095b      	lsrs	r3, r3, #5
 8003dc4:	60bb      	str	r3, [r7, #8]
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	691b      	ldr	r3, [r3, #16]
 8003dca:	f003 031f 	and.w	r3, r3, #31
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d102      	bne.n	8003dd8 <USB_ActivateEndpoint+0x250>
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	3b01      	subs	r3, #1
 8003dd6:	60bb      	str	r3, [r7, #8]
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	b29b      	uxth	r3, r3
 8003ddc:	029b      	lsls	r3, r3, #10
 8003dde:	b29b      	uxth	r3, r3
 8003de0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003de4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003de8:	b29b      	uxth	r3, r3
 8003dea:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003dec:	687a      	ldr	r2, [r7, #4]
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	781b      	ldrb	r3, [r3, #0]
 8003df2:	009b      	lsls	r3, r3, #2
 8003df4:	4413      	add	r3, r2
 8003df6:	881b      	ldrh	r3, [r3, #0]
 8003df8:	b29c      	uxth	r4, r3
 8003dfa:	4623      	mov	r3, r4
 8003dfc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d014      	beq.n	8003e2e <USB_ActivateEndpoint+0x2a6>
 8003e04:	687a      	ldr	r2, [r7, #4]
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	781b      	ldrb	r3, [r3, #0]
 8003e0a:	009b      	lsls	r3, r3, #2
 8003e0c:	4413      	add	r3, r2
 8003e0e:	881b      	ldrh	r3, [r3, #0]
 8003e10:	b29b      	uxth	r3, r3
 8003e12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e1a:	b29c      	uxth	r4, r3
 8003e1c:	687a      	ldr	r2, [r7, #4]
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	781b      	ldrb	r3, [r3, #0]
 8003e22:	009b      	lsls	r3, r3, #2
 8003e24:	441a      	add	r2, r3
 8003e26:	4b12      	ldr	r3, [pc, #72]	; (8003e70 <USB_ActivateEndpoint+0x2e8>)
 8003e28:	4323      	orrs	r3, r4
 8003e2a:	b29b      	uxth	r3, r3
 8003e2c:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003e2e:	687a      	ldr	r2, [r7, #4]
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	781b      	ldrb	r3, [r3, #0]
 8003e34:	009b      	lsls	r3, r3, #2
 8003e36:	4413      	add	r3, r2
 8003e38:	881b      	ldrh	r3, [r3, #0]
 8003e3a:	b29b      	uxth	r3, r3
 8003e3c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003e40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e44:	b29c      	uxth	r4, r3
 8003e46:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8003e4a:	b29c      	uxth	r4, r3
 8003e4c:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8003e50:	b29c      	uxth	r4, r3
 8003e52:	687a      	ldr	r2, [r7, #4]
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	781b      	ldrb	r3, [r3, #0]
 8003e58:	009b      	lsls	r3, r3, #2
 8003e5a:	441a      	add	r2, r3
 8003e5c:	4b02      	ldr	r3, [pc, #8]	; (8003e68 <USB_ActivateEndpoint+0x2e0>)
 8003e5e:	4323      	orrs	r3, r4
 8003e60:	b29b      	uxth	r3, r3
 8003e62:	8013      	strh	r3, [r2, #0]
 8003e64:	e176      	b.n	8004154 <USB_ActivateEndpoint+0x5cc>
 8003e66:	bf00      	nop
 8003e68:	ffff8080 	.word	0xffff8080
 8003e6c:	ffff80c0 	.word	0xffff80c0
 8003e70:	ffffc080 	.word	0xffffc080
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8003e74:	687a      	ldr	r2, [r7, #4]
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	781b      	ldrb	r3, [r3, #0]
 8003e7a:	009b      	lsls	r3, r3, #2
 8003e7c:	4413      	add	r3, r2
 8003e7e:	881b      	ldrh	r3, [r3, #0]
 8003e80:	b29b      	uxth	r3, r3
 8003e82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e8a:	b29c      	uxth	r4, r3
 8003e8c:	687a      	ldr	r2, [r7, #4]
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	781b      	ldrb	r3, [r3, #0]
 8003e92:	009b      	lsls	r3, r3, #2
 8003e94:	441a      	add	r2, r3
 8003e96:	4b96      	ldr	r3, [pc, #600]	; (80040f0 <USB_ActivateEndpoint+0x568>)
 8003e98:	4323      	orrs	r3, r4
 8003e9a:	b29b      	uxth	r3, r3
 8003e9c:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8003e9e:	687c      	ldr	r4, [r7, #4]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ea6:	b29b      	uxth	r3, r3
 8003ea8:	441c      	add	r4, r3
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	781b      	ldrb	r3, [r3, #0]
 8003eae:	011b      	lsls	r3, r3, #4
 8003eb0:	4423      	add	r3, r4
 8003eb2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003eb6:	461c      	mov	r4, r3
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	891b      	ldrh	r3, [r3, #8]
 8003ebc:	085b      	lsrs	r3, r3, #1
 8003ebe:	b29b      	uxth	r3, r3
 8003ec0:	005b      	lsls	r3, r3, #1
 8003ec2:	b29b      	uxth	r3, r3
 8003ec4:	8023      	strh	r3, [r4, #0]
 8003ec6:	687c      	ldr	r4, [r7, #4]
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ece:	b29b      	uxth	r3, r3
 8003ed0:	441c      	add	r4, r3
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	781b      	ldrb	r3, [r3, #0]
 8003ed6:	011b      	lsls	r3, r3, #4
 8003ed8:	4423      	add	r3, r4
 8003eda:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8003ede:	461c      	mov	r4, r3
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	895b      	ldrh	r3, [r3, #10]
 8003ee4:	085b      	lsrs	r3, r3, #1
 8003ee6:	b29b      	uxth	r3, r3
 8003ee8:	005b      	lsls	r3, r3, #1
 8003eea:	b29b      	uxth	r3, r3
 8003eec:	8023      	strh	r3, [r4, #0]

    if (ep->is_in == 0U)
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	785b      	ldrb	r3, [r3, #1]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	f040 8088 	bne.w	8004008 <USB_ActivateEndpoint+0x480>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003ef8:	687a      	ldr	r2, [r7, #4]
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	781b      	ldrb	r3, [r3, #0]
 8003efe:	009b      	lsls	r3, r3, #2
 8003f00:	4413      	add	r3, r2
 8003f02:	881b      	ldrh	r3, [r3, #0]
 8003f04:	b29c      	uxth	r4, r3
 8003f06:	4623      	mov	r3, r4
 8003f08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d014      	beq.n	8003f3a <USB_ActivateEndpoint+0x3b2>
 8003f10:	687a      	ldr	r2, [r7, #4]
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	781b      	ldrb	r3, [r3, #0]
 8003f16:	009b      	lsls	r3, r3, #2
 8003f18:	4413      	add	r3, r2
 8003f1a:	881b      	ldrh	r3, [r3, #0]
 8003f1c:	b29b      	uxth	r3, r3
 8003f1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f26:	b29c      	uxth	r4, r3
 8003f28:	687a      	ldr	r2, [r7, #4]
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	781b      	ldrb	r3, [r3, #0]
 8003f2e:	009b      	lsls	r3, r3, #2
 8003f30:	441a      	add	r2, r3
 8003f32:	4b70      	ldr	r3, [pc, #448]	; (80040f4 <USB_ActivateEndpoint+0x56c>)
 8003f34:	4323      	orrs	r3, r4
 8003f36:	b29b      	uxth	r3, r3
 8003f38:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003f3a:	687a      	ldr	r2, [r7, #4]
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	781b      	ldrb	r3, [r3, #0]
 8003f40:	009b      	lsls	r3, r3, #2
 8003f42:	4413      	add	r3, r2
 8003f44:	881b      	ldrh	r3, [r3, #0]
 8003f46:	b29c      	uxth	r4, r3
 8003f48:	4623      	mov	r3, r4
 8003f4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d014      	beq.n	8003f7c <USB_ActivateEndpoint+0x3f4>
 8003f52:	687a      	ldr	r2, [r7, #4]
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	781b      	ldrb	r3, [r3, #0]
 8003f58:	009b      	lsls	r3, r3, #2
 8003f5a:	4413      	add	r3, r2
 8003f5c:	881b      	ldrh	r3, [r3, #0]
 8003f5e:	b29b      	uxth	r3, r3
 8003f60:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f68:	b29c      	uxth	r4, r3
 8003f6a:	687a      	ldr	r2, [r7, #4]
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	781b      	ldrb	r3, [r3, #0]
 8003f70:	009b      	lsls	r3, r3, #2
 8003f72:	441a      	add	r2, r3
 8003f74:	4b60      	ldr	r3, [pc, #384]	; (80040f8 <USB_ActivateEndpoint+0x570>)
 8003f76:	4323      	orrs	r3, r4
 8003f78:	b29b      	uxth	r3, r3
 8003f7a:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out */
      PCD_TX_DTOG(USBx, ep->num);
 8003f7c:	687a      	ldr	r2, [r7, #4]
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	781b      	ldrb	r3, [r3, #0]
 8003f82:	009b      	lsls	r3, r3, #2
 8003f84:	4413      	add	r3, r2
 8003f86:	881b      	ldrh	r3, [r3, #0]
 8003f88:	b29b      	uxth	r3, r3
 8003f8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f92:	b29c      	uxth	r4, r3
 8003f94:	687a      	ldr	r2, [r7, #4]
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	781b      	ldrb	r3, [r3, #0]
 8003f9a:	009b      	lsls	r3, r3, #2
 8003f9c:	441a      	add	r2, r3
 8003f9e:	4b56      	ldr	r3, [pc, #344]	; (80040f8 <USB_ActivateEndpoint+0x570>)
 8003fa0:	4323      	orrs	r3, r4
 8003fa2:	b29b      	uxth	r3, r3
 8003fa4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003fa6:	687a      	ldr	r2, [r7, #4]
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	781b      	ldrb	r3, [r3, #0]
 8003fac:	009b      	lsls	r3, r3, #2
 8003fae:	4413      	add	r3, r2
 8003fb0:	881b      	ldrh	r3, [r3, #0]
 8003fb2:	b29b      	uxth	r3, r3
 8003fb4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003fb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fbc:	b29c      	uxth	r4, r3
 8003fbe:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8003fc2:	b29c      	uxth	r4, r3
 8003fc4:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8003fc8:	b29c      	uxth	r4, r3
 8003fca:	687a      	ldr	r2, [r7, #4]
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	781b      	ldrb	r3, [r3, #0]
 8003fd0:	009b      	lsls	r3, r3, #2
 8003fd2:	441a      	add	r2, r3
 8003fd4:	4b49      	ldr	r3, [pc, #292]	; (80040fc <USB_ActivateEndpoint+0x574>)
 8003fd6:	4323      	orrs	r3, r4
 8003fd8:	b29b      	uxth	r3, r3
 8003fda:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003fdc:	687a      	ldr	r2, [r7, #4]
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	781b      	ldrb	r3, [r3, #0]
 8003fe2:	009b      	lsls	r3, r3, #2
 8003fe4:	4413      	add	r3, r2
 8003fe6:	881b      	ldrh	r3, [r3, #0]
 8003fe8:	b29b      	uxth	r3, r3
 8003fea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003fee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ff2:	b29c      	uxth	r4, r3
 8003ff4:	687a      	ldr	r2, [r7, #4]
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	781b      	ldrb	r3, [r3, #0]
 8003ffa:	009b      	lsls	r3, r3, #2
 8003ffc:	441a      	add	r2, r3
 8003ffe:	4b3f      	ldr	r3, [pc, #252]	; (80040fc <USB_ActivateEndpoint+0x574>)
 8004000:	4323      	orrs	r3, r4
 8004002:	b29b      	uxth	r3, r3
 8004004:	8013      	strh	r3, [r2, #0]
 8004006:	e0a5      	b.n	8004154 <USB_ActivateEndpoint+0x5cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004008:	687a      	ldr	r2, [r7, #4]
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	781b      	ldrb	r3, [r3, #0]
 800400e:	009b      	lsls	r3, r3, #2
 8004010:	4413      	add	r3, r2
 8004012:	881b      	ldrh	r3, [r3, #0]
 8004014:	b29c      	uxth	r4, r3
 8004016:	4623      	mov	r3, r4
 8004018:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800401c:	2b00      	cmp	r3, #0
 800401e:	d014      	beq.n	800404a <USB_ActivateEndpoint+0x4c2>
 8004020:	687a      	ldr	r2, [r7, #4]
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	781b      	ldrb	r3, [r3, #0]
 8004026:	009b      	lsls	r3, r3, #2
 8004028:	4413      	add	r3, r2
 800402a:	881b      	ldrh	r3, [r3, #0]
 800402c:	b29b      	uxth	r3, r3
 800402e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004032:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004036:	b29c      	uxth	r4, r3
 8004038:	687a      	ldr	r2, [r7, #4]
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	781b      	ldrb	r3, [r3, #0]
 800403e:	009b      	lsls	r3, r3, #2
 8004040:	441a      	add	r2, r3
 8004042:	4b2c      	ldr	r3, [pc, #176]	; (80040f4 <USB_ActivateEndpoint+0x56c>)
 8004044:	4323      	orrs	r3, r4
 8004046:	b29b      	uxth	r3, r3
 8004048:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800404a:	687a      	ldr	r2, [r7, #4]
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	781b      	ldrb	r3, [r3, #0]
 8004050:	009b      	lsls	r3, r3, #2
 8004052:	4413      	add	r3, r2
 8004054:	881b      	ldrh	r3, [r3, #0]
 8004056:	b29c      	uxth	r4, r3
 8004058:	4623      	mov	r3, r4
 800405a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800405e:	2b00      	cmp	r3, #0
 8004060:	d014      	beq.n	800408c <USB_ActivateEndpoint+0x504>
 8004062:	687a      	ldr	r2, [r7, #4]
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	781b      	ldrb	r3, [r3, #0]
 8004068:	009b      	lsls	r3, r3, #2
 800406a:	4413      	add	r3, r2
 800406c:	881b      	ldrh	r3, [r3, #0]
 800406e:	b29b      	uxth	r3, r3
 8004070:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004074:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004078:	b29c      	uxth	r4, r3
 800407a:	687a      	ldr	r2, [r7, #4]
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	781b      	ldrb	r3, [r3, #0]
 8004080:	009b      	lsls	r3, r3, #2
 8004082:	441a      	add	r2, r3
 8004084:	4b1c      	ldr	r3, [pc, #112]	; (80040f8 <USB_ActivateEndpoint+0x570>)
 8004086:	4323      	orrs	r3, r4
 8004088:	b29b      	uxth	r3, r3
 800408a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800408c:	687a      	ldr	r2, [r7, #4]
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	781b      	ldrb	r3, [r3, #0]
 8004092:	009b      	lsls	r3, r3, #2
 8004094:	4413      	add	r3, r2
 8004096:	881b      	ldrh	r3, [r3, #0]
 8004098:	b29b      	uxth	r3, r3
 800409a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800409e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040a2:	b29c      	uxth	r4, r3
 80040a4:	687a      	ldr	r2, [r7, #4]
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	781b      	ldrb	r3, [r3, #0]
 80040aa:	009b      	lsls	r3, r3, #2
 80040ac:	441a      	add	r2, r3
 80040ae:	4b11      	ldr	r3, [pc, #68]	; (80040f4 <USB_ActivateEndpoint+0x56c>)
 80040b0:	4323      	orrs	r3, r4
 80040b2:	b29b      	uxth	r3, r3
 80040b4:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	78db      	ldrb	r3, [r3, #3]
 80040ba:	2b01      	cmp	r3, #1
 80040bc:	d020      	beq.n	8004100 <USB_ActivateEndpoint+0x578>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80040be:	687a      	ldr	r2, [r7, #4]
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	781b      	ldrb	r3, [r3, #0]
 80040c4:	009b      	lsls	r3, r3, #2
 80040c6:	4413      	add	r3, r2
 80040c8:	881b      	ldrh	r3, [r3, #0]
 80040ca:	b29b      	uxth	r3, r3
 80040cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80040d4:	b29c      	uxth	r4, r3
 80040d6:	f084 0320 	eor.w	r3, r4, #32
 80040da:	b29c      	uxth	r4, r3
 80040dc:	687a      	ldr	r2, [r7, #4]
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	781b      	ldrb	r3, [r3, #0]
 80040e2:	009b      	lsls	r3, r3, #2
 80040e4:	441a      	add	r2, r3
 80040e6:	4b05      	ldr	r3, [pc, #20]	; (80040fc <USB_ActivateEndpoint+0x574>)
 80040e8:	4323      	orrs	r3, r4
 80040ea:	b29b      	uxth	r3, r3
 80040ec:	8013      	strh	r3, [r2, #0]
 80040ee:	e01c      	b.n	800412a <USB_ActivateEndpoint+0x5a2>
 80040f0:	ffff8180 	.word	0xffff8180
 80040f4:	ffffc080 	.word	0xffffc080
 80040f8:	ffff80c0 	.word	0xffff80c0
 80040fc:	ffff8080 	.word	0xffff8080
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004100:	687a      	ldr	r2, [r7, #4]
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	781b      	ldrb	r3, [r3, #0]
 8004106:	009b      	lsls	r3, r3, #2
 8004108:	4413      	add	r3, r2
 800410a:	881b      	ldrh	r3, [r3, #0]
 800410c:	b29b      	uxth	r3, r3
 800410e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004112:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004116:	b29c      	uxth	r4, r3
 8004118:	687a      	ldr	r2, [r7, #4]
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	781b      	ldrb	r3, [r3, #0]
 800411e:	009b      	lsls	r3, r3, #2
 8004120:	441a      	add	r2, r3
 8004122:	4b0f      	ldr	r3, [pc, #60]	; (8004160 <USB_ActivateEndpoint+0x5d8>)
 8004124:	4323      	orrs	r3, r4
 8004126:	b29b      	uxth	r3, r3
 8004128:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800412a:	687a      	ldr	r2, [r7, #4]
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	781b      	ldrb	r3, [r3, #0]
 8004130:	009b      	lsls	r3, r3, #2
 8004132:	4413      	add	r3, r2
 8004134:	881b      	ldrh	r3, [r3, #0]
 8004136:	b29b      	uxth	r3, r3
 8004138:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800413c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004140:	b29c      	uxth	r4, r3
 8004142:	687a      	ldr	r2, [r7, #4]
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	781b      	ldrb	r3, [r3, #0]
 8004148:	009b      	lsls	r3, r3, #2
 800414a:	441a      	add	r2, r3
 800414c:	4b04      	ldr	r3, [pc, #16]	; (8004160 <USB_ActivateEndpoint+0x5d8>)
 800414e:	4323      	orrs	r3, r4
 8004150:	b29b      	uxth	r3, r3
 8004152:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8004154:	7bfb      	ldrb	r3, [r7, #15]
}
 8004156:	4618      	mov	r0, r3
 8004158:	3710      	adds	r7, #16
 800415a:	46bd      	mov	sp, r7
 800415c:	bc90      	pop	{r4, r7}
 800415e:	4770      	bx	lr
 8004160:	ffff8080 	.word	0xffff8080

08004164 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004164:	b490      	push	{r4, r7}
 8004166:	b082      	sub	sp, #8
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
 800416c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	7b1b      	ldrb	r3, [r3, #12]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d171      	bne.n	800425a <USB_DeactivateEndpoint+0xf6>
  {
    if (ep->is_in != 0U)
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	785b      	ldrb	r3, [r3, #1]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d036      	beq.n	80041ec <USB_DeactivateEndpoint+0x88>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800417e:	687a      	ldr	r2, [r7, #4]
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	781b      	ldrb	r3, [r3, #0]
 8004184:	009b      	lsls	r3, r3, #2
 8004186:	4413      	add	r3, r2
 8004188:	881b      	ldrh	r3, [r3, #0]
 800418a:	b29c      	uxth	r4, r3
 800418c:	4623      	mov	r3, r4
 800418e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004192:	2b00      	cmp	r3, #0
 8004194:	d014      	beq.n	80041c0 <USB_DeactivateEndpoint+0x5c>
 8004196:	687a      	ldr	r2, [r7, #4]
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	781b      	ldrb	r3, [r3, #0]
 800419c:	009b      	lsls	r3, r3, #2
 800419e:	4413      	add	r3, r2
 80041a0:	881b      	ldrh	r3, [r3, #0]
 80041a2:	b29b      	uxth	r3, r3
 80041a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041ac:	b29c      	uxth	r4, r3
 80041ae:	687a      	ldr	r2, [r7, #4]
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	781b      	ldrb	r3, [r3, #0]
 80041b4:	009b      	lsls	r3, r3, #2
 80041b6:	441a      	add	r2, r3
 80041b8:	4b6b      	ldr	r3, [pc, #428]	; (8004368 <USB_DeactivateEndpoint+0x204>)
 80041ba:	4323      	orrs	r3, r4
 80041bc:	b29b      	uxth	r3, r3
 80041be:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80041c0:	687a      	ldr	r2, [r7, #4]
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	781b      	ldrb	r3, [r3, #0]
 80041c6:	009b      	lsls	r3, r3, #2
 80041c8:	4413      	add	r3, r2
 80041ca:	881b      	ldrh	r3, [r3, #0]
 80041cc:	b29b      	uxth	r3, r3
 80041ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80041d6:	b29c      	uxth	r4, r3
 80041d8:	687a      	ldr	r2, [r7, #4]
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	781b      	ldrb	r3, [r3, #0]
 80041de:	009b      	lsls	r3, r3, #2
 80041e0:	441a      	add	r2, r3
 80041e2:	4b62      	ldr	r3, [pc, #392]	; (800436c <USB_DeactivateEndpoint+0x208>)
 80041e4:	4323      	orrs	r3, r4
 80041e6:	b29b      	uxth	r3, r3
 80041e8:	8013      	strh	r3, [r2, #0]
 80041ea:	e144      	b.n	8004476 <USB_DeactivateEndpoint+0x312>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80041ec:	687a      	ldr	r2, [r7, #4]
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	781b      	ldrb	r3, [r3, #0]
 80041f2:	009b      	lsls	r3, r3, #2
 80041f4:	4413      	add	r3, r2
 80041f6:	881b      	ldrh	r3, [r3, #0]
 80041f8:	b29c      	uxth	r4, r3
 80041fa:	4623      	mov	r3, r4
 80041fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004200:	2b00      	cmp	r3, #0
 8004202:	d014      	beq.n	800422e <USB_DeactivateEndpoint+0xca>
 8004204:	687a      	ldr	r2, [r7, #4]
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	781b      	ldrb	r3, [r3, #0]
 800420a:	009b      	lsls	r3, r3, #2
 800420c:	4413      	add	r3, r2
 800420e:	881b      	ldrh	r3, [r3, #0]
 8004210:	b29b      	uxth	r3, r3
 8004212:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004216:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800421a:	b29c      	uxth	r4, r3
 800421c:	687a      	ldr	r2, [r7, #4]
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	781b      	ldrb	r3, [r3, #0]
 8004222:	009b      	lsls	r3, r3, #2
 8004224:	441a      	add	r2, r3
 8004226:	4b52      	ldr	r3, [pc, #328]	; (8004370 <USB_DeactivateEndpoint+0x20c>)
 8004228:	4323      	orrs	r3, r4
 800422a:	b29b      	uxth	r3, r3
 800422c:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800422e:	687a      	ldr	r2, [r7, #4]
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	781b      	ldrb	r3, [r3, #0]
 8004234:	009b      	lsls	r3, r3, #2
 8004236:	4413      	add	r3, r2
 8004238:	881b      	ldrh	r3, [r3, #0]
 800423a:	b29b      	uxth	r3, r3
 800423c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004240:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004244:	b29c      	uxth	r4, r3
 8004246:	687a      	ldr	r2, [r7, #4]
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	781b      	ldrb	r3, [r3, #0]
 800424c:	009b      	lsls	r3, r3, #2
 800424e:	441a      	add	r2, r3
 8004250:	4b46      	ldr	r3, [pc, #280]	; (800436c <USB_DeactivateEndpoint+0x208>)
 8004252:	4323      	orrs	r3, r4
 8004254:	b29b      	uxth	r3, r3
 8004256:	8013      	strh	r3, [r2, #0]
 8004258:	e10d      	b.n	8004476 <USB_DeactivateEndpoint+0x312>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	785b      	ldrb	r3, [r3, #1]
 800425e:	2b00      	cmp	r3, #0
 8004260:	f040 8088 	bne.w	8004374 <USB_DeactivateEndpoint+0x210>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004264:	687a      	ldr	r2, [r7, #4]
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	781b      	ldrb	r3, [r3, #0]
 800426a:	009b      	lsls	r3, r3, #2
 800426c:	4413      	add	r3, r2
 800426e:	881b      	ldrh	r3, [r3, #0]
 8004270:	b29c      	uxth	r4, r3
 8004272:	4623      	mov	r3, r4
 8004274:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004278:	2b00      	cmp	r3, #0
 800427a:	d014      	beq.n	80042a6 <USB_DeactivateEndpoint+0x142>
 800427c:	687a      	ldr	r2, [r7, #4]
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	781b      	ldrb	r3, [r3, #0]
 8004282:	009b      	lsls	r3, r3, #2
 8004284:	4413      	add	r3, r2
 8004286:	881b      	ldrh	r3, [r3, #0]
 8004288:	b29b      	uxth	r3, r3
 800428a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800428e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004292:	b29c      	uxth	r4, r3
 8004294:	687a      	ldr	r2, [r7, #4]
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	781b      	ldrb	r3, [r3, #0]
 800429a:	009b      	lsls	r3, r3, #2
 800429c:	441a      	add	r2, r3
 800429e:	4b34      	ldr	r3, [pc, #208]	; (8004370 <USB_DeactivateEndpoint+0x20c>)
 80042a0:	4323      	orrs	r3, r4
 80042a2:	b29b      	uxth	r3, r3
 80042a4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80042a6:	687a      	ldr	r2, [r7, #4]
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	781b      	ldrb	r3, [r3, #0]
 80042ac:	009b      	lsls	r3, r3, #2
 80042ae:	4413      	add	r3, r2
 80042b0:	881b      	ldrh	r3, [r3, #0]
 80042b2:	b29c      	uxth	r4, r3
 80042b4:	4623      	mov	r3, r4
 80042b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d014      	beq.n	80042e8 <USB_DeactivateEndpoint+0x184>
 80042be:	687a      	ldr	r2, [r7, #4]
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	781b      	ldrb	r3, [r3, #0]
 80042c4:	009b      	lsls	r3, r3, #2
 80042c6:	4413      	add	r3, r2
 80042c8:	881b      	ldrh	r3, [r3, #0]
 80042ca:	b29b      	uxth	r3, r3
 80042cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042d4:	b29c      	uxth	r4, r3
 80042d6:	687a      	ldr	r2, [r7, #4]
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	781b      	ldrb	r3, [r3, #0]
 80042dc:	009b      	lsls	r3, r3, #2
 80042de:	441a      	add	r2, r3
 80042e0:	4b21      	ldr	r3, [pc, #132]	; (8004368 <USB_DeactivateEndpoint+0x204>)
 80042e2:	4323      	orrs	r3, r4
 80042e4:	b29b      	uxth	r3, r3
 80042e6:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80042e8:	687a      	ldr	r2, [r7, #4]
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	781b      	ldrb	r3, [r3, #0]
 80042ee:	009b      	lsls	r3, r3, #2
 80042f0:	4413      	add	r3, r2
 80042f2:	881b      	ldrh	r3, [r3, #0]
 80042f4:	b29b      	uxth	r3, r3
 80042f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042fe:	b29c      	uxth	r4, r3
 8004300:	687a      	ldr	r2, [r7, #4]
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	781b      	ldrb	r3, [r3, #0]
 8004306:	009b      	lsls	r3, r3, #2
 8004308:	441a      	add	r2, r3
 800430a:	4b17      	ldr	r3, [pc, #92]	; (8004368 <USB_DeactivateEndpoint+0x204>)
 800430c:	4323      	orrs	r3, r4
 800430e:	b29b      	uxth	r3, r3
 8004310:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004312:	687a      	ldr	r2, [r7, #4]
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	781b      	ldrb	r3, [r3, #0]
 8004318:	009b      	lsls	r3, r3, #2
 800431a:	4413      	add	r3, r2
 800431c:	881b      	ldrh	r3, [r3, #0]
 800431e:	b29b      	uxth	r3, r3
 8004320:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004324:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004328:	b29c      	uxth	r4, r3
 800432a:	687a      	ldr	r2, [r7, #4]
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	781b      	ldrb	r3, [r3, #0]
 8004330:	009b      	lsls	r3, r3, #2
 8004332:	441a      	add	r2, r3
 8004334:	4b0d      	ldr	r3, [pc, #52]	; (800436c <USB_DeactivateEndpoint+0x208>)
 8004336:	4323      	orrs	r3, r4
 8004338:	b29b      	uxth	r3, r3
 800433a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800433c:	687a      	ldr	r2, [r7, #4]
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	781b      	ldrb	r3, [r3, #0]
 8004342:	009b      	lsls	r3, r3, #2
 8004344:	4413      	add	r3, r2
 8004346:	881b      	ldrh	r3, [r3, #0]
 8004348:	b29b      	uxth	r3, r3
 800434a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800434e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004352:	b29c      	uxth	r4, r3
 8004354:	687a      	ldr	r2, [r7, #4]
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	781b      	ldrb	r3, [r3, #0]
 800435a:	009b      	lsls	r3, r3, #2
 800435c:	441a      	add	r2, r3
 800435e:	4b03      	ldr	r3, [pc, #12]	; (800436c <USB_DeactivateEndpoint+0x208>)
 8004360:	4323      	orrs	r3, r4
 8004362:	b29b      	uxth	r3, r3
 8004364:	8013      	strh	r3, [r2, #0]
 8004366:	e086      	b.n	8004476 <USB_DeactivateEndpoint+0x312>
 8004368:	ffff80c0 	.word	0xffff80c0
 800436c:	ffff8080 	.word	0xffff8080
 8004370:	ffffc080 	.word	0xffffc080
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004374:	687a      	ldr	r2, [r7, #4]
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	781b      	ldrb	r3, [r3, #0]
 800437a:	009b      	lsls	r3, r3, #2
 800437c:	4413      	add	r3, r2
 800437e:	881b      	ldrh	r3, [r3, #0]
 8004380:	b29c      	uxth	r4, r3
 8004382:	4623      	mov	r3, r4
 8004384:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004388:	2b00      	cmp	r3, #0
 800438a:	d014      	beq.n	80043b6 <USB_DeactivateEndpoint+0x252>
 800438c:	687a      	ldr	r2, [r7, #4]
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	781b      	ldrb	r3, [r3, #0]
 8004392:	009b      	lsls	r3, r3, #2
 8004394:	4413      	add	r3, r2
 8004396:	881b      	ldrh	r3, [r3, #0]
 8004398:	b29b      	uxth	r3, r3
 800439a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800439e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043a2:	b29c      	uxth	r4, r3
 80043a4:	687a      	ldr	r2, [r7, #4]
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	781b      	ldrb	r3, [r3, #0]
 80043aa:	009b      	lsls	r3, r3, #2
 80043ac:	441a      	add	r2, r3
 80043ae:	4b35      	ldr	r3, [pc, #212]	; (8004484 <USB_DeactivateEndpoint+0x320>)
 80043b0:	4323      	orrs	r3, r4
 80043b2:	b29b      	uxth	r3, r3
 80043b4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80043b6:	687a      	ldr	r2, [r7, #4]
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	781b      	ldrb	r3, [r3, #0]
 80043bc:	009b      	lsls	r3, r3, #2
 80043be:	4413      	add	r3, r2
 80043c0:	881b      	ldrh	r3, [r3, #0]
 80043c2:	b29c      	uxth	r4, r3
 80043c4:	4623      	mov	r3, r4
 80043c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d014      	beq.n	80043f8 <USB_DeactivateEndpoint+0x294>
 80043ce:	687a      	ldr	r2, [r7, #4]
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	781b      	ldrb	r3, [r3, #0]
 80043d4:	009b      	lsls	r3, r3, #2
 80043d6:	4413      	add	r3, r2
 80043d8:	881b      	ldrh	r3, [r3, #0]
 80043da:	b29b      	uxth	r3, r3
 80043dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043e4:	b29c      	uxth	r4, r3
 80043e6:	687a      	ldr	r2, [r7, #4]
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	781b      	ldrb	r3, [r3, #0]
 80043ec:	009b      	lsls	r3, r3, #2
 80043ee:	441a      	add	r2, r3
 80043f0:	4b25      	ldr	r3, [pc, #148]	; (8004488 <USB_DeactivateEndpoint+0x324>)
 80043f2:	4323      	orrs	r3, r4
 80043f4:	b29b      	uxth	r3, r3
 80043f6:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80043f8:	687a      	ldr	r2, [r7, #4]
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	781b      	ldrb	r3, [r3, #0]
 80043fe:	009b      	lsls	r3, r3, #2
 8004400:	4413      	add	r3, r2
 8004402:	881b      	ldrh	r3, [r3, #0]
 8004404:	b29b      	uxth	r3, r3
 8004406:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800440a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800440e:	b29c      	uxth	r4, r3
 8004410:	687a      	ldr	r2, [r7, #4]
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	781b      	ldrb	r3, [r3, #0]
 8004416:	009b      	lsls	r3, r3, #2
 8004418:	441a      	add	r2, r3
 800441a:	4b1a      	ldr	r3, [pc, #104]	; (8004484 <USB_DeactivateEndpoint+0x320>)
 800441c:	4323      	orrs	r3, r4
 800441e:	b29b      	uxth	r3, r3
 8004420:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004422:	687a      	ldr	r2, [r7, #4]
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	781b      	ldrb	r3, [r3, #0]
 8004428:	009b      	lsls	r3, r3, #2
 800442a:	4413      	add	r3, r2
 800442c:	881b      	ldrh	r3, [r3, #0]
 800442e:	b29b      	uxth	r3, r3
 8004430:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004434:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004438:	b29c      	uxth	r4, r3
 800443a:	687a      	ldr	r2, [r7, #4]
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	781b      	ldrb	r3, [r3, #0]
 8004440:	009b      	lsls	r3, r3, #2
 8004442:	441a      	add	r2, r3
 8004444:	4b11      	ldr	r3, [pc, #68]	; (800448c <USB_DeactivateEndpoint+0x328>)
 8004446:	4323      	orrs	r3, r4
 8004448:	b29b      	uxth	r3, r3
 800444a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800444c:	687a      	ldr	r2, [r7, #4]
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	781b      	ldrb	r3, [r3, #0]
 8004452:	009b      	lsls	r3, r3, #2
 8004454:	4413      	add	r3, r2
 8004456:	881b      	ldrh	r3, [r3, #0]
 8004458:	b29b      	uxth	r3, r3
 800445a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800445e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004462:	b29c      	uxth	r4, r3
 8004464:	687a      	ldr	r2, [r7, #4]
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	781b      	ldrb	r3, [r3, #0]
 800446a:	009b      	lsls	r3, r3, #2
 800446c:	441a      	add	r2, r3
 800446e:	4b07      	ldr	r3, [pc, #28]	; (800448c <USB_DeactivateEndpoint+0x328>)
 8004470:	4323      	orrs	r3, r4
 8004472:	b29b      	uxth	r3, r3
 8004474:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8004476:	2300      	movs	r3, #0
}
 8004478:	4618      	mov	r0, r3
 800447a:	3708      	adds	r7, #8
 800447c:	46bd      	mov	sp, r7
 800447e:	bc90      	pop	{r4, r7}
 8004480:	4770      	bx	lr
 8004482:	bf00      	nop
 8004484:	ffffc080 	.word	0xffffc080
 8004488:	ffff80c0 	.word	0xffff80c0
 800448c:	ffff8080 	.word	0xffff8080

08004490 <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004490:	b590      	push	{r4, r7, lr}
 8004492:	b08d      	sub	sp, #52	; 0x34
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
 8004498:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint32_t len;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	785b      	ldrb	r3, [r3, #1]
 800449e:	2b01      	cmp	r3, #1
 80044a0:	f040 8160 	bne.w	8004764 <USB_EPStartXfer+0x2d4>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	699a      	ldr	r2, [r3, #24]
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	691b      	ldr	r3, [r3, #16]
 80044ac:	429a      	cmp	r2, r3
 80044ae:	d909      	bls.n	80044c4 <USB_EPStartXfer+0x34>
    {
      len = ep->maxpacket;
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	691b      	ldr	r3, [r3, #16]
 80044b4:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	699a      	ldr	r2, [r3, #24]
 80044ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044bc:	1ad2      	subs	r2, r2, r3
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	619a      	str	r2, [r3, #24]
 80044c2:	e005      	b.n	80044d0 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	699b      	ldr	r3, [r3, #24]
 80044c8:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	2200      	movs	r2, #0
 80044ce:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	7b1b      	ldrb	r3, [r3, #12]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d119      	bne.n	800450c <USB_EPStartXfer+0x7c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	6959      	ldr	r1, [r3, #20]
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	88da      	ldrh	r2, [r3, #6]
 80044e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044e2:	b29b      	uxth	r3, r3
 80044e4:	6878      	ldr	r0, [r7, #4]
 80044e6:	f000 fba2 	bl	8004c2e <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80044ea:	687c      	ldr	r4, [r7, #4]
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80044f2:	b29b      	uxth	r3, r3
 80044f4:	441c      	add	r4, r3
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	781b      	ldrb	r3, [r3, #0]
 80044fa:	011b      	lsls	r3, r3, #4
 80044fc:	4423      	add	r3, r4
 80044fe:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004502:	461c      	mov	r4, r3
 8004504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004506:	b29b      	uxth	r3, r3
 8004508:	8023      	strh	r3, [r4, #0]
 800450a:	e10f      	b.n	800472c <USB_EPStartXfer+0x29c>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800450c:	687a      	ldr	r2, [r7, #4]
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	781b      	ldrb	r3, [r3, #0]
 8004512:	009b      	lsls	r3, r3, #2
 8004514:	4413      	add	r3, r2
 8004516:	881b      	ldrh	r3, [r3, #0]
 8004518:	b29b      	uxth	r3, r3
 800451a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800451e:	2b00      	cmp	r3, #0
 8004520:	d065      	beq.n	80045ee <USB_EPStartXfer+0x15e>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004522:	687c      	ldr	r4, [r7, #4]
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	785b      	ldrb	r3, [r3, #1]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d148      	bne.n	80045be <USB_EPStartXfer+0x12e>
 800452c:	687c      	ldr	r4, [r7, #4]
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004534:	b29b      	uxth	r3, r3
 8004536:	441c      	add	r4, r3
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	781b      	ldrb	r3, [r3, #0]
 800453c:	011b      	lsls	r3, r3, #4
 800453e:	4423      	add	r3, r4
 8004540:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004544:	461c      	mov	r4, r3
 8004546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004548:	2b00      	cmp	r3, #0
 800454a:	d10e      	bne.n	800456a <USB_EPStartXfer+0xda>
 800454c:	8823      	ldrh	r3, [r4, #0]
 800454e:	b29b      	uxth	r3, r3
 8004550:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004554:	b29b      	uxth	r3, r3
 8004556:	8023      	strh	r3, [r4, #0]
 8004558:	8823      	ldrh	r3, [r4, #0]
 800455a:	b29b      	uxth	r3, r3
 800455c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004560:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004564:	b29b      	uxth	r3, r3
 8004566:	8023      	strh	r3, [r4, #0]
 8004568:	e03d      	b.n	80045e6 <USB_EPStartXfer+0x156>
 800456a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800456c:	2b3e      	cmp	r3, #62	; 0x3e
 800456e:	d810      	bhi.n	8004592 <USB_EPStartXfer+0x102>
 8004570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004572:	085b      	lsrs	r3, r3, #1
 8004574:	627b      	str	r3, [r7, #36]	; 0x24
 8004576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004578:	f003 0301 	and.w	r3, r3, #1
 800457c:	2b00      	cmp	r3, #0
 800457e:	d002      	beq.n	8004586 <USB_EPStartXfer+0xf6>
 8004580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004582:	3301      	adds	r3, #1
 8004584:	627b      	str	r3, [r7, #36]	; 0x24
 8004586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004588:	b29b      	uxth	r3, r3
 800458a:	029b      	lsls	r3, r3, #10
 800458c:	b29b      	uxth	r3, r3
 800458e:	8023      	strh	r3, [r4, #0]
 8004590:	e029      	b.n	80045e6 <USB_EPStartXfer+0x156>
 8004592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004594:	095b      	lsrs	r3, r3, #5
 8004596:	627b      	str	r3, [r7, #36]	; 0x24
 8004598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800459a:	f003 031f 	and.w	r3, r3, #31
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d102      	bne.n	80045a8 <USB_EPStartXfer+0x118>
 80045a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a4:	3b01      	subs	r3, #1
 80045a6:	627b      	str	r3, [r7, #36]	; 0x24
 80045a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045aa:	b29b      	uxth	r3, r3
 80045ac:	029b      	lsls	r3, r3, #10
 80045ae:	b29b      	uxth	r3, r3
 80045b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80045b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80045b8:	b29b      	uxth	r3, r3
 80045ba:	8023      	strh	r3, [r4, #0]
 80045bc:	e013      	b.n	80045e6 <USB_EPStartXfer+0x156>
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	785b      	ldrb	r3, [r3, #1]
 80045c2:	2b01      	cmp	r3, #1
 80045c4:	d10f      	bne.n	80045e6 <USB_EPStartXfer+0x156>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80045cc:	b29b      	uxth	r3, r3
 80045ce:	441c      	add	r4, r3
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	781b      	ldrb	r3, [r3, #0]
 80045d4:	011b      	lsls	r3, r3, #4
 80045d6:	4423      	add	r3, r4
 80045d8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80045dc:	60fb      	str	r3, [r7, #12]
 80045de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045e0:	b29a      	uxth	r2, r3
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr1;
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	895b      	ldrh	r3, [r3, #10]
 80045ea:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80045ec:	e063      	b.n	80046b6 <USB_EPStartXfer+0x226>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	785b      	ldrb	r3, [r3, #1]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d148      	bne.n	8004688 <USB_EPStartXfer+0x1f8>
 80045f6:	687c      	ldr	r4, [r7, #4]
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80045fe:	b29b      	uxth	r3, r3
 8004600:	441c      	add	r4, r3
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	781b      	ldrb	r3, [r3, #0]
 8004606:	011b      	lsls	r3, r3, #4
 8004608:	4423      	add	r3, r4
 800460a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800460e:	461c      	mov	r4, r3
 8004610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004612:	2b00      	cmp	r3, #0
 8004614:	d10e      	bne.n	8004634 <USB_EPStartXfer+0x1a4>
 8004616:	8823      	ldrh	r3, [r4, #0]
 8004618:	b29b      	uxth	r3, r3
 800461a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800461e:	b29b      	uxth	r3, r3
 8004620:	8023      	strh	r3, [r4, #0]
 8004622:	8823      	ldrh	r3, [r4, #0]
 8004624:	b29b      	uxth	r3, r3
 8004626:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800462a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800462e:	b29b      	uxth	r3, r3
 8004630:	8023      	strh	r3, [r4, #0]
 8004632:	e03d      	b.n	80046b0 <USB_EPStartXfer+0x220>
 8004634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004636:	2b3e      	cmp	r3, #62	; 0x3e
 8004638:	d810      	bhi.n	800465c <USB_EPStartXfer+0x1cc>
 800463a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800463c:	085b      	lsrs	r3, r3, #1
 800463e:	623b      	str	r3, [r7, #32]
 8004640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004642:	f003 0301 	and.w	r3, r3, #1
 8004646:	2b00      	cmp	r3, #0
 8004648:	d002      	beq.n	8004650 <USB_EPStartXfer+0x1c0>
 800464a:	6a3b      	ldr	r3, [r7, #32]
 800464c:	3301      	adds	r3, #1
 800464e:	623b      	str	r3, [r7, #32]
 8004650:	6a3b      	ldr	r3, [r7, #32]
 8004652:	b29b      	uxth	r3, r3
 8004654:	029b      	lsls	r3, r3, #10
 8004656:	b29b      	uxth	r3, r3
 8004658:	8023      	strh	r3, [r4, #0]
 800465a:	e029      	b.n	80046b0 <USB_EPStartXfer+0x220>
 800465c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800465e:	095b      	lsrs	r3, r3, #5
 8004660:	623b      	str	r3, [r7, #32]
 8004662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004664:	f003 031f 	and.w	r3, r3, #31
 8004668:	2b00      	cmp	r3, #0
 800466a:	d102      	bne.n	8004672 <USB_EPStartXfer+0x1e2>
 800466c:	6a3b      	ldr	r3, [r7, #32]
 800466e:	3b01      	subs	r3, #1
 8004670:	623b      	str	r3, [r7, #32]
 8004672:	6a3b      	ldr	r3, [r7, #32]
 8004674:	b29b      	uxth	r3, r3
 8004676:	029b      	lsls	r3, r3, #10
 8004678:	b29b      	uxth	r3, r3
 800467a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800467e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004682:	b29b      	uxth	r3, r3
 8004684:	8023      	strh	r3, [r4, #0]
 8004686:	e013      	b.n	80046b0 <USB_EPStartXfer+0x220>
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	785b      	ldrb	r3, [r3, #1]
 800468c:	2b01      	cmp	r3, #1
 800468e:	d10f      	bne.n	80046b0 <USB_EPStartXfer+0x220>
 8004690:	687c      	ldr	r4, [r7, #4]
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004698:	b29b      	uxth	r3, r3
 800469a:	441c      	add	r4, r3
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	781b      	ldrb	r3, [r3, #0]
 80046a0:	011b      	lsls	r3, r3, #4
 80046a2:	4423      	add	r3, r4
 80046a4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80046a8:	461c      	mov	r4, r3
 80046aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046ac:	b29b      	uxth	r3, r3
 80046ae:	8023      	strh	r3, [r4, #0]
        pmabuffer = ep->pmaaddr0;
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	891b      	ldrh	r3, [r3, #8]
 80046b4:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	6959      	ldr	r1, [r3, #20]
 80046ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046bc:	b29b      	uxth	r3, r3
 80046be:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80046c0:	6878      	ldr	r0, [r7, #4]
 80046c2:	f000 fab4 	bl	8004c2e <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	785b      	ldrb	r3, [r3, #1]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d115      	bne.n	80046fa <USB_EPStartXfer+0x26a>
 80046ce:	687a      	ldr	r2, [r7, #4]
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	781b      	ldrb	r3, [r3, #0]
 80046d4:	009b      	lsls	r3, r3, #2
 80046d6:	4413      	add	r3, r2
 80046d8:	881b      	ldrh	r3, [r3, #0]
 80046da:	b29b      	uxth	r3, r3
 80046dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046e4:	b29c      	uxth	r4, r3
 80046e6:	687a      	ldr	r2, [r7, #4]
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	781b      	ldrb	r3, [r3, #0]
 80046ec:	009b      	lsls	r3, r3, #2
 80046ee:	441a      	add	r2, r3
 80046f0:	4b9a      	ldr	r3, [pc, #616]	; (800495c <USB_EPStartXfer+0x4cc>)
 80046f2:	4323      	orrs	r3, r4
 80046f4:	b29b      	uxth	r3, r3
 80046f6:	8013      	strh	r3, [r2, #0]
 80046f8:	e018      	b.n	800472c <USB_EPStartXfer+0x29c>
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	785b      	ldrb	r3, [r3, #1]
 80046fe:	2b01      	cmp	r3, #1
 8004700:	d114      	bne.n	800472c <USB_EPStartXfer+0x29c>
 8004702:	687a      	ldr	r2, [r7, #4]
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	781b      	ldrb	r3, [r3, #0]
 8004708:	009b      	lsls	r3, r3, #2
 800470a:	4413      	add	r3, r2
 800470c:	881b      	ldrh	r3, [r3, #0]
 800470e:	b29b      	uxth	r3, r3
 8004710:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004714:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004718:	b29c      	uxth	r4, r3
 800471a:	687a      	ldr	r2, [r7, #4]
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	781b      	ldrb	r3, [r3, #0]
 8004720:	009b      	lsls	r3, r3, #2
 8004722:	441a      	add	r2, r3
 8004724:	4b8e      	ldr	r3, [pc, #568]	; (8004960 <USB_EPStartXfer+0x4d0>)
 8004726:	4323      	orrs	r3, r4
 8004728:	b29b      	uxth	r3, r3
 800472a:	8013      	strh	r3, [r2, #0]
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800472c:	687a      	ldr	r2, [r7, #4]
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	781b      	ldrb	r3, [r3, #0]
 8004732:	009b      	lsls	r3, r3, #2
 8004734:	4413      	add	r3, r2
 8004736:	881b      	ldrh	r3, [r3, #0]
 8004738:	b29b      	uxth	r3, r3
 800473a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800473e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004742:	b29c      	uxth	r4, r3
 8004744:	f084 0310 	eor.w	r3, r4, #16
 8004748:	b29c      	uxth	r4, r3
 800474a:	f084 0320 	eor.w	r3, r4, #32
 800474e:	b29c      	uxth	r4, r3
 8004750:	687a      	ldr	r2, [r7, #4]
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	781b      	ldrb	r3, [r3, #0]
 8004756:	009b      	lsls	r3, r3, #2
 8004758:	441a      	add	r2, r3
 800475a:	4b82      	ldr	r3, [pc, #520]	; (8004964 <USB_EPStartXfer+0x4d4>)
 800475c:	4323      	orrs	r3, r4
 800475e:	b29b      	uxth	r3, r3
 8004760:	8013      	strh	r3, [r2, #0]
 8004762:	e146      	b.n	80049f2 <USB_EPStartXfer+0x562>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	699a      	ldr	r2, [r3, #24]
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	691b      	ldr	r3, [r3, #16]
 800476c:	429a      	cmp	r2, r3
 800476e:	d909      	bls.n	8004784 <USB_EPStartXfer+0x2f4>
    {
      len = ep->maxpacket;
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	691b      	ldr	r3, [r3, #16]
 8004774:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	699a      	ldr	r2, [r3, #24]
 800477a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800477c:	1ad2      	subs	r2, r2, r3
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	619a      	str	r2, [r3, #24]
 8004782:	e005      	b.n	8004790 <USB_EPStartXfer+0x300>
    }
    else
    {
      len = ep->xfer_len;
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	699b      	ldr	r3, [r3, #24]
 8004788:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	2200      	movs	r2, #0
 800478e:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	7b1b      	ldrb	r3, [r3, #12]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d148      	bne.n	800482a <USB_EPStartXfer+0x39a>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8004798:	687c      	ldr	r4, [r7, #4]
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80047a0:	b29b      	uxth	r3, r3
 80047a2:	441c      	add	r4, r3
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	781b      	ldrb	r3, [r3, #0]
 80047a8:	011b      	lsls	r3, r3, #4
 80047aa:	4423      	add	r3, r4
 80047ac:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80047b0:	461c      	mov	r4, r3
 80047b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d10e      	bne.n	80047d6 <USB_EPStartXfer+0x346>
 80047b8:	8823      	ldrh	r3, [r4, #0]
 80047ba:	b29b      	uxth	r3, r3
 80047bc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80047c0:	b29b      	uxth	r3, r3
 80047c2:	8023      	strh	r3, [r4, #0]
 80047c4:	8823      	ldrh	r3, [r4, #0]
 80047c6:	b29b      	uxth	r3, r3
 80047c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80047cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80047d0:	b29b      	uxth	r3, r3
 80047d2:	8023      	strh	r3, [r4, #0]
 80047d4:	e0f2      	b.n	80049bc <USB_EPStartXfer+0x52c>
 80047d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047d8:	2b3e      	cmp	r3, #62	; 0x3e
 80047da:	d810      	bhi.n	80047fe <USB_EPStartXfer+0x36e>
 80047dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047de:	085b      	lsrs	r3, r3, #1
 80047e0:	61fb      	str	r3, [r7, #28]
 80047e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047e4:	f003 0301 	and.w	r3, r3, #1
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d002      	beq.n	80047f2 <USB_EPStartXfer+0x362>
 80047ec:	69fb      	ldr	r3, [r7, #28]
 80047ee:	3301      	adds	r3, #1
 80047f0:	61fb      	str	r3, [r7, #28]
 80047f2:	69fb      	ldr	r3, [r7, #28]
 80047f4:	b29b      	uxth	r3, r3
 80047f6:	029b      	lsls	r3, r3, #10
 80047f8:	b29b      	uxth	r3, r3
 80047fa:	8023      	strh	r3, [r4, #0]
 80047fc:	e0de      	b.n	80049bc <USB_EPStartXfer+0x52c>
 80047fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004800:	095b      	lsrs	r3, r3, #5
 8004802:	61fb      	str	r3, [r7, #28]
 8004804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004806:	f003 031f 	and.w	r3, r3, #31
 800480a:	2b00      	cmp	r3, #0
 800480c:	d102      	bne.n	8004814 <USB_EPStartXfer+0x384>
 800480e:	69fb      	ldr	r3, [r7, #28]
 8004810:	3b01      	subs	r3, #1
 8004812:	61fb      	str	r3, [r7, #28]
 8004814:	69fb      	ldr	r3, [r7, #28]
 8004816:	b29b      	uxth	r3, r3
 8004818:	029b      	lsls	r3, r3, #10
 800481a:	b29b      	uxth	r3, r3
 800481c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004820:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004824:	b29b      	uxth	r3, r3
 8004826:	8023      	strh	r3, [r4, #0]
 8004828:	e0c8      	b.n	80049bc <USB_EPStartXfer+0x52c>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	785b      	ldrb	r3, [r3, #1]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d148      	bne.n	80048c4 <USB_EPStartXfer+0x434>
 8004832:	687c      	ldr	r4, [r7, #4]
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800483a:	b29b      	uxth	r3, r3
 800483c:	441c      	add	r4, r3
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	781b      	ldrb	r3, [r3, #0]
 8004842:	011b      	lsls	r3, r3, #4
 8004844:	4423      	add	r3, r4
 8004846:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800484a:	461c      	mov	r4, r3
 800484c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800484e:	2b00      	cmp	r3, #0
 8004850:	d10e      	bne.n	8004870 <USB_EPStartXfer+0x3e0>
 8004852:	8823      	ldrh	r3, [r4, #0]
 8004854:	b29b      	uxth	r3, r3
 8004856:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800485a:	b29b      	uxth	r3, r3
 800485c:	8023      	strh	r3, [r4, #0]
 800485e:	8823      	ldrh	r3, [r4, #0]
 8004860:	b29b      	uxth	r3, r3
 8004862:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004866:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800486a:	b29b      	uxth	r3, r3
 800486c:	8023      	strh	r3, [r4, #0]
 800486e:	e03d      	b.n	80048ec <USB_EPStartXfer+0x45c>
 8004870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004872:	2b3e      	cmp	r3, #62	; 0x3e
 8004874:	d810      	bhi.n	8004898 <USB_EPStartXfer+0x408>
 8004876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004878:	085b      	lsrs	r3, r3, #1
 800487a:	61bb      	str	r3, [r7, #24]
 800487c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800487e:	f003 0301 	and.w	r3, r3, #1
 8004882:	2b00      	cmp	r3, #0
 8004884:	d002      	beq.n	800488c <USB_EPStartXfer+0x3fc>
 8004886:	69bb      	ldr	r3, [r7, #24]
 8004888:	3301      	adds	r3, #1
 800488a:	61bb      	str	r3, [r7, #24]
 800488c:	69bb      	ldr	r3, [r7, #24]
 800488e:	b29b      	uxth	r3, r3
 8004890:	029b      	lsls	r3, r3, #10
 8004892:	b29b      	uxth	r3, r3
 8004894:	8023      	strh	r3, [r4, #0]
 8004896:	e029      	b.n	80048ec <USB_EPStartXfer+0x45c>
 8004898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800489a:	095b      	lsrs	r3, r3, #5
 800489c:	61bb      	str	r3, [r7, #24]
 800489e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048a0:	f003 031f 	and.w	r3, r3, #31
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d102      	bne.n	80048ae <USB_EPStartXfer+0x41e>
 80048a8:	69bb      	ldr	r3, [r7, #24]
 80048aa:	3b01      	subs	r3, #1
 80048ac:	61bb      	str	r3, [r7, #24]
 80048ae:	69bb      	ldr	r3, [r7, #24]
 80048b0:	b29b      	uxth	r3, r3
 80048b2:	029b      	lsls	r3, r3, #10
 80048b4:	b29b      	uxth	r3, r3
 80048b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80048ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80048be:	b29b      	uxth	r3, r3
 80048c0:	8023      	strh	r3, [r4, #0]
 80048c2:	e013      	b.n	80048ec <USB_EPStartXfer+0x45c>
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	785b      	ldrb	r3, [r3, #1]
 80048c8:	2b01      	cmp	r3, #1
 80048ca:	d10f      	bne.n	80048ec <USB_EPStartXfer+0x45c>
 80048cc:	687c      	ldr	r4, [r7, #4]
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80048d4:	b29b      	uxth	r3, r3
 80048d6:	441c      	add	r4, r3
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	781b      	ldrb	r3, [r3, #0]
 80048dc:	011b      	lsls	r3, r3, #4
 80048de:	4423      	add	r3, r4
 80048e0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80048e4:	461c      	mov	r4, r3
 80048e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048e8:	b29b      	uxth	r3, r3
 80048ea:	8023      	strh	r3, [r4, #0]
 80048ec:	687c      	ldr	r4, [r7, #4]
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	785b      	ldrb	r3, [r3, #1]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d14e      	bne.n	8004994 <USB_EPStartXfer+0x504>
 80048f6:	687c      	ldr	r4, [r7, #4]
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80048fe:	b29b      	uxth	r3, r3
 8004900:	441c      	add	r4, r3
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	781b      	ldrb	r3, [r3, #0]
 8004906:	011b      	lsls	r3, r3, #4
 8004908:	4423      	add	r3, r4
 800490a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800490e:	461c      	mov	r4, r3
 8004910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004912:	2b00      	cmp	r3, #0
 8004914:	d10e      	bne.n	8004934 <USB_EPStartXfer+0x4a4>
 8004916:	8823      	ldrh	r3, [r4, #0]
 8004918:	b29b      	uxth	r3, r3
 800491a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800491e:	b29b      	uxth	r3, r3
 8004920:	8023      	strh	r3, [r4, #0]
 8004922:	8823      	ldrh	r3, [r4, #0]
 8004924:	b29b      	uxth	r3, r3
 8004926:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800492a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800492e:	b29b      	uxth	r3, r3
 8004930:	8023      	strh	r3, [r4, #0]
 8004932:	e043      	b.n	80049bc <USB_EPStartXfer+0x52c>
 8004934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004936:	2b3e      	cmp	r3, #62	; 0x3e
 8004938:	d816      	bhi.n	8004968 <USB_EPStartXfer+0x4d8>
 800493a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800493c:	085b      	lsrs	r3, r3, #1
 800493e:	617b      	str	r3, [r7, #20]
 8004940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004942:	f003 0301 	and.w	r3, r3, #1
 8004946:	2b00      	cmp	r3, #0
 8004948:	d002      	beq.n	8004950 <USB_EPStartXfer+0x4c0>
 800494a:	697b      	ldr	r3, [r7, #20]
 800494c:	3301      	adds	r3, #1
 800494e:	617b      	str	r3, [r7, #20]
 8004950:	697b      	ldr	r3, [r7, #20]
 8004952:	b29b      	uxth	r3, r3
 8004954:	029b      	lsls	r3, r3, #10
 8004956:	b29b      	uxth	r3, r3
 8004958:	8023      	strh	r3, [r4, #0]
 800495a:	e02f      	b.n	80049bc <USB_EPStartXfer+0x52c>
 800495c:	ffff80c0 	.word	0xffff80c0
 8004960:	ffffc080 	.word	0xffffc080
 8004964:	ffff8080 	.word	0xffff8080
 8004968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800496a:	095b      	lsrs	r3, r3, #5
 800496c:	617b      	str	r3, [r7, #20]
 800496e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004970:	f003 031f 	and.w	r3, r3, #31
 8004974:	2b00      	cmp	r3, #0
 8004976:	d102      	bne.n	800497e <USB_EPStartXfer+0x4ee>
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	3b01      	subs	r3, #1
 800497c:	617b      	str	r3, [r7, #20]
 800497e:	697b      	ldr	r3, [r7, #20]
 8004980:	b29b      	uxth	r3, r3
 8004982:	029b      	lsls	r3, r3, #10
 8004984:	b29b      	uxth	r3, r3
 8004986:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800498a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800498e:	b29b      	uxth	r3, r3
 8004990:	8023      	strh	r3, [r4, #0]
 8004992:	e013      	b.n	80049bc <USB_EPStartXfer+0x52c>
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	785b      	ldrb	r3, [r3, #1]
 8004998:	2b01      	cmp	r3, #1
 800499a:	d10f      	bne.n	80049bc <USB_EPStartXfer+0x52c>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80049a2:	b29b      	uxth	r3, r3
 80049a4:	441c      	add	r4, r3
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	781b      	ldrb	r3, [r3, #0]
 80049aa:	011b      	lsls	r3, r3, #4
 80049ac:	4423      	add	r3, r4
 80049ae:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80049b2:	613b      	str	r3, [r7, #16]
 80049b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049b6:	b29a      	uxth	r2, r3
 80049b8:	693b      	ldr	r3, [r7, #16]
 80049ba:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80049bc:	687a      	ldr	r2, [r7, #4]
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	781b      	ldrb	r3, [r3, #0]
 80049c2:	009b      	lsls	r3, r3, #2
 80049c4:	4413      	add	r3, r2
 80049c6:	881b      	ldrh	r3, [r3, #0]
 80049c8:	b29b      	uxth	r3, r3
 80049ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80049ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049d2:	b29c      	uxth	r4, r3
 80049d4:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80049d8:	b29c      	uxth	r4, r3
 80049da:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80049de:	b29c      	uxth	r4, r3
 80049e0:	687a      	ldr	r2, [r7, #4]
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	781b      	ldrb	r3, [r3, #0]
 80049e6:	009b      	lsls	r3, r3, #2
 80049e8:	441a      	add	r2, r3
 80049ea:	4b04      	ldr	r3, [pc, #16]	; (80049fc <USB_EPStartXfer+0x56c>)
 80049ec:	4323      	orrs	r3, r4
 80049ee:	b29b      	uxth	r3, r3
 80049f0:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80049f2:	2300      	movs	r3, #0
}
 80049f4:	4618      	mov	r0, r3
 80049f6:	3734      	adds	r7, #52	; 0x34
 80049f8:	46bd      	mov	sp, r7
 80049fa:	bd90      	pop	{r4, r7, pc}
 80049fc:	ffff8080 	.word	0xffff8080

08004a00 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004a00:	b490      	push	{r4, r7}
 8004a02:	b082      	sub	sp, #8
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
 8004a08:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	785b      	ldrb	r3, [r3, #1]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d018      	beq.n	8004a44 <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8004a12:	687a      	ldr	r2, [r7, #4]
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	781b      	ldrb	r3, [r3, #0]
 8004a18:	009b      	lsls	r3, r3, #2
 8004a1a:	4413      	add	r3, r2
 8004a1c:	881b      	ldrh	r3, [r3, #0]
 8004a1e:	b29b      	uxth	r3, r3
 8004a20:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a24:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a28:	b29c      	uxth	r4, r3
 8004a2a:	f084 0310 	eor.w	r3, r4, #16
 8004a2e:	b29c      	uxth	r4, r3
 8004a30:	687a      	ldr	r2, [r7, #4]
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	781b      	ldrb	r3, [r3, #0]
 8004a36:	009b      	lsls	r3, r3, #2
 8004a38:	441a      	add	r2, r3
 8004a3a:	4b11      	ldr	r3, [pc, #68]	; (8004a80 <USB_EPSetStall+0x80>)
 8004a3c:	4323      	orrs	r3, r4
 8004a3e:	b29b      	uxth	r3, r3
 8004a40:	8013      	strh	r3, [r2, #0]
 8004a42:	e017      	b.n	8004a74 <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8004a44:	687a      	ldr	r2, [r7, #4]
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	781b      	ldrb	r3, [r3, #0]
 8004a4a:	009b      	lsls	r3, r3, #2
 8004a4c:	4413      	add	r3, r2
 8004a4e:	881b      	ldrh	r3, [r3, #0]
 8004a50:	b29b      	uxth	r3, r3
 8004a52:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004a56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a5a:	b29c      	uxth	r4, r3
 8004a5c:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8004a60:	b29c      	uxth	r4, r3
 8004a62:	687a      	ldr	r2, [r7, #4]
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	781b      	ldrb	r3, [r3, #0]
 8004a68:	009b      	lsls	r3, r3, #2
 8004a6a:	441a      	add	r2, r3
 8004a6c:	4b04      	ldr	r3, [pc, #16]	; (8004a80 <USB_EPSetStall+0x80>)
 8004a6e:	4323      	orrs	r3, r4
 8004a70:	b29b      	uxth	r3, r3
 8004a72:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8004a74:	2300      	movs	r3, #0
}
 8004a76:	4618      	mov	r0, r3
 8004a78:	3708      	adds	r7, #8
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	bc90      	pop	{r4, r7}
 8004a7e:	4770      	bx	lr
 8004a80:	ffff8080 	.word	0xffff8080

08004a84 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004a84:	b490      	push	{r4, r7}
 8004a86:	b082      	sub	sp, #8
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
 8004a8c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	7b1b      	ldrb	r3, [r3, #12]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d17d      	bne.n	8004b92 <USB_EPClearStall+0x10e>
  {
    if (ep->is_in != 0U)
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	785b      	ldrb	r3, [r3, #1]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d03d      	beq.n	8004b1a <USB_EPClearStall+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004a9e:	687a      	ldr	r2, [r7, #4]
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	781b      	ldrb	r3, [r3, #0]
 8004aa4:	009b      	lsls	r3, r3, #2
 8004aa6:	4413      	add	r3, r2
 8004aa8:	881b      	ldrh	r3, [r3, #0]
 8004aaa:	b29c      	uxth	r4, r3
 8004aac:	4623      	mov	r3, r4
 8004aae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d014      	beq.n	8004ae0 <USB_EPClearStall+0x5c>
 8004ab6:	687a      	ldr	r2, [r7, #4]
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	781b      	ldrb	r3, [r3, #0]
 8004abc:	009b      	lsls	r3, r3, #2
 8004abe:	4413      	add	r3, r2
 8004ac0:	881b      	ldrh	r3, [r3, #0]
 8004ac2:	b29b      	uxth	r3, r3
 8004ac4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ac8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004acc:	b29c      	uxth	r4, r3
 8004ace:	687a      	ldr	r2, [r7, #4]
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	781b      	ldrb	r3, [r3, #0]
 8004ad4:	009b      	lsls	r3, r3, #2
 8004ad6:	441a      	add	r2, r3
 8004ad8:	4b31      	ldr	r3, [pc, #196]	; (8004ba0 <USB_EPClearStall+0x11c>)
 8004ada:	4323      	orrs	r3, r4
 8004adc:	b29b      	uxth	r3, r3
 8004ade:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	78db      	ldrb	r3, [r3, #3]
 8004ae4:	2b01      	cmp	r3, #1
 8004ae6:	d054      	beq.n	8004b92 <USB_EPClearStall+0x10e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004ae8:	687a      	ldr	r2, [r7, #4]
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	781b      	ldrb	r3, [r3, #0]
 8004aee:	009b      	lsls	r3, r3, #2
 8004af0:	4413      	add	r3, r2
 8004af2:	881b      	ldrh	r3, [r3, #0]
 8004af4:	b29b      	uxth	r3, r3
 8004af6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004afa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004afe:	b29c      	uxth	r4, r3
 8004b00:	f084 0320 	eor.w	r3, r4, #32
 8004b04:	b29c      	uxth	r4, r3
 8004b06:	687a      	ldr	r2, [r7, #4]
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	781b      	ldrb	r3, [r3, #0]
 8004b0c:	009b      	lsls	r3, r3, #2
 8004b0e:	441a      	add	r2, r3
 8004b10:	4b24      	ldr	r3, [pc, #144]	; (8004ba4 <USB_EPClearStall+0x120>)
 8004b12:	4323      	orrs	r3, r4
 8004b14:	b29b      	uxth	r3, r3
 8004b16:	8013      	strh	r3, [r2, #0]
 8004b18:	e03b      	b.n	8004b92 <USB_EPClearStall+0x10e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004b1a:	687a      	ldr	r2, [r7, #4]
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	781b      	ldrb	r3, [r3, #0]
 8004b20:	009b      	lsls	r3, r3, #2
 8004b22:	4413      	add	r3, r2
 8004b24:	881b      	ldrh	r3, [r3, #0]
 8004b26:	b29c      	uxth	r4, r3
 8004b28:	4623      	mov	r3, r4
 8004b2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d014      	beq.n	8004b5c <USB_EPClearStall+0xd8>
 8004b32:	687a      	ldr	r2, [r7, #4]
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	781b      	ldrb	r3, [r3, #0]
 8004b38:	009b      	lsls	r3, r3, #2
 8004b3a:	4413      	add	r3, r2
 8004b3c:	881b      	ldrh	r3, [r3, #0]
 8004b3e:	b29b      	uxth	r3, r3
 8004b40:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b48:	b29c      	uxth	r4, r3
 8004b4a:	687a      	ldr	r2, [r7, #4]
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	781b      	ldrb	r3, [r3, #0]
 8004b50:	009b      	lsls	r3, r3, #2
 8004b52:	441a      	add	r2, r3
 8004b54:	4b14      	ldr	r3, [pc, #80]	; (8004ba8 <USB_EPClearStall+0x124>)
 8004b56:	4323      	orrs	r3, r4
 8004b58:	b29b      	uxth	r3, r3
 8004b5a:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004b5c:	687a      	ldr	r2, [r7, #4]
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	781b      	ldrb	r3, [r3, #0]
 8004b62:	009b      	lsls	r3, r3, #2
 8004b64:	4413      	add	r3, r2
 8004b66:	881b      	ldrh	r3, [r3, #0]
 8004b68:	b29b      	uxth	r3, r3
 8004b6a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004b6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b72:	b29c      	uxth	r4, r3
 8004b74:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8004b78:	b29c      	uxth	r4, r3
 8004b7a:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8004b7e:	b29c      	uxth	r4, r3
 8004b80:	687a      	ldr	r2, [r7, #4]
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	781b      	ldrb	r3, [r3, #0]
 8004b86:	009b      	lsls	r3, r3, #2
 8004b88:	441a      	add	r2, r3
 8004b8a:	4b06      	ldr	r3, [pc, #24]	; (8004ba4 <USB_EPClearStall+0x120>)
 8004b8c:	4323      	orrs	r3, r4
 8004b8e:	b29b      	uxth	r3, r3
 8004b90:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8004b92:	2300      	movs	r3, #0
}
 8004b94:	4618      	mov	r0, r3
 8004b96:	3708      	adds	r7, #8
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	bc90      	pop	{r4, r7}
 8004b9c:	4770      	bx	lr
 8004b9e:	bf00      	nop
 8004ba0:	ffff80c0 	.word	0xffff80c0
 8004ba4:	ffff8080 	.word	0xffff8080
 8004ba8:	ffffc080 	.word	0xffffc080

08004bac <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8004bac:	b480      	push	{r7}
 8004bae:	b083      	sub	sp, #12
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
 8004bb4:	460b      	mov	r3, r1
 8004bb6:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8004bb8:	78fb      	ldrb	r3, [r7, #3]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d103      	bne.n	8004bc6 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2280      	movs	r2, #128	; 0x80
 8004bc2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8004bc6:	2300      	movs	r3, #0
}
 8004bc8:	4618      	mov	r0, r3
 8004bca:	370c      	adds	r7, #12
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	bc80      	pop	{r7}
 8004bd0:	4770      	bx	lr

08004bd2 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8004bd2:	b480      	push	{r7}
 8004bd4:	b083      	sub	sp, #12
 8004bd6:	af00      	add	r7, sp, #0
 8004bd8:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004bda:	2300      	movs	r3, #0
}
 8004bdc:	4618      	mov	r0, r3
 8004bde:	370c      	adds	r7, #12
 8004be0:	46bd      	mov	sp, r7
 8004be2:	bc80      	pop	{r7}
 8004be4:	4770      	bx	lr

08004be6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8004be6:	b480      	push	{r7}
 8004be8:	b083      	sub	sp, #12
 8004bea:	af00      	add	r7, sp, #0
 8004bec:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004bee:	2300      	movs	r3, #0
}
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	370c      	adds	r7, #12
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	bc80      	pop	{r7}
 8004bf8:	4770      	bx	lr

08004bfa <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8004bfa:	b480      	push	{r7}
 8004bfc:	b085      	sub	sp, #20
 8004bfe:	af00      	add	r7, sp, #0
 8004c00:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004c08:	b29b      	uxth	r3, r3
 8004c0a:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
}
 8004c0e:	4618      	mov	r0, r3
 8004c10:	3714      	adds	r7, #20
 8004c12:	46bd      	mov	sp, r7
 8004c14:	bc80      	pop	{r7}
 8004c16:	4770      	bx	lr

08004c18 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8004c18:	b480      	push	{r7}
 8004c1a:	b083      	sub	sp, #12
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
 8004c20:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004c22:	2300      	movs	r3, #0
}
 8004c24:	4618      	mov	r0, r3
 8004c26:	370c      	adds	r7, #12
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	bc80      	pop	{r7}
 8004c2c:	4770      	bx	lr

08004c2e <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8004c2e:	b480      	push	{r7}
 8004c30:	b08d      	sub	sp, #52	; 0x34
 8004c32:	af00      	add	r7, sp, #0
 8004c34:	60f8      	str	r0, [r7, #12]
 8004c36:	60b9      	str	r1, [r7, #8]
 8004c38:	4611      	mov	r1, r2
 8004c3a:	461a      	mov	r2, r3
 8004c3c:	460b      	mov	r3, r1
 8004c3e:	80fb      	strh	r3, [r7, #6]
 8004c40:	4613      	mov	r3, r2
 8004c42:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8004c44:	88bb      	ldrh	r3, [r7, #4]
 8004c46:	3301      	adds	r3, #1
 8004c48:	085b      	lsrs	r3, r3, #1
 8004c4a:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004c54:	88fb      	ldrh	r3, [r7, #6]
 8004c56:	005a      	lsls	r2, r3, #1
 8004c58:	69fb      	ldr	r3, [r7, #28]
 8004c5a:	4413      	add	r3, r2
 8004c5c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004c60:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8004c62:	6a3b      	ldr	r3, [r7, #32]
 8004c64:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c66:	e01e      	b.n	8004ca6 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8004c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c6a:	781b      	ldrb	r3, [r3, #0]
 8004c6c:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8004c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c70:	3301      	adds	r3, #1
 8004c72:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8004c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c76:	781b      	ldrb	r3, [r3, #0]
 8004c78:	b29b      	uxth	r3, r3
 8004c7a:	021b      	lsls	r3, r3, #8
 8004c7c:	b29b      	uxth	r3, r3
 8004c7e:	461a      	mov	r2, r3
 8004c80:	69bb      	ldr	r3, [r7, #24]
 8004c82:	4313      	orrs	r3, r2
 8004c84:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8004c86:	697b      	ldr	r3, [r7, #20]
 8004c88:	b29a      	uxth	r2, r3
 8004c8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c8c:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8004c8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c90:	3302      	adds	r3, #2
 8004c92:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8004c94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c96:	3302      	adds	r3, #2
 8004c98:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8004c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c9c:	3301      	adds	r3, #1
 8004c9e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8004ca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ca2:	3b01      	subs	r3, #1
 8004ca4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d1dd      	bne.n	8004c68 <USB_WritePMA+0x3a>
  }
}
 8004cac:	bf00      	nop
 8004cae:	3734      	adds	r7, #52	; 0x34
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	bc80      	pop	{r7}
 8004cb4:	4770      	bx	lr

08004cb6 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8004cb6:	b480      	push	{r7}
 8004cb8:	b08b      	sub	sp, #44	; 0x2c
 8004cba:	af00      	add	r7, sp, #0
 8004cbc:	60f8      	str	r0, [r7, #12]
 8004cbe:	60b9      	str	r1, [r7, #8]
 8004cc0:	4611      	mov	r1, r2
 8004cc2:	461a      	mov	r2, r3
 8004cc4:	460b      	mov	r3, r1
 8004cc6:	80fb      	strh	r3, [r7, #6]
 8004cc8:	4613      	mov	r3, r2
 8004cca:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8004ccc:	88bb      	ldrh	r3, [r7, #4]
 8004cce:	085b      	lsrs	r3, r3, #1
 8004cd0:	b29b      	uxth	r3, r3
 8004cd2:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004cdc:	88fb      	ldrh	r3, [r7, #6]
 8004cde:	005a      	lsls	r2, r3, #1
 8004ce0:	697b      	ldr	r3, [r7, #20]
 8004ce2:	4413      	add	r3, r2
 8004ce4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004ce8:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8004cea:	69bb      	ldr	r3, [r7, #24]
 8004cec:	627b      	str	r3, [r7, #36]	; 0x24
 8004cee:	e01b      	b.n	8004d28 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8004cf0:	6a3b      	ldr	r3, [r7, #32]
 8004cf2:	881b      	ldrh	r3, [r3, #0]
 8004cf4:	b29b      	uxth	r3, r3
 8004cf6:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8004cf8:	6a3b      	ldr	r3, [r7, #32]
 8004cfa:	3302      	adds	r3, #2
 8004cfc:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8004cfe:	693b      	ldr	r3, [r7, #16]
 8004d00:	b2da      	uxtb	r2, r3
 8004d02:	69fb      	ldr	r3, [r7, #28]
 8004d04:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8004d06:	69fb      	ldr	r3, [r7, #28]
 8004d08:	3301      	adds	r3, #1
 8004d0a:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8004d0c:	693b      	ldr	r3, [r7, #16]
 8004d0e:	0a1b      	lsrs	r3, r3, #8
 8004d10:	b2da      	uxtb	r2, r3
 8004d12:	69fb      	ldr	r3, [r7, #28]
 8004d14:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8004d16:	69fb      	ldr	r3, [r7, #28]
 8004d18:	3301      	adds	r3, #1
 8004d1a:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8004d1c:	6a3b      	ldr	r3, [r7, #32]
 8004d1e:	3302      	adds	r3, #2
 8004d20:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8004d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d24:	3b01      	subs	r3, #1
 8004d26:	627b      	str	r3, [r7, #36]	; 0x24
 8004d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d1e0      	bne.n	8004cf0 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8004d2e:	88bb      	ldrh	r3, [r7, #4]
 8004d30:	f003 0301 	and.w	r3, r3, #1
 8004d34:	b29b      	uxth	r3, r3
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d007      	beq.n	8004d4a <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8004d3a:	6a3b      	ldr	r3, [r7, #32]
 8004d3c:	881b      	ldrh	r3, [r3, #0]
 8004d3e:	b29b      	uxth	r3, r3
 8004d40:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8004d42:	693b      	ldr	r3, [r7, #16]
 8004d44:	b2da      	uxtb	r2, r3
 8004d46:	69fb      	ldr	r3, [r7, #28]
 8004d48:	701a      	strb	r2, [r3, #0]
  }
}
 8004d4a:	bf00      	nop
 8004d4c:	372c      	adds	r7, #44	; 0x2c
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bc80      	pop	{r7}
 8004d52:	4770      	bx	lr

08004d54 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b084      	sub	sp, #16
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
 8004d5c:	460b      	mov	r3, r1
 8004d5e:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8004d60:	2300      	movs	r3, #0
 8004d62:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	7c1b      	ldrb	r3, [r3, #16]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d115      	bne.n	8004d98 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004d6c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004d70:	2202      	movs	r2, #2
 8004d72:	2181      	movs	r1, #129	; 0x81
 8004d74:	6878      	ldr	r0, [r7, #4]
 8004d76:	f001 fea4 	bl	8006ac2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2201      	movs	r2, #1
 8004d7e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004d80:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004d84:	2202      	movs	r2, #2
 8004d86:	2101      	movs	r1, #1
 8004d88:	6878      	ldr	r0, [r7, #4]
 8004d8a:	f001 fe9a 	bl	8006ac2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2201      	movs	r2, #1
 8004d92:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8004d96:	e012      	b.n	8004dbe <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004d98:	2340      	movs	r3, #64	; 0x40
 8004d9a:	2202      	movs	r2, #2
 8004d9c:	2181      	movs	r1, #129	; 0x81
 8004d9e:	6878      	ldr	r0, [r7, #4]
 8004da0:	f001 fe8f 	bl	8006ac2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2201      	movs	r2, #1
 8004da8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004daa:	2340      	movs	r3, #64	; 0x40
 8004dac:	2202      	movs	r2, #2
 8004dae:	2101      	movs	r1, #1
 8004db0:	6878      	ldr	r0, [r7, #4]
 8004db2:	f001 fe86 	bl	8006ac2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2201      	movs	r2, #1
 8004dba:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004dbe:	2308      	movs	r3, #8
 8004dc0:	2203      	movs	r2, #3
 8004dc2:	2182      	movs	r1, #130	; 0x82
 8004dc4:	6878      	ldr	r0, [r7, #4]
 8004dc6:	f001 fe7c 	bl	8006ac2 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2201      	movs	r2, #1
 8004dce:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004dd0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8004dd4:	f001 ff96 	bl	8006d04 <USBD_static_malloc>
 8004dd8:	4602      	mov	r2, r0
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d102      	bne.n	8004df0 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8004dea:	2301      	movs	r3, #1
 8004dec:	73fb      	strb	r3, [r7, #15]
 8004dee:	e026      	b.n	8004e3e <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004df6:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8004e02:	68bb      	ldr	r3, [r7, #8]
 8004e04:	2200      	movs	r2, #0
 8004e06:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8004e0a:	68bb      	ldr	r3, [r7, #8]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	7c1b      	ldrb	r3, [r3, #16]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d109      	bne.n	8004e2e <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004e1a:	68bb      	ldr	r3, [r7, #8]
 8004e1c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004e20:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004e24:	2101      	movs	r1, #1
 8004e26:	6878      	ldr	r0, [r7, #4]
 8004e28:	f001 ff35 	bl	8006c96 <USBD_LL_PrepareReceive>
 8004e2c:	e007      	b.n	8004e3e <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004e34:	2340      	movs	r3, #64	; 0x40
 8004e36:	2101      	movs	r1, #1
 8004e38:	6878      	ldr	r0, [r7, #4]
 8004e3a:	f001 ff2c 	bl	8006c96 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8004e3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e40:	4618      	mov	r0, r3
 8004e42:	3710      	adds	r7, #16
 8004e44:	46bd      	mov	sp, r7
 8004e46:	bd80      	pop	{r7, pc}

08004e48 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b084      	sub	sp, #16
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
 8004e50:	460b      	mov	r3, r1
 8004e52:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8004e54:	2300      	movs	r3, #0
 8004e56:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8004e58:	2181      	movs	r1, #129	; 0x81
 8004e5a:	6878      	ldr	r0, [r7, #4]
 8004e5c:	f001 fe57 	bl	8006b0e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2200      	movs	r2, #0
 8004e64:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8004e66:	2101      	movs	r1, #1
 8004e68:	6878      	ldr	r0, [r7, #4]
 8004e6a:	f001 fe50 	bl	8006b0e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2200      	movs	r2, #0
 8004e72:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8004e76:	2182      	movs	r1, #130	; 0x82
 8004e78:	6878      	ldr	r0, [r7, #4]
 8004e7a:	f001 fe48 	bl	8006b0e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2200      	movs	r2, #0
 8004e82:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d00e      	beq.n	8004eac <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004e94:	685b      	ldr	r3, [r3, #4]
 8004e96:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	f001 ff3c 	bl	8006d1c <USBD_static_free>
    pdev->pClassData = NULL;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8004eac:	7bfb      	ldrb	r3, [r7, #15]
}
 8004eae:	4618      	mov	r0, r3
 8004eb0:	3710      	adds	r7, #16
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	bd80      	pop	{r7, pc}

08004eb6 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8004eb6:	b580      	push	{r7, lr}
 8004eb8:	b086      	sub	sp, #24
 8004eba:	af00      	add	r7, sp, #0
 8004ebc:	6078      	str	r0, [r7, #4]
 8004ebe:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004ec6:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8004ec8:	2300      	movs	r3, #0
 8004eca:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8004ecc:	2300      	movs	r3, #0
 8004ece:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	781b      	ldrb	r3, [r3, #0]
 8004ed8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d039      	beq.n	8004f54 <USBD_CDC_Setup+0x9e>
 8004ee0:	2b20      	cmp	r3, #32
 8004ee2:	d17c      	bne.n	8004fde <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	88db      	ldrh	r3, [r3, #6]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d029      	beq.n	8004f40 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	781b      	ldrb	r3, [r3, #0]
 8004ef0:	b25b      	sxtb	r3, r3
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	da11      	bge.n	8004f1a <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004efc:	689b      	ldr	r3, [r3, #8]
 8004efe:	683a      	ldr	r2, [r7, #0]
 8004f00:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8004f02:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004f04:	683a      	ldr	r2, [r7, #0]
 8004f06:	88d2      	ldrh	r2, [r2, #6]
 8004f08:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8004f0a:	6939      	ldr	r1, [r7, #16]
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	88db      	ldrh	r3, [r3, #6]
 8004f10:	461a      	mov	r2, r3
 8004f12:	6878      	ldr	r0, [r7, #4]
 8004f14:	f001 f9f6 	bl	8006304 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8004f18:	e068      	b.n	8004fec <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	785a      	ldrb	r2, [r3, #1]
 8004f1e:	693b      	ldr	r3, [r7, #16]
 8004f20:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	88db      	ldrh	r3, [r3, #6]
 8004f28:	b2da      	uxtb	r2, r3
 8004f2a:	693b      	ldr	r3, [r7, #16]
 8004f2c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8004f30:	6939      	ldr	r1, [r7, #16]
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	88db      	ldrh	r3, [r3, #6]
 8004f36:	461a      	mov	r2, r3
 8004f38:	6878      	ldr	r0, [r7, #4]
 8004f3a:	f001 fa11 	bl	8006360 <USBD_CtlPrepareRx>
      break;
 8004f3e:	e055      	b.n	8004fec <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004f46:	689b      	ldr	r3, [r3, #8]
 8004f48:	683a      	ldr	r2, [r7, #0]
 8004f4a:	7850      	ldrb	r0, [r2, #1]
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	6839      	ldr	r1, [r7, #0]
 8004f50:	4798      	blx	r3
      break;
 8004f52:	e04b      	b.n	8004fec <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	785b      	ldrb	r3, [r3, #1]
 8004f58:	2b0a      	cmp	r3, #10
 8004f5a:	d017      	beq.n	8004f8c <USBD_CDC_Setup+0xd6>
 8004f5c:	2b0b      	cmp	r3, #11
 8004f5e:	d029      	beq.n	8004fb4 <USBD_CDC_Setup+0xfe>
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d133      	bne.n	8004fcc <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004f6a:	2b03      	cmp	r3, #3
 8004f6c:	d107      	bne.n	8004f7e <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8004f6e:	f107 030c 	add.w	r3, r7, #12
 8004f72:	2202      	movs	r2, #2
 8004f74:	4619      	mov	r1, r3
 8004f76:	6878      	ldr	r0, [r7, #4]
 8004f78:	f001 f9c4 	bl	8006304 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004f7c:	e02e      	b.n	8004fdc <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8004f7e:	6839      	ldr	r1, [r7, #0]
 8004f80:	6878      	ldr	r0, [r7, #4]
 8004f82:	f001 f955 	bl	8006230 <USBD_CtlError>
            ret = USBD_FAIL;
 8004f86:	2302      	movs	r3, #2
 8004f88:	75fb      	strb	r3, [r7, #23]
          break;
 8004f8a:	e027      	b.n	8004fdc <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004f92:	2b03      	cmp	r3, #3
 8004f94:	d107      	bne.n	8004fa6 <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8004f96:	f107 030f 	add.w	r3, r7, #15
 8004f9a:	2201      	movs	r2, #1
 8004f9c:	4619      	mov	r1, r3
 8004f9e:	6878      	ldr	r0, [r7, #4]
 8004fa0:	f001 f9b0 	bl	8006304 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004fa4:	e01a      	b.n	8004fdc <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8004fa6:	6839      	ldr	r1, [r7, #0]
 8004fa8:	6878      	ldr	r0, [r7, #4]
 8004faa:	f001 f941 	bl	8006230 <USBD_CtlError>
            ret = USBD_FAIL;
 8004fae:	2302      	movs	r3, #2
 8004fb0:	75fb      	strb	r3, [r7, #23]
          break;
 8004fb2:	e013      	b.n	8004fdc <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004fba:	2b03      	cmp	r3, #3
 8004fbc:	d00d      	beq.n	8004fda <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 8004fbe:	6839      	ldr	r1, [r7, #0]
 8004fc0:	6878      	ldr	r0, [r7, #4]
 8004fc2:	f001 f935 	bl	8006230 <USBD_CtlError>
            ret = USBD_FAIL;
 8004fc6:	2302      	movs	r3, #2
 8004fc8:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8004fca:	e006      	b.n	8004fda <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 8004fcc:	6839      	ldr	r1, [r7, #0]
 8004fce:	6878      	ldr	r0, [r7, #4]
 8004fd0:	f001 f92e 	bl	8006230 <USBD_CtlError>
          ret = USBD_FAIL;
 8004fd4:	2302      	movs	r3, #2
 8004fd6:	75fb      	strb	r3, [r7, #23]
          break;
 8004fd8:	e000      	b.n	8004fdc <USBD_CDC_Setup+0x126>
          break;
 8004fda:	bf00      	nop
      }
      break;
 8004fdc:	e006      	b.n	8004fec <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 8004fde:	6839      	ldr	r1, [r7, #0]
 8004fe0:	6878      	ldr	r0, [r7, #4]
 8004fe2:	f001 f925 	bl	8006230 <USBD_CtlError>
      ret = USBD_FAIL;
 8004fe6:	2302      	movs	r3, #2
 8004fe8:	75fb      	strb	r3, [r7, #23]
      break;
 8004fea:	bf00      	nop
  }

  return ret;
 8004fec:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fee:	4618      	mov	r0, r3
 8004ff0:	3718      	adds	r7, #24
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	bd80      	pop	{r7, pc}

08004ff6 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004ff6:	b580      	push	{r7, lr}
 8004ff8:	b084      	sub	sp, #16
 8004ffa:	af00      	add	r7, sp, #0
 8004ffc:	6078      	str	r0, [r7, #4]
 8004ffe:	460b      	mov	r3, r1
 8005000:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005008:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005010:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005018:	2b00      	cmp	r3, #0
 800501a:	d037      	beq.n	800508c <USBD_CDC_DataIn+0x96>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800501c:	78fa      	ldrb	r2, [r7, #3]
 800501e:	6879      	ldr	r1, [r7, #4]
 8005020:	4613      	mov	r3, r2
 8005022:	009b      	lsls	r3, r3, #2
 8005024:	4413      	add	r3, r2
 8005026:	009b      	lsls	r3, r3, #2
 8005028:	440b      	add	r3, r1
 800502a:	331c      	adds	r3, #28
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d026      	beq.n	8005080 <USBD_CDC_DataIn+0x8a>
 8005032:	78fa      	ldrb	r2, [r7, #3]
 8005034:	6879      	ldr	r1, [r7, #4]
 8005036:	4613      	mov	r3, r2
 8005038:	009b      	lsls	r3, r3, #2
 800503a:	4413      	add	r3, r2
 800503c:	009b      	lsls	r3, r3, #2
 800503e:	440b      	add	r3, r1
 8005040:	331c      	adds	r3, #28
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	78fa      	ldrb	r2, [r7, #3]
 8005046:	68b9      	ldr	r1, [r7, #8]
 8005048:	0152      	lsls	r2, r2, #5
 800504a:	440a      	add	r2, r1
 800504c:	3238      	adds	r2, #56	; 0x38
 800504e:	6812      	ldr	r2, [r2, #0]
 8005050:	fbb3 f1f2 	udiv	r1, r3, r2
 8005054:	fb02 f201 	mul.w	r2, r2, r1
 8005058:	1a9b      	subs	r3, r3, r2
 800505a:	2b00      	cmp	r3, #0
 800505c:	d110      	bne.n	8005080 <USBD_CDC_DataIn+0x8a>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800505e:	78fa      	ldrb	r2, [r7, #3]
 8005060:	6879      	ldr	r1, [r7, #4]
 8005062:	4613      	mov	r3, r2
 8005064:	009b      	lsls	r3, r3, #2
 8005066:	4413      	add	r3, r2
 8005068:	009b      	lsls	r3, r3, #2
 800506a:	440b      	add	r3, r1
 800506c:	331c      	adds	r3, #28
 800506e:	2200      	movs	r2, #0
 8005070:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005072:	78f9      	ldrb	r1, [r7, #3]
 8005074:	2300      	movs	r3, #0
 8005076:	2200      	movs	r2, #0
 8005078:	6878      	ldr	r0, [r7, #4]
 800507a:	f001 fde9 	bl	8006c50 <USBD_LL_Transmit>
 800507e:	e003      	b.n	8005088 <USBD_CDC_DataIn+0x92>
    }
    else
    {
      hcdc->TxState = 0U;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	2200      	movs	r2, #0
 8005084:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8005088:	2300      	movs	r3, #0
 800508a:	e000      	b.n	800508e <USBD_CDC_DataIn+0x98>
  }
  else
  {
    return USBD_FAIL;
 800508c:	2302      	movs	r3, #2
  }
}
 800508e:	4618      	mov	r0, r3
 8005090:	3710      	adds	r7, #16
 8005092:	46bd      	mov	sp, r7
 8005094:	bd80      	pop	{r7, pc}

08005096 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005096:	b580      	push	{r7, lr}
 8005098:	b084      	sub	sp, #16
 800509a:	af00      	add	r7, sp, #0
 800509c:	6078      	str	r0, [r7, #4]
 800509e:	460b      	mov	r3, r1
 80050a0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80050a8:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80050aa:	78fb      	ldrb	r3, [r7, #3]
 80050ac:	4619      	mov	r1, r3
 80050ae:	6878      	ldr	r0, [r7, #4]
 80050b0:	f001 fe14 	bl	8006cdc <USBD_LL_GetRxDataSize>
 80050b4:	4602      	mov	r2, r0
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d00d      	beq.n	80050e2 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80050cc:	68db      	ldr	r3, [r3, #12]
 80050ce:	68fa      	ldr	r2, [r7, #12]
 80050d0:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80050d4:	68fa      	ldr	r2, [r7, #12]
 80050d6:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80050da:	4611      	mov	r1, r2
 80050dc:	4798      	blx	r3

    return USBD_OK;
 80050de:	2300      	movs	r3, #0
 80050e0:	e000      	b.n	80050e4 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 80050e2:	2302      	movs	r3, #2
  }
}
 80050e4:	4618      	mov	r0, r3
 80050e6:	3710      	adds	r7, #16
 80050e8:	46bd      	mov	sp, r7
 80050ea:	bd80      	pop	{r7, pc}

080050ec <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b084      	sub	sp, #16
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80050fa:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005102:	2b00      	cmp	r3, #0
 8005104:	d015      	beq.n	8005132 <USBD_CDC_EP0_RxReady+0x46>
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800510c:	2bff      	cmp	r3, #255	; 0xff
 800510e:	d010      	beq.n	8005132 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005116:	689b      	ldr	r3, [r3, #8]
 8005118:	68fa      	ldr	r2, [r7, #12]
 800511a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800511e:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8005120:	68fa      	ldr	r2, [r7, #12]
 8005122:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005126:	b292      	uxth	r2, r2
 8005128:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	22ff      	movs	r2, #255	; 0xff
 800512e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8005132:	2300      	movs	r3, #0
}
 8005134:	4618      	mov	r0, r3
 8005136:	3710      	adds	r7, #16
 8005138:	46bd      	mov	sp, r7
 800513a:	bd80      	pop	{r7, pc}

0800513c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800513c:	b480      	push	{r7}
 800513e:	b083      	sub	sp, #12
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2243      	movs	r2, #67	; 0x43
 8005148:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800514a:	4b03      	ldr	r3, [pc, #12]	; (8005158 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800514c:	4618      	mov	r0, r3
 800514e:	370c      	adds	r7, #12
 8005150:	46bd      	mov	sp, r7
 8005152:	bc80      	pop	{r7}
 8005154:	4770      	bx	lr
 8005156:	bf00      	nop
 8005158:	20000094 	.word	0x20000094

0800515c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800515c:	b480      	push	{r7}
 800515e:	b083      	sub	sp, #12
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2243      	movs	r2, #67	; 0x43
 8005168:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800516a:	4b03      	ldr	r3, [pc, #12]	; (8005178 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800516c:	4618      	mov	r0, r3
 800516e:	370c      	adds	r7, #12
 8005170:	46bd      	mov	sp, r7
 8005172:	bc80      	pop	{r7}
 8005174:	4770      	bx	lr
 8005176:	bf00      	nop
 8005178:	20000050 	.word	0x20000050

0800517c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800517c:	b480      	push	{r7}
 800517e:	b083      	sub	sp, #12
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2243      	movs	r2, #67	; 0x43
 8005188:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800518a:	4b03      	ldr	r3, [pc, #12]	; (8005198 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800518c:	4618      	mov	r0, r3
 800518e:	370c      	adds	r7, #12
 8005190:	46bd      	mov	sp, r7
 8005192:	bc80      	pop	{r7}
 8005194:	4770      	bx	lr
 8005196:	bf00      	nop
 8005198:	200000d8 	.word	0x200000d8

0800519c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800519c:	b480      	push	{r7}
 800519e:	b083      	sub	sp, #12
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	220a      	movs	r2, #10
 80051a8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80051aa:	4b03      	ldr	r3, [pc, #12]	; (80051b8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80051ac:	4618      	mov	r0, r3
 80051ae:	370c      	adds	r7, #12
 80051b0:	46bd      	mov	sp, r7
 80051b2:	bc80      	pop	{r7}
 80051b4:	4770      	bx	lr
 80051b6:	bf00      	nop
 80051b8:	2000000c 	.word	0x2000000c

080051bc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 80051bc:	b480      	push	{r7}
 80051be:	b085      	sub	sp, #20
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
 80051c4:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80051c6:	2302      	movs	r3, #2
 80051c8:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d005      	beq.n	80051dc <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	683a      	ldr	r2, [r7, #0]
 80051d4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 80051d8:	2300      	movs	r3, #0
 80051da:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80051dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80051de:	4618      	mov	r0, r3
 80051e0:	3714      	adds	r7, #20
 80051e2:	46bd      	mov	sp, r7
 80051e4:	bc80      	pop	{r7}
 80051e6:	4770      	bx	lr

080051e8 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 80051e8:	b480      	push	{r7}
 80051ea:	b087      	sub	sp, #28
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	60f8      	str	r0, [r7, #12]
 80051f0:	60b9      	str	r1, [r7, #8]
 80051f2:	4613      	mov	r3, r2
 80051f4:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80051fc:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80051fe:	697b      	ldr	r3, [r7, #20]
 8005200:	68ba      	ldr	r2, [r7, #8]
 8005202:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005206:	88fa      	ldrh	r2, [r7, #6]
 8005208:	697b      	ldr	r3, [r7, #20]
 800520a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800520e:	2300      	movs	r3, #0
}
 8005210:	4618      	mov	r0, r3
 8005212:	371c      	adds	r7, #28
 8005214:	46bd      	mov	sp, r7
 8005216:	bc80      	pop	{r7}
 8005218:	4770      	bx	lr

0800521a <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800521a:	b480      	push	{r7}
 800521c:	b085      	sub	sp, #20
 800521e:	af00      	add	r7, sp, #0
 8005220:	6078      	str	r0, [r7, #4]
 8005222:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800522a:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	683a      	ldr	r2, [r7, #0]
 8005230:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8005234:	2300      	movs	r3, #0
}
 8005236:	4618      	mov	r0, r3
 8005238:	3714      	adds	r7, #20
 800523a:	46bd      	mov	sp, r7
 800523c:	bc80      	pop	{r7}
 800523e:	4770      	bx	lr

08005240 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b084      	sub	sp, #16
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800524e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005256:	2b00      	cmp	r3, #0
 8005258:	d01c      	beq.n	8005294 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005260:	2b00      	cmp	r3, #0
 8005262:	d115      	bne.n	8005290 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	2201      	movs	r2, #1
 8005268:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8005282:	b29b      	uxth	r3, r3
 8005284:	2181      	movs	r1, #129	; 0x81
 8005286:	6878      	ldr	r0, [r7, #4]
 8005288:	f001 fce2 	bl	8006c50 <USBD_LL_Transmit>

      return USBD_OK;
 800528c:	2300      	movs	r3, #0
 800528e:	e002      	b.n	8005296 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8005290:	2301      	movs	r3, #1
 8005292:	e000      	b.n	8005296 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8005294:	2302      	movs	r3, #2
  }
}
 8005296:	4618      	mov	r0, r3
 8005298:	3710      	adds	r7, #16
 800529a:	46bd      	mov	sp, r7
 800529c:	bd80      	pop	{r7, pc}

0800529e <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800529e:	b580      	push	{r7, lr}
 80052a0:	b084      	sub	sp, #16
 80052a2:	af00      	add	r7, sp, #0
 80052a4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80052ac:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d017      	beq.n	80052e8 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	7c1b      	ldrb	r3, [r3, #16]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d109      	bne.n	80052d4 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80052c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80052ca:	2101      	movs	r1, #1
 80052cc:	6878      	ldr	r0, [r7, #4]
 80052ce:	f001 fce2 	bl	8006c96 <USBD_LL_PrepareReceive>
 80052d2:	e007      	b.n	80052e4 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80052da:	2340      	movs	r3, #64	; 0x40
 80052dc:	2101      	movs	r1, #1
 80052de:	6878      	ldr	r0, [r7, #4]
 80052e0:	f001 fcd9 	bl	8006c96 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80052e4:	2300      	movs	r3, #0
 80052e6:	e000      	b.n	80052ea <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 80052e8:	2302      	movs	r3, #2
  }
}
 80052ea:	4618      	mov	r0, r3
 80052ec:	3710      	adds	r7, #16
 80052ee:	46bd      	mov	sp, r7
 80052f0:	bd80      	pop	{r7, pc}

080052f2 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80052f2:	b580      	push	{r7, lr}
 80052f4:	b084      	sub	sp, #16
 80052f6:	af00      	add	r7, sp, #0
 80052f8:	60f8      	str	r0, [r7, #12]
 80052fa:	60b9      	str	r1, [r7, #8]
 80052fc:	4613      	mov	r3, r2
 80052fe:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d101      	bne.n	800530a <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8005306:	2302      	movs	r3, #2
 8005308:	e01a      	b.n	8005340 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005310:	2b00      	cmp	r3, #0
 8005312:	d003      	beq.n	800531c <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	2200      	movs	r2, #0
 8005318:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800531c:	68bb      	ldr	r3, [r7, #8]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d003      	beq.n	800532a <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	68ba      	ldr	r2, [r7, #8]
 8005326:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	2201      	movs	r2, #1
 800532e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	79fa      	ldrb	r2, [r7, #7]
 8005336:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8005338:	68f8      	ldr	r0, [r7, #12]
 800533a:	f001 fb4d 	bl	80069d8 <USBD_LL_Init>

  return USBD_OK;
 800533e:	2300      	movs	r3, #0
}
 8005340:	4618      	mov	r0, r3
 8005342:	3710      	adds	r7, #16
 8005344:	46bd      	mov	sp, r7
 8005346:	bd80      	pop	{r7, pc}

08005348 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005348:	b480      	push	{r7}
 800534a:	b085      	sub	sp, #20
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
 8005350:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8005352:	2300      	movs	r3, #0
 8005354:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d006      	beq.n	800536a <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	683a      	ldr	r2, [r7, #0]
 8005360:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8005364:	2300      	movs	r3, #0
 8005366:	73fb      	strb	r3, [r7, #15]
 8005368:	e001      	b.n	800536e <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800536a:	2302      	movs	r3, #2
 800536c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800536e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005370:	4618      	mov	r0, r3
 8005372:	3714      	adds	r7, #20
 8005374:	46bd      	mov	sp, r7
 8005376:	bc80      	pop	{r7}
 8005378:	4770      	bx	lr

0800537a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800537a:	b580      	push	{r7, lr}
 800537c:	b082      	sub	sp, #8
 800537e:	af00      	add	r7, sp, #0
 8005380:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8005382:	6878      	ldr	r0, [r7, #4]
 8005384:	f001 fb82 	bl	8006a8c <USBD_LL_Start>

  return USBD_OK;
 8005388:	2300      	movs	r3, #0
}
 800538a:	4618      	mov	r0, r3
 800538c:	3708      	adds	r7, #8
 800538e:	46bd      	mov	sp, r7
 8005390:	bd80      	pop	{r7, pc}

08005392 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8005392:	b480      	push	{r7}
 8005394:	b083      	sub	sp, #12
 8005396:	af00      	add	r7, sp, #0
 8005398:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800539a:	2300      	movs	r3, #0
}
 800539c:	4618      	mov	r0, r3
 800539e:	370c      	adds	r7, #12
 80053a0:	46bd      	mov	sp, r7
 80053a2:	bc80      	pop	{r7}
 80053a4:	4770      	bx	lr

080053a6 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80053a6:	b580      	push	{r7, lr}
 80053a8:	b084      	sub	sp, #16
 80053aa:	af00      	add	r7, sp, #0
 80053ac:	6078      	str	r0, [r7, #4]
 80053ae:	460b      	mov	r3, r1
 80053b0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80053b2:	2302      	movs	r3, #2
 80053b4:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d00c      	beq.n	80053da <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	78fa      	ldrb	r2, [r7, #3]
 80053ca:	4611      	mov	r1, r2
 80053cc:	6878      	ldr	r0, [r7, #4]
 80053ce:	4798      	blx	r3
 80053d0:	4603      	mov	r3, r0
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d101      	bne.n	80053da <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80053d6:	2300      	movs	r3, #0
 80053d8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80053da:	7bfb      	ldrb	r3, [r7, #15]
}
 80053dc:	4618      	mov	r0, r3
 80053de:	3710      	adds	r7, #16
 80053e0:	46bd      	mov	sp, r7
 80053e2:	bd80      	pop	{r7, pc}

080053e4 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b082      	sub	sp, #8
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
 80053ec:	460b      	mov	r3, r1
 80053ee:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80053f6:	685b      	ldr	r3, [r3, #4]
 80053f8:	78fa      	ldrb	r2, [r7, #3]
 80053fa:	4611      	mov	r1, r2
 80053fc:	6878      	ldr	r0, [r7, #4]
 80053fe:	4798      	blx	r3

  return USBD_OK;
 8005400:	2300      	movs	r3, #0
}
 8005402:	4618      	mov	r0, r3
 8005404:	3708      	adds	r7, #8
 8005406:	46bd      	mov	sp, r7
 8005408:	bd80      	pop	{r7, pc}

0800540a <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800540a:	b580      	push	{r7, lr}
 800540c:	b082      	sub	sp, #8
 800540e:	af00      	add	r7, sp, #0
 8005410:	6078      	str	r0, [r7, #4]
 8005412:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800541a:	6839      	ldr	r1, [r7, #0]
 800541c:	4618      	mov	r0, r3
 800541e:	f000 fecb 	bl	80061b8 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2201      	movs	r2, #1
 8005426:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005430:	461a      	mov	r2, r3
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800543e:	f003 031f 	and.w	r3, r3, #31
 8005442:	2b01      	cmp	r3, #1
 8005444:	d00c      	beq.n	8005460 <USBD_LL_SetupStage+0x56>
 8005446:	2b01      	cmp	r3, #1
 8005448:	d302      	bcc.n	8005450 <USBD_LL_SetupStage+0x46>
 800544a:	2b02      	cmp	r3, #2
 800544c:	d010      	beq.n	8005470 <USBD_LL_SetupStage+0x66>
 800544e:	e017      	b.n	8005480 <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005456:	4619      	mov	r1, r3
 8005458:	6878      	ldr	r0, [r7, #4]
 800545a:	f000 f9cb 	bl	80057f4 <USBD_StdDevReq>
      break;
 800545e:	e01a      	b.n	8005496 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005466:	4619      	mov	r1, r3
 8005468:	6878      	ldr	r0, [r7, #4]
 800546a:	f000 fa2d 	bl	80058c8 <USBD_StdItfReq>
      break;
 800546e:	e012      	b.n	8005496 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005476:	4619      	mov	r1, r3
 8005478:	6878      	ldr	r0, [r7, #4]
 800547a:	f000 fa6b 	bl	8005954 <USBD_StdEPReq>
      break;
 800547e:	e00a      	b.n	8005496 <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005486:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800548a:	b2db      	uxtb	r3, r3
 800548c:	4619      	mov	r1, r3
 800548e:	6878      	ldr	r0, [r7, #4]
 8005490:	f001 fb5c 	bl	8006b4c <USBD_LL_StallEP>
      break;
 8005494:	bf00      	nop
  }

  return USBD_OK;
 8005496:	2300      	movs	r3, #0
}
 8005498:	4618      	mov	r0, r3
 800549a:	3708      	adds	r7, #8
 800549c:	46bd      	mov	sp, r7
 800549e:	bd80      	pop	{r7, pc}

080054a0 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b086      	sub	sp, #24
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	60f8      	str	r0, [r7, #12]
 80054a8:	460b      	mov	r3, r1
 80054aa:	607a      	str	r2, [r7, #4]
 80054ac:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80054ae:	7afb      	ldrb	r3, [r7, #11]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d14b      	bne.n	800554c <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80054ba:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80054c2:	2b03      	cmp	r3, #3
 80054c4:	d134      	bne.n	8005530 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80054c6:	697b      	ldr	r3, [r7, #20]
 80054c8:	68da      	ldr	r2, [r3, #12]
 80054ca:	697b      	ldr	r3, [r7, #20]
 80054cc:	691b      	ldr	r3, [r3, #16]
 80054ce:	429a      	cmp	r2, r3
 80054d0:	d919      	bls.n	8005506 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80054d2:	697b      	ldr	r3, [r7, #20]
 80054d4:	68da      	ldr	r2, [r3, #12]
 80054d6:	697b      	ldr	r3, [r7, #20]
 80054d8:	691b      	ldr	r3, [r3, #16]
 80054da:	1ad2      	subs	r2, r2, r3
 80054dc:	697b      	ldr	r3, [r7, #20]
 80054de:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80054e0:	697b      	ldr	r3, [r7, #20]
 80054e2:	68da      	ldr	r2, [r3, #12]
 80054e4:	697b      	ldr	r3, [r7, #20]
 80054e6:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80054e8:	429a      	cmp	r2, r3
 80054ea:	d203      	bcs.n	80054f4 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80054ec:	697b      	ldr	r3, [r7, #20]
 80054ee:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80054f0:	b29b      	uxth	r3, r3
 80054f2:	e002      	b.n	80054fa <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80054f4:	697b      	ldr	r3, [r7, #20]
 80054f6:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80054f8:	b29b      	uxth	r3, r3
 80054fa:	461a      	mov	r2, r3
 80054fc:	6879      	ldr	r1, [r7, #4]
 80054fe:	68f8      	ldr	r0, [r7, #12]
 8005500:	f000 ff4c 	bl	800639c <USBD_CtlContinueRx>
 8005504:	e038      	b.n	8005578 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800550c:	691b      	ldr	r3, [r3, #16]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d00a      	beq.n	8005528 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005518:	2b03      	cmp	r3, #3
 800551a:	d105      	bne.n	8005528 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005522:	691b      	ldr	r3, [r3, #16]
 8005524:	68f8      	ldr	r0, [r7, #12]
 8005526:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8005528:	68f8      	ldr	r0, [r7, #12]
 800552a:	f000 ff49 	bl	80063c0 <USBD_CtlSendStatus>
 800552e:	e023      	b.n	8005578 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005536:	2b05      	cmp	r3, #5
 8005538:	d11e      	bne.n	8005578 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	2200      	movs	r2, #0
 800553e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8005542:	2100      	movs	r1, #0
 8005544:	68f8      	ldr	r0, [r7, #12]
 8005546:	f001 fb01 	bl	8006b4c <USBD_LL_StallEP>
 800554a:	e015      	b.n	8005578 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005552:	699b      	ldr	r3, [r3, #24]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d00d      	beq.n	8005574 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800555e:	2b03      	cmp	r3, #3
 8005560:	d108      	bne.n	8005574 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005568:	699b      	ldr	r3, [r3, #24]
 800556a:	7afa      	ldrb	r2, [r7, #11]
 800556c:	4611      	mov	r1, r2
 800556e:	68f8      	ldr	r0, [r7, #12]
 8005570:	4798      	blx	r3
 8005572:	e001      	b.n	8005578 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005574:	2302      	movs	r3, #2
 8005576:	e000      	b.n	800557a <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8005578:	2300      	movs	r3, #0
}
 800557a:	4618      	mov	r0, r3
 800557c:	3718      	adds	r7, #24
 800557e:	46bd      	mov	sp, r7
 8005580:	bd80      	pop	{r7, pc}

08005582 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005582:	b580      	push	{r7, lr}
 8005584:	b086      	sub	sp, #24
 8005586:	af00      	add	r7, sp, #0
 8005588:	60f8      	str	r0, [r7, #12]
 800558a:	460b      	mov	r3, r1
 800558c:	607a      	str	r2, [r7, #4]
 800558e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8005590:	7afb      	ldrb	r3, [r7, #11]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d17f      	bne.n	8005696 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	3314      	adds	r3, #20
 800559a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80055a2:	2b02      	cmp	r3, #2
 80055a4:	d15c      	bne.n	8005660 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80055a6:	697b      	ldr	r3, [r7, #20]
 80055a8:	68da      	ldr	r2, [r3, #12]
 80055aa:	697b      	ldr	r3, [r7, #20]
 80055ac:	691b      	ldr	r3, [r3, #16]
 80055ae:	429a      	cmp	r2, r3
 80055b0:	d915      	bls.n	80055de <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80055b2:	697b      	ldr	r3, [r7, #20]
 80055b4:	68da      	ldr	r2, [r3, #12]
 80055b6:	697b      	ldr	r3, [r7, #20]
 80055b8:	691b      	ldr	r3, [r3, #16]
 80055ba:	1ad2      	subs	r2, r2, r3
 80055bc:	697b      	ldr	r3, [r7, #20]
 80055be:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80055c0:	697b      	ldr	r3, [r7, #20]
 80055c2:	68db      	ldr	r3, [r3, #12]
 80055c4:	b29b      	uxth	r3, r3
 80055c6:	461a      	mov	r2, r3
 80055c8:	6879      	ldr	r1, [r7, #4]
 80055ca:	68f8      	ldr	r0, [r7, #12]
 80055cc:	f000 feb6 	bl	800633c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80055d0:	2300      	movs	r3, #0
 80055d2:	2200      	movs	r2, #0
 80055d4:	2100      	movs	r1, #0
 80055d6:	68f8      	ldr	r0, [r7, #12]
 80055d8:	f001 fb5d 	bl	8006c96 <USBD_LL_PrepareReceive>
 80055dc:	e04e      	b.n	800567c <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80055de:	697b      	ldr	r3, [r7, #20]
 80055e0:	689b      	ldr	r3, [r3, #8]
 80055e2:	697a      	ldr	r2, [r7, #20]
 80055e4:	6912      	ldr	r2, [r2, #16]
 80055e6:	fbb3 f1f2 	udiv	r1, r3, r2
 80055ea:	fb02 f201 	mul.w	r2, r2, r1
 80055ee:	1a9b      	subs	r3, r3, r2
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d11c      	bne.n	800562e <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80055f4:	697b      	ldr	r3, [r7, #20]
 80055f6:	689a      	ldr	r2, [r3, #8]
 80055f8:	697b      	ldr	r3, [r7, #20]
 80055fa:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80055fc:	429a      	cmp	r2, r3
 80055fe:	d316      	bcc.n	800562e <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8005600:	697b      	ldr	r3, [r7, #20]
 8005602:	689a      	ldr	r2, [r3, #8]
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800560a:	429a      	cmp	r2, r3
 800560c:	d20f      	bcs.n	800562e <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800560e:	2200      	movs	r2, #0
 8005610:	2100      	movs	r1, #0
 8005612:	68f8      	ldr	r0, [r7, #12]
 8005614:	f000 fe92 	bl	800633c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	2200      	movs	r2, #0
 800561c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005620:	2300      	movs	r3, #0
 8005622:	2200      	movs	r2, #0
 8005624:	2100      	movs	r1, #0
 8005626:	68f8      	ldr	r0, [r7, #12]
 8005628:	f001 fb35 	bl	8006c96 <USBD_LL_PrepareReceive>
 800562c:	e026      	b.n	800567c <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005634:	68db      	ldr	r3, [r3, #12]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d00a      	beq.n	8005650 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005640:	2b03      	cmp	r3, #3
 8005642:	d105      	bne.n	8005650 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800564a:	68db      	ldr	r3, [r3, #12]
 800564c:	68f8      	ldr	r0, [r7, #12]
 800564e:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8005650:	2180      	movs	r1, #128	; 0x80
 8005652:	68f8      	ldr	r0, [r7, #12]
 8005654:	f001 fa7a 	bl	8006b4c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8005658:	68f8      	ldr	r0, [r7, #12]
 800565a:	f000 fec4 	bl	80063e6 <USBD_CtlReceiveStatus>
 800565e:	e00d      	b.n	800567c <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005666:	2b04      	cmp	r3, #4
 8005668:	d004      	beq.n	8005674 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8005670:	2b00      	cmp	r3, #0
 8005672:	d103      	bne.n	800567c <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8005674:	2180      	movs	r1, #128	; 0x80
 8005676:	68f8      	ldr	r0, [r7, #12]
 8005678:	f001 fa68 	bl	8006b4c <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005682:	2b01      	cmp	r3, #1
 8005684:	d11d      	bne.n	80056c2 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8005686:	68f8      	ldr	r0, [r7, #12]
 8005688:	f7ff fe83 	bl	8005392 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	2200      	movs	r2, #0
 8005690:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005694:	e015      	b.n	80056c2 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800569c:	695b      	ldr	r3, [r3, #20]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d00d      	beq.n	80056be <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80056a8:	2b03      	cmp	r3, #3
 80056aa:	d108      	bne.n	80056be <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80056b2:	695b      	ldr	r3, [r3, #20]
 80056b4:	7afa      	ldrb	r2, [r7, #11]
 80056b6:	4611      	mov	r1, r2
 80056b8:	68f8      	ldr	r0, [r7, #12]
 80056ba:	4798      	blx	r3
 80056bc:	e001      	b.n	80056c2 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80056be:	2302      	movs	r3, #2
 80056c0:	e000      	b.n	80056c4 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80056c2:	2300      	movs	r3, #0
}
 80056c4:	4618      	mov	r0, r3
 80056c6:	3718      	adds	r7, #24
 80056c8:	46bd      	mov	sp, r7
 80056ca:	bd80      	pop	{r7, pc}

080056cc <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b082      	sub	sp, #8
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80056d4:	2340      	movs	r3, #64	; 0x40
 80056d6:	2200      	movs	r2, #0
 80056d8:	2100      	movs	r1, #0
 80056da:	6878      	ldr	r0, [r7, #4]
 80056dc:	f001 f9f1 	bl	8006ac2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2201      	movs	r2, #1
 80056e4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2240      	movs	r2, #64	; 0x40
 80056ec:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80056f0:	2340      	movs	r3, #64	; 0x40
 80056f2:	2200      	movs	r2, #0
 80056f4:	2180      	movs	r1, #128	; 0x80
 80056f6:	6878      	ldr	r0, [r7, #4]
 80056f8:	f001 f9e3 	bl	8006ac2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2201      	movs	r2, #1
 8005700:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2240      	movs	r2, #64	; 0x40
 8005706:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2201      	movs	r2, #1
 800570c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2200      	movs	r2, #0
 8005714:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2200      	movs	r2, #0
 800571c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2200      	movs	r2, #0
 8005722:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800572c:	2b00      	cmp	r3, #0
 800572e:	d009      	beq.n	8005744 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005736:	685b      	ldr	r3, [r3, #4]
 8005738:	687a      	ldr	r2, [r7, #4]
 800573a:	6852      	ldr	r2, [r2, #4]
 800573c:	b2d2      	uxtb	r2, r2
 800573e:	4611      	mov	r1, r2
 8005740:	6878      	ldr	r0, [r7, #4]
 8005742:	4798      	blx	r3
  }

  return USBD_OK;
 8005744:	2300      	movs	r3, #0
}
 8005746:	4618      	mov	r0, r3
 8005748:	3708      	adds	r7, #8
 800574a:	46bd      	mov	sp, r7
 800574c:	bd80      	pop	{r7, pc}

0800574e <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800574e:	b480      	push	{r7}
 8005750:	b083      	sub	sp, #12
 8005752:	af00      	add	r7, sp, #0
 8005754:	6078      	str	r0, [r7, #4]
 8005756:	460b      	mov	r3, r1
 8005758:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	78fa      	ldrb	r2, [r7, #3]
 800575e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005760:	2300      	movs	r3, #0
}
 8005762:	4618      	mov	r0, r3
 8005764:	370c      	adds	r7, #12
 8005766:	46bd      	mov	sp, r7
 8005768:	bc80      	pop	{r7}
 800576a:	4770      	bx	lr

0800576c <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800576c:	b480      	push	{r7}
 800576e:	b083      	sub	sp, #12
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2204      	movs	r2, #4
 8005784:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005788:	2300      	movs	r3, #0
}
 800578a:	4618      	mov	r0, r3
 800578c:	370c      	adds	r7, #12
 800578e:	46bd      	mov	sp, r7
 8005790:	bc80      	pop	{r7}
 8005792:	4770      	bx	lr

08005794 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005794:	b480      	push	{r7}
 8005796:	b083      	sub	sp, #12
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80057a2:	2b04      	cmp	r3, #4
 80057a4:	d105      	bne.n	80057b2 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80057b2:	2300      	movs	r3, #0
}
 80057b4:	4618      	mov	r0, r3
 80057b6:	370c      	adds	r7, #12
 80057b8:	46bd      	mov	sp, r7
 80057ba:	bc80      	pop	{r7}
 80057bc:	4770      	bx	lr

080057be <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80057be:	b580      	push	{r7, lr}
 80057c0:	b082      	sub	sp, #8
 80057c2:	af00      	add	r7, sp, #0
 80057c4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80057cc:	2b03      	cmp	r3, #3
 80057ce:	d10b      	bne.n	80057e8 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80057d6:	69db      	ldr	r3, [r3, #28]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d005      	beq.n	80057e8 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80057e2:	69db      	ldr	r3, [r3, #28]
 80057e4:	6878      	ldr	r0, [r7, #4]
 80057e6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80057e8:	2300      	movs	r3, #0
}
 80057ea:	4618      	mov	r0, r3
 80057ec:	3708      	adds	r7, #8
 80057ee:	46bd      	mov	sp, r7
 80057f0:	bd80      	pop	{r7, pc}
	...

080057f4 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b084      	sub	sp, #16
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
 80057fc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80057fe:	2300      	movs	r3, #0
 8005800:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	781b      	ldrb	r3, [r3, #0]
 8005806:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800580a:	2b20      	cmp	r3, #32
 800580c:	d004      	beq.n	8005818 <USBD_StdDevReq+0x24>
 800580e:	2b40      	cmp	r3, #64	; 0x40
 8005810:	d002      	beq.n	8005818 <USBD_StdDevReq+0x24>
 8005812:	2b00      	cmp	r3, #0
 8005814:	d008      	beq.n	8005828 <USBD_StdDevReq+0x34>
 8005816:	e04c      	b.n	80058b2 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800581e:	689b      	ldr	r3, [r3, #8]
 8005820:	6839      	ldr	r1, [r7, #0]
 8005822:	6878      	ldr	r0, [r7, #4]
 8005824:	4798      	blx	r3
      break;
 8005826:	e049      	b.n	80058bc <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	785b      	ldrb	r3, [r3, #1]
 800582c:	2b09      	cmp	r3, #9
 800582e:	d83a      	bhi.n	80058a6 <USBD_StdDevReq+0xb2>
 8005830:	a201      	add	r2, pc, #4	; (adr r2, 8005838 <USBD_StdDevReq+0x44>)
 8005832:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005836:	bf00      	nop
 8005838:	08005889 	.word	0x08005889
 800583c:	0800589d 	.word	0x0800589d
 8005840:	080058a7 	.word	0x080058a7
 8005844:	08005893 	.word	0x08005893
 8005848:	080058a7 	.word	0x080058a7
 800584c:	0800586b 	.word	0x0800586b
 8005850:	08005861 	.word	0x08005861
 8005854:	080058a7 	.word	0x080058a7
 8005858:	0800587f 	.word	0x0800587f
 800585c:	08005875 	.word	0x08005875
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005860:	6839      	ldr	r1, [r7, #0]
 8005862:	6878      	ldr	r0, [r7, #4]
 8005864:	f000 f9d4 	bl	8005c10 <USBD_GetDescriptor>
          break;
 8005868:	e022      	b.n	80058b0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800586a:	6839      	ldr	r1, [r7, #0]
 800586c:	6878      	ldr	r0, [r7, #4]
 800586e:	f000 fb37 	bl	8005ee0 <USBD_SetAddress>
          break;
 8005872:	e01d      	b.n	80058b0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8005874:	6839      	ldr	r1, [r7, #0]
 8005876:	6878      	ldr	r0, [r7, #4]
 8005878:	f000 fb74 	bl	8005f64 <USBD_SetConfig>
          break;
 800587c:	e018      	b.n	80058b0 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800587e:	6839      	ldr	r1, [r7, #0]
 8005880:	6878      	ldr	r0, [r7, #4]
 8005882:	f000 fbfd 	bl	8006080 <USBD_GetConfig>
          break;
 8005886:	e013      	b.n	80058b0 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8005888:	6839      	ldr	r1, [r7, #0]
 800588a:	6878      	ldr	r0, [r7, #4]
 800588c:	f000 fc2c 	bl	80060e8 <USBD_GetStatus>
          break;
 8005890:	e00e      	b.n	80058b0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8005892:	6839      	ldr	r1, [r7, #0]
 8005894:	6878      	ldr	r0, [r7, #4]
 8005896:	f000 fc5a 	bl	800614e <USBD_SetFeature>
          break;
 800589a:	e009      	b.n	80058b0 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800589c:	6839      	ldr	r1, [r7, #0]
 800589e:	6878      	ldr	r0, [r7, #4]
 80058a0:	f000 fc69 	bl	8006176 <USBD_ClrFeature>
          break;
 80058a4:	e004      	b.n	80058b0 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80058a6:	6839      	ldr	r1, [r7, #0]
 80058a8:	6878      	ldr	r0, [r7, #4]
 80058aa:	f000 fcc1 	bl	8006230 <USBD_CtlError>
          break;
 80058ae:	bf00      	nop
      }
      break;
 80058b0:	e004      	b.n	80058bc <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80058b2:	6839      	ldr	r1, [r7, #0]
 80058b4:	6878      	ldr	r0, [r7, #4]
 80058b6:	f000 fcbb 	bl	8006230 <USBD_CtlError>
      break;
 80058ba:	bf00      	nop
  }

  return ret;
 80058bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80058be:	4618      	mov	r0, r3
 80058c0:	3710      	adds	r7, #16
 80058c2:	46bd      	mov	sp, r7
 80058c4:	bd80      	pop	{r7, pc}
 80058c6:	bf00      	nop

080058c8 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b084      	sub	sp, #16
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
 80058d0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80058d2:	2300      	movs	r3, #0
 80058d4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	781b      	ldrb	r3, [r3, #0]
 80058da:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80058de:	2b20      	cmp	r3, #32
 80058e0:	d003      	beq.n	80058ea <USBD_StdItfReq+0x22>
 80058e2:	2b40      	cmp	r3, #64	; 0x40
 80058e4:	d001      	beq.n	80058ea <USBD_StdItfReq+0x22>
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d12a      	bne.n	8005940 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80058f0:	3b01      	subs	r3, #1
 80058f2:	2b02      	cmp	r3, #2
 80058f4:	d81d      	bhi.n	8005932 <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	889b      	ldrh	r3, [r3, #4]
 80058fa:	b2db      	uxtb	r3, r3
 80058fc:	2b01      	cmp	r3, #1
 80058fe:	d813      	bhi.n	8005928 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005906:	689b      	ldr	r3, [r3, #8]
 8005908:	6839      	ldr	r1, [r7, #0]
 800590a:	6878      	ldr	r0, [r7, #4]
 800590c:	4798      	blx	r3
 800590e:	4603      	mov	r3, r0
 8005910:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	88db      	ldrh	r3, [r3, #6]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d110      	bne.n	800593c <USBD_StdItfReq+0x74>
 800591a:	7bfb      	ldrb	r3, [r7, #15]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d10d      	bne.n	800593c <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 8005920:	6878      	ldr	r0, [r7, #4]
 8005922:	f000 fd4d 	bl	80063c0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8005926:	e009      	b.n	800593c <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 8005928:	6839      	ldr	r1, [r7, #0]
 800592a:	6878      	ldr	r0, [r7, #4]
 800592c:	f000 fc80 	bl	8006230 <USBD_CtlError>
          break;
 8005930:	e004      	b.n	800593c <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 8005932:	6839      	ldr	r1, [r7, #0]
 8005934:	6878      	ldr	r0, [r7, #4]
 8005936:	f000 fc7b 	bl	8006230 <USBD_CtlError>
          break;
 800593a:	e000      	b.n	800593e <USBD_StdItfReq+0x76>
          break;
 800593c:	bf00      	nop
      }
      break;
 800593e:	e004      	b.n	800594a <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 8005940:	6839      	ldr	r1, [r7, #0]
 8005942:	6878      	ldr	r0, [r7, #4]
 8005944:	f000 fc74 	bl	8006230 <USBD_CtlError>
      break;
 8005948:	bf00      	nop
  }

  return USBD_OK;
 800594a:	2300      	movs	r3, #0
}
 800594c:	4618      	mov	r0, r3
 800594e:	3710      	adds	r7, #16
 8005950:	46bd      	mov	sp, r7
 8005952:	bd80      	pop	{r7, pc}

08005954 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b084      	sub	sp, #16
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
 800595c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800595e:	2300      	movs	r3, #0
 8005960:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	889b      	ldrh	r3, [r3, #4]
 8005966:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	781b      	ldrb	r3, [r3, #0]
 800596c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005970:	2b20      	cmp	r3, #32
 8005972:	d004      	beq.n	800597e <USBD_StdEPReq+0x2a>
 8005974:	2b40      	cmp	r3, #64	; 0x40
 8005976:	d002      	beq.n	800597e <USBD_StdEPReq+0x2a>
 8005978:	2b00      	cmp	r3, #0
 800597a:	d008      	beq.n	800598e <USBD_StdEPReq+0x3a>
 800597c:	e13d      	b.n	8005bfa <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005984:	689b      	ldr	r3, [r3, #8]
 8005986:	6839      	ldr	r1, [r7, #0]
 8005988:	6878      	ldr	r0, [r7, #4]
 800598a:	4798      	blx	r3
      break;
 800598c:	e13a      	b.n	8005c04 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	781b      	ldrb	r3, [r3, #0]
 8005992:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005996:	2b20      	cmp	r3, #32
 8005998:	d10a      	bne.n	80059b0 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80059a0:	689b      	ldr	r3, [r3, #8]
 80059a2:	6839      	ldr	r1, [r7, #0]
 80059a4:	6878      	ldr	r0, [r7, #4]
 80059a6:	4798      	blx	r3
 80059a8:	4603      	mov	r3, r0
 80059aa:	73fb      	strb	r3, [r7, #15]

        return ret;
 80059ac:	7bfb      	ldrb	r3, [r7, #15]
 80059ae:	e12a      	b.n	8005c06 <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	785b      	ldrb	r3, [r3, #1]
 80059b4:	2b01      	cmp	r3, #1
 80059b6:	d03e      	beq.n	8005a36 <USBD_StdEPReq+0xe2>
 80059b8:	2b03      	cmp	r3, #3
 80059ba:	d002      	beq.n	80059c2 <USBD_StdEPReq+0x6e>
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d070      	beq.n	8005aa2 <USBD_StdEPReq+0x14e>
 80059c0:	e115      	b.n	8005bee <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80059c8:	2b02      	cmp	r3, #2
 80059ca:	d002      	beq.n	80059d2 <USBD_StdEPReq+0x7e>
 80059cc:	2b03      	cmp	r3, #3
 80059ce:	d015      	beq.n	80059fc <USBD_StdEPReq+0xa8>
 80059d0:	e02b      	b.n	8005a2a <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80059d2:	7bbb      	ldrb	r3, [r7, #14]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d00c      	beq.n	80059f2 <USBD_StdEPReq+0x9e>
 80059d8:	7bbb      	ldrb	r3, [r7, #14]
 80059da:	2b80      	cmp	r3, #128	; 0x80
 80059dc:	d009      	beq.n	80059f2 <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80059de:	7bbb      	ldrb	r3, [r7, #14]
 80059e0:	4619      	mov	r1, r3
 80059e2:	6878      	ldr	r0, [r7, #4]
 80059e4:	f001 f8b2 	bl	8006b4c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80059e8:	2180      	movs	r1, #128	; 0x80
 80059ea:	6878      	ldr	r0, [r7, #4]
 80059ec:	f001 f8ae 	bl	8006b4c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80059f0:	e020      	b.n	8005a34 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 80059f2:	6839      	ldr	r1, [r7, #0]
 80059f4:	6878      	ldr	r0, [r7, #4]
 80059f6:	f000 fc1b 	bl	8006230 <USBD_CtlError>
              break;
 80059fa:	e01b      	b.n	8005a34 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	885b      	ldrh	r3, [r3, #2]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d10e      	bne.n	8005a22 <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 8005a04:	7bbb      	ldrb	r3, [r7, #14]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d00b      	beq.n	8005a22 <USBD_StdEPReq+0xce>
 8005a0a:	7bbb      	ldrb	r3, [r7, #14]
 8005a0c:	2b80      	cmp	r3, #128	; 0x80
 8005a0e:	d008      	beq.n	8005a22 <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	88db      	ldrh	r3, [r3, #6]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d104      	bne.n	8005a22 <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8005a18:	7bbb      	ldrb	r3, [r7, #14]
 8005a1a:	4619      	mov	r1, r3
 8005a1c:	6878      	ldr	r0, [r7, #4]
 8005a1e:	f001 f895 	bl	8006b4c <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8005a22:	6878      	ldr	r0, [r7, #4]
 8005a24:	f000 fccc 	bl	80063c0 <USBD_CtlSendStatus>

              break;
 8005a28:	e004      	b.n	8005a34 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 8005a2a:	6839      	ldr	r1, [r7, #0]
 8005a2c:	6878      	ldr	r0, [r7, #4]
 8005a2e:	f000 fbff 	bl	8006230 <USBD_CtlError>
              break;
 8005a32:	bf00      	nop
          }
          break;
 8005a34:	e0e0      	b.n	8005bf8 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a3c:	2b02      	cmp	r3, #2
 8005a3e:	d002      	beq.n	8005a46 <USBD_StdEPReq+0xf2>
 8005a40:	2b03      	cmp	r3, #3
 8005a42:	d015      	beq.n	8005a70 <USBD_StdEPReq+0x11c>
 8005a44:	e026      	b.n	8005a94 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005a46:	7bbb      	ldrb	r3, [r7, #14]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d00c      	beq.n	8005a66 <USBD_StdEPReq+0x112>
 8005a4c:	7bbb      	ldrb	r3, [r7, #14]
 8005a4e:	2b80      	cmp	r3, #128	; 0x80
 8005a50:	d009      	beq.n	8005a66 <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8005a52:	7bbb      	ldrb	r3, [r7, #14]
 8005a54:	4619      	mov	r1, r3
 8005a56:	6878      	ldr	r0, [r7, #4]
 8005a58:	f001 f878 	bl	8006b4c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8005a5c:	2180      	movs	r1, #128	; 0x80
 8005a5e:	6878      	ldr	r0, [r7, #4]
 8005a60:	f001 f874 	bl	8006b4c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005a64:	e01c      	b.n	8005aa0 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 8005a66:	6839      	ldr	r1, [r7, #0]
 8005a68:	6878      	ldr	r0, [r7, #4]
 8005a6a:	f000 fbe1 	bl	8006230 <USBD_CtlError>
              break;
 8005a6e:	e017      	b.n	8005aa0 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	885b      	ldrh	r3, [r3, #2]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d112      	bne.n	8005a9e <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8005a78:	7bbb      	ldrb	r3, [r7, #14]
 8005a7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d004      	beq.n	8005a8c <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8005a82:	7bbb      	ldrb	r3, [r7, #14]
 8005a84:	4619      	mov	r1, r3
 8005a86:	6878      	ldr	r0, [r7, #4]
 8005a88:	f001 f87f 	bl	8006b8a <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8005a8c:	6878      	ldr	r0, [r7, #4]
 8005a8e:	f000 fc97 	bl	80063c0 <USBD_CtlSendStatus>
              }
              break;
 8005a92:	e004      	b.n	8005a9e <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 8005a94:	6839      	ldr	r1, [r7, #0]
 8005a96:	6878      	ldr	r0, [r7, #4]
 8005a98:	f000 fbca 	bl	8006230 <USBD_CtlError>
              break;
 8005a9c:	e000      	b.n	8005aa0 <USBD_StdEPReq+0x14c>
              break;
 8005a9e:	bf00      	nop
          }
          break;
 8005aa0:	e0aa      	b.n	8005bf8 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005aa8:	2b02      	cmp	r3, #2
 8005aaa:	d002      	beq.n	8005ab2 <USBD_StdEPReq+0x15e>
 8005aac:	2b03      	cmp	r3, #3
 8005aae:	d032      	beq.n	8005b16 <USBD_StdEPReq+0x1c2>
 8005ab0:	e097      	b.n	8005be2 <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005ab2:	7bbb      	ldrb	r3, [r7, #14]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d007      	beq.n	8005ac8 <USBD_StdEPReq+0x174>
 8005ab8:	7bbb      	ldrb	r3, [r7, #14]
 8005aba:	2b80      	cmp	r3, #128	; 0x80
 8005abc:	d004      	beq.n	8005ac8 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 8005abe:	6839      	ldr	r1, [r7, #0]
 8005ac0:	6878      	ldr	r0, [r7, #4]
 8005ac2:	f000 fbb5 	bl	8006230 <USBD_CtlError>
                break;
 8005ac6:	e091      	b.n	8005bec <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005ac8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	da0b      	bge.n	8005ae8 <USBD_StdEPReq+0x194>
 8005ad0:	7bbb      	ldrb	r3, [r7, #14]
 8005ad2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005ad6:	4613      	mov	r3, r2
 8005ad8:	009b      	lsls	r3, r3, #2
 8005ada:	4413      	add	r3, r2
 8005adc:	009b      	lsls	r3, r3, #2
 8005ade:	3310      	adds	r3, #16
 8005ae0:	687a      	ldr	r2, [r7, #4]
 8005ae2:	4413      	add	r3, r2
 8005ae4:	3304      	adds	r3, #4
 8005ae6:	e00b      	b.n	8005b00 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005ae8:	7bbb      	ldrb	r3, [r7, #14]
 8005aea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005aee:	4613      	mov	r3, r2
 8005af0:	009b      	lsls	r3, r3, #2
 8005af2:	4413      	add	r3, r2
 8005af4:	009b      	lsls	r3, r3, #2
 8005af6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005afa:	687a      	ldr	r2, [r7, #4]
 8005afc:	4413      	add	r3, r2
 8005afe:	3304      	adds	r3, #4
 8005b00:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8005b02:	68bb      	ldr	r3, [r7, #8]
 8005b04:	2200      	movs	r2, #0
 8005b06:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005b08:	68bb      	ldr	r3, [r7, #8]
 8005b0a:	2202      	movs	r2, #2
 8005b0c:	4619      	mov	r1, r3
 8005b0e:	6878      	ldr	r0, [r7, #4]
 8005b10:	f000 fbf8 	bl	8006304 <USBD_CtlSendData>
              break;
 8005b14:	e06a      	b.n	8005bec <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8005b16:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	da11      	bge.n	8005b42 <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005b1e:	7bbb      	ldrb	r3, [r7, #14]
 8005b20:	f003 020f 	and.w	r2, r3, #15
 8005b24:	6879      	ldr	r1, [r7, #4]
 8005b26:	4613      	mov	r3, r2
 8005b28:	009b      	lsls	r3, r3, #2
 8005b2a:	4413      	add	r3, r2
 8005b2c:	009b      	lsls	r3, r3, #2
 8005b2e:	440b      	add	r3, r1
 8005b30:	3318      	adds	r3, #24
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d117      	bne.n	8005b68 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8005b38:	6839      	ldr	r1, [r7, #0]
 8005b3a:	6878      	ldr	r0, [r7, #4]
 8005b3c:	f000 fb78 	bl	8006230 <USBD_CtlError>
                  break;
 8005b40:	e054      	b.n	8005bec <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005b42:	7bbb      	ldrb	r3, [r7, #14]
 8005b44:	f003 020f 	and.w	r2, r3, #15
 8005b48:	6879      	ldr	r1, [r7, #4]
 8005b4a:	4613      	mov	r3, r2
 8005b4c:	009b      	lsls	r3, r3, #2
 8005b4e:	4413      	add	r3, r2
 8005b50:	009b      	lsls	r3, r3, #2
 8005b52:	440b      	add	r3, r1
 8005b54:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d104      	bne.n	8005b68 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8005b5e:	6839      	ldr	r1, [r7, #0]
 8005b60:	6878      	ldr	r0, [r7, #4]
 8005b62:	f000 fb65 	bl	8006230 <USBD_CtlError>
                  break;
 8005b66:	e041      	b.n	8005bec <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005b68:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	da0b      	bge.n	8005b88 <USBD_StdEPReq+0x234>
 8005b70:	7bbb      	ldrb	r3, [r7, #14]
 8005b72:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005b76:	4613      	mov	r3, r2
 8005b78:	009b      	lsls	r3, r3, #2
 8005b7a:	4413      	add	r3, r2
 8005b7c:	009b      	lsls	r3, r3, #2
 8005b7e:	3310      	adds	r3, #16
 8005b80:	687a      	ldr	r2, [r7, #4]
 8005b82:	4413      	add	r3, r2
 8005b84:	3304      	adds	r3, #4
 8005b86:	e00b      	b.n	8005ba0 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005b88:	7bbb      	ldrb	r3, [r7, #14]
 8005b8a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005b8e:	4613      	mov	r3, r2
 8005b90:	009b      	lsls	r3, r3, #2
 8005b92:	4413      	add	r3, r2
 8005b94:	009b      	lsls	r3, r3, #2
 8005b96:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005b9a:	687a      	ldr	r2, [r7, #4]
 8005b9c:	4413      	add	r3, r2
 8005b9e:	3304      	adds	r3, #4
 8005ba0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005ba2:	7bbb      	ldrb	r3, [r7, #14]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d002      	beq.n	8005bae <USBD_StdEPReq+0x25a>
 8005ba8:	7bbb      	ldrb	r3, [r7, #14]
 8005baa:	2b80      	cmp	r3, #128	; 0x80
 8005bac:	d103      	bne.n	8005bb6 <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 8005bae:	68bb      	ldr	r3, [r7, #8]
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	601a      	str	r2, [r3, #0]
 8005bb4:	e00e      	b.n	8005bd4 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8005bb6:	7bbb      	ldrb	r3, [r7, #14]
 8005bb8:	4619      	mov	r1, r3
 8005bba:	6878      	ldr	r0, [r7, #4]
 8005bbc:	f001 f804 	bl	8006bc8 <USBD_LL_IsStallEP>
 8005bc0:	4603      	mov	r3, r0
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d003      	beq.n	8005bce <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 8005bc6:	68bb      	ldr	r3, [r7, #8]
 8005bc8:	2201      	movs	r2, #1
 8005bca:	601a      	str	r2, [r3, #0]
 8005bcc:	e002      	b.n	8005bd4 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 8005bce:	68bb      	ldr	r3, [r7, #8]
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005bd4:	68bb      	ldr	r3, [r7, #8]
 8005bd6:	2202      	movs	r2, #2
 8005bd8:	4619      	mov	r1, r3
 8005bda:	6878      	ldr	r0, [r7, #4]
 8005bdc:	f000 fb92 	bl	8006304 <USBD_CtlSendData>
              break;
 8005be0:	e004      	b.n	8005bec <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 8005be2:	6839      	ldr	r1, [r7, #0]
 8005be4:	6878      	ldr	r0, [r7, #4]
 8005be6:	f000 fb23 	bl	8006230 <USBD_CtlError>
              break;
 8005bea:	bf00      	nop
          }
          break;
 8005bec:	e004      	b.n	8005bf8 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 8005bee:	6839      	ldr	r1, [r7, #0]
 8005bf0:	6878      	ldr	r0, [r7, #4]
 8005bf2:	f000 fb1d 	bl	8006230 <USBD_CtlError>
          break;
 8005bf6:	bf00      	nop
      }
      break;
 8005bf8:	e004      	b.n	8005c04 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 8005bfa:	6839      	ldr	r1, [r7, #0]
 8005bfc:	6878      	ldr	r0, [r7, #4]
 8005bfe:	f000 fb17 	bl	8006230 <USBD_CtlError>
      break;
 8005c02:	bf00      	nop
  }

  return ret;
 8005c04:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c06:	4618      	mov	r0, r3
 8005c08:	3710      	adds	r7, #16
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	bd80      	pop	{r7, pc}
	...

08005c10 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b084      	sub	sp, #16
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
 8005c18:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8005c1e:	2300      	movs	r3, #0
 8005c20:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8005c22:	2300      	movs	r3, #0
 8005c24:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	885b      	ldrh	r3, [r3, #2]
 8005c2a:	0a1b      	lsrs	r3, r3, #8
 8005c2c:	b29b      	uxth	r3, r3
 8005c2e:	3b01      	subs	r3, #1
 8005c30:	2b06      	cmp	r3, #6
 8005c32:	f200 8128 	bhi.w	8005e86 <USBD_GetDescriptor+0x276>
 8005c36:	a201      	add	r2, pc, #4	; (adr r2, 8005c3c <USBD_GetDescriptor+0x2c>)
 8005c38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c3c:	08005c59 	.word	0x08005c59
 8005c40:	08005c71 	.word	0x08005c71
 8005c44:	08005cb1 	.word	0x08005cb1
 8005c48:	08005e87 	.word	0x08005e87
 8005c4c:	08005e87 	.word	0x08005e87
 8005c50:	08005e27 	.word	0x08005e27
 8005c54:	08005e53 	.word	0x08005e53
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	687a      	ldr	r2, [r7, #4]
 8005c62:	7c12      	ldrb	r2, [r2, #16]
 8005c64:	f107 0108 	add.w	r1, r7, #8
 8005c68:	4610      	mov	r0, r2
 8005c6a:	4798      	blx	r3
 8005c6c:	60f8      	str	r0, [r7, #12]
      break;
 8005c6e:	e112      	b.n	8005e96 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	7c1b      	ldrb	r3, [r3, #16]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d10d      	bne.n	8005c94 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005c7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c80:	f107 0208 	add.w	r2, r7, #8
 8005c84:	4610      	mov	r0, r2
 8005c86:	4798      	blx	r3
 8005c88:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	3301      	adds	r3, #1
 8005c8e:	2202      	movs	r2, #2
 8005c90:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8005c92:	e100      	b.n	8005e96 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c9c:	f107 0208 	add.w	r2, r7, #8
 8005ca0:	4610      	mov	r0, r2
 8005ca2:	4798      	blx	r3
 8005ca4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	3301      	adds	r3, #1
 8005caa:	2202      	movs	r2, #2
 8005cac:	701a      	strb	r2, [r3, #0]
      break;
 8005cae:	e0f2      	b.n	8005e96 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	885b      	ldrh	r3, [r3, #2]
 8005cb4:	b2db      	uxtb	r3, r3
 8005cb6:	2b05      	cmp	r3, #5
 8005cb8:	f200 80ac 	bhi.w	8005e14 <USBD_GetDescriptor+0x204>
 8005cbc:	a201      	add	r2, pc, #4	; (adr r2, 8005cc4 <USBD_GetDescriptor+0xb4>)
 8005cbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cc2:	bf00      	nop
 8005cc4:	08005cdd 	.word	0x08005cdd
 8005cc8:	08005d11 	.word	0x08005d11
 8005ccc:	08005d45 	.word	0x08005d45
 8005cd0:	08005d79 	.word	0x08005d79
 8005cd4:	08005dad 	.word	0x08005dad
 8005cd8:	08005de1 	.word	0x08005de1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005ce2:	685b      	ldr	r3, [r3, #4]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d00b      	beq.n	8005d00 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005cee:	685b      	ldr	r3, [r3, #4]
 8005cf0:	687a      	ldr	r2, [r7, #4]
 8005cf2:	7c12      	ldrb	r2, [r2, #16]
 8005cf4:	f107 0108 	add.w	r1, r7, #8
 8005cf8:	4610      	mov	r0, r2
 8005cfa:	4798      	blx	r3
 8005cfc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005cfe:	e091      	b.n	8005e24 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005d00:	6839      	ldr	r1, [r7, #0]
 8005d02:	6878      	ldr	r0, [r7, #4]
 8005d04:	f000 fa94 	bl	8006230 <USBD_CtlError>
            err++;
 8005d08:	7afb      	ldrb	r3, [r7, #11]
 8005d0a:	3301      	adds	r3, #1
 8005d0c:	72fb      	strb	r3, [r7, #11]
          break;
 8005d0e:	e089      	b.n	8005e24 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005d16:	689b      	ldr	r3, [r3, #8]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d00b      	beq.n	8005d34 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005d22:	689b      	ldr	r3, [r3, #8]
 8005d24:	687a      	ldr	r2, [r7, #4]
 8005d26:	7c12      	ldrb	r2, [r2, #16]
 8005d28:	f107 0108 	add.w	r1, r7, #8
 8005d2c:	4610      	mov	r0, r2
 8005d2e:	4798      	blx	r3
 8005d30:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005d32:	e077      	b.n	8005e24 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005d34:	6839      	ldr	r1, [r7, #0]
 8005d36:	6878      	ldr	r0, [r7, #4]
 8005d38:	f000 fa7a 	bl	8006230 <USBD_CtlError>
            err++;
 8005d3c:	7afb      	ldrb	r3, [r7, #11]
 8005d3e:	3301      	adds	r3, #1
 8005d40:	72fb      	strb	r3, [r7, #11]
          break;
 8005d42:	e06f      	b.n	8005e24 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005d4a:	68db      	ldr	r3, [r3, #12]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d00b      	beq.n	8005d68 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005d56:	68db      	ldr	r3, [r3, #12]
 8005d58:	687a      	ldr	r2, [r7, #4]
 8005d5a:	7c12      	ldrb	r2, [r2, #16]
 8005d5c:	f107 0108 	add.w	r1, r7, #8
 8005d60:	4610      	mov	r0, r2
 8005d62:	4798      	blx	r3
 8005d64:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005d66:	e05d      	b.n	8005e24 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005d68:	6839      	ldr	r1, [r7, #0]
 8005d6a:	6878      	ldr	r0, [r7, #4]
 8005d6c:	f000 fa60 	bl	8006230 <USBD_CtlError>
            err++;
 8005d70:	7afb      	ldrb	r3, [r7, #11]
 8005d72:	3301      	adds	r3, #1
 8005d74:	72fb      	strb	r3, [r7, #11]
          break;
 8005d76:	e055      	b.n	8005e24 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005d7e:	691b      	ldr	r3, [r3, #16]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d00b      	beq.n	8005d9c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005d8a:	691b      	ldr	r3, [r3, #16]
 8005d8c:	687a      	ldr	r2, [r7, #4]
 8005d8e:	7c12      	ldrb	r2, [r2, #16]
 8005d90:	f107 0108 	add.w	r1, r7, #8
 8005d94:	4610      	mov	r0, r2
 8005d96:	4798      	blx	r3
 8005d98:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005d9a:	e043      	b.n	8005e24 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005d9c:	6839      	ldr	r1, [r7, #0]
 8005d9e:	6878      	ldr	r0, [r7, #4]
 8005da0:	f000 fa46 	bl	8006230 <USBD_CtlError>
            err++;
 8005da4:	7afb      	ldrb	r3, [r7, #11]
 8005da6:	3301      	adds	r3, #1
 8005da8:	72fb      	strb	r3, [r7, #11]
          break;
 8005daa:	e03b      	b.n	8005e24 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005db2:	695b      	ldr	r3, [r3, #20]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d00b      	beq.n	8005dd0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005dbe:	695b      	ldr	r3, [r3, #20]
 8005dc0:	687a      	ldr	r2, [r7, #4]
 8005dc2:	7c12      	ldrb	r2, [r2, #16]
 8005dc4:	f107 0108 	add.w	r1, r7, #8
 8005dc8:	4610      	mov	r0, r2
 8005dca:	4798      	blx	r3
 8005dcc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005dce:	e029      	b.n	8005e24 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005dd0:	6839      	ldr	r1, [r7, #0]
 8005dd2:	6878      	ldr	r0, [r7, #4]
 8005dd4:	f000 fa2c 	bl	8006230 <USBD_CtlError>
            err++;
 8005dd8:	7afb      	ldrb	r3, [r7, #11]
 8005dda:	3301      	adds	r3, #1
 8005ddc:	72fb      	strb	r3, [r7, #11]
          break;
 8005dde:	e021      	b.n	8005e24 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005de6:	699b      	ldr	r3, [r3, #24]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d00b      	beq.n	8005e04 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005df2:	699b      	ldr	r3, [r3, #24]
 8005df4:	687a      	ldr	r2, [r7, #4]
 8005df6:	7c12      	ldrb	r2, [r2, #16]
 8005df8:	f107 0108 	add.w	r1, r7, #8
 8005dfc:	4610      	mov	r0, r2
 8005dfe:	4798      	blx	r3
 8005e00:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005e02:	e00f      	b.n	8005e24 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005e04:	6839      	ldr	r1, [r7, #0]
 8005e06:	6878      	ldr	r0, [r7, #4]
 8005e08:	f000 fa12 	bl	8006230 <USBD_CtlError>
            err++;
 8005e0c:	7afb      	ldrb	r3, [r7, #11]
 8005e0e:	3301      	adds	r3, #1
 8005e10:	72fb      	strb	r3, [r7, #11]
          break;
 8005e12:	e007      	b.n	8005e24 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8005e14:	6839      	ldr	r1, [r7, #0]
 8005e16:	6878      	ldr	r0, [r7, #4]
 8005e18:	f000 fa0a 	bl	8006230 <USBD_CtlError>
          err++;
 8005e1c:	7afb      	ldrb	r3, [r7, #11]
 8005e1e:	3301      	adds	r3, #1
 8005e20:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8005e22:	e038      	b.n	8005e96 <USBD_GetDescriptor+0x286>
 8005e24:	e037      	b.n	8005e96 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	7c1b      	ldrb	r3, [r3, #16]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d109      	bne.n	8005e42 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e36:	f107 0208 	add.w	r2, r7, #8
 8005e3a:	4610      	mov	r0, r2
 8005e3c:	4798      	blx	r3
 8005e3e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005e40:	e029      	b.n	8005e96 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005e42:	6839      	ldr	r1, [r7, #0]
 8005e44:	6878      	ldr	r0, [r7, #4]
 8005e46:	f000 f9f3 	bl	8006230 <USBD_CtlError>
        err++;
 8005e4a:	7afb      	ldrb	r3, [r7, #11]
 8005e4c:	3301      	adds	r3, #1
 8005e4e:	72fb      	strb	r3, [r7, #11]
      break;
 8005e50:	e021      	b.n	8005e96 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	7c1b      	ldrb	r3, [r3, #16]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d10d      	bne.n	8005e76 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e62:	f107 0208 	add.w	r2, r7, #8
 8005e66:	4610      	mov	r0, r2
 8005e68:	4798      	blx	r3
 8005e6a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	3301      	adds	r3, #1
 8005e70:	2207      	movs	r2, #7
 8005e72:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005e74:	e00f      	b.n	8005e96 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005e76:	6839      	ldr	r1, [r7, #0]
 8005e78:	6878      	ldr	r0, [r7, #4]
 8005e7a:	f000 f9d9 	bl	8006230 <USBD_CtlError>
        err++;
 8005e7e:	7afb      	ldrb	r3, [r7, #11]
 8005e80:	3301      	adds	r3, #1
 8005e82:	72fb      	strb	r3, [r7, #11]
      break;
 8005e84:	e007      	b.n	8005e96 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8005e86:	6839      	ldr	r1, [r7, #0]
 8005e88:	6878      	ldr	r0, [r7, #4]
 8005e8a:	f000 f9d1 	bl	8006230 <USBD_CtlError>
      err++;
 8005e8e:	7afb      	ldrb	r3, [r7, #11]
 8005e90:	3301      	adds	r3, #1
 8005e92:	72fb      	strb	r3, [r7, #11]
      break;
 8005e94:	bf00      	nop
  }

  if (err != 0U)
 8005e96:	7afb      	ldrb	r3, [r7, #11]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d11c      	bne.n	8005ed6 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8005e9c:	893b      	ldrh	r3, [r7, #8]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d011      	beq.n	8005ec6 <USBD_GetDescriptor+0x2b6>
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	88db      	ldrh	r3, [r3, #6]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d00d      	beq.n	8005ec6 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	88da      	ldrh	r2, [r3, #6]
 8005eae:	893b      	ldrh	r3, [r7, #8]
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	bf28      	it	cs
 8005eb4:	4613      	movcs	r3, r2
 8005eb6:	b29b      	uxth	r3, r3
 8005eb8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8005eba:	893b      	ldrh	r3, [r7, #8]
 8005ebc:	461a      	mov	r2, r3
 8005ebe:	68f9      	ldr	r1, [r7, #12]
 8005ec0:	6878      	ldr	r0, [r7, #4]
 8005ec2:	f000 fa1f 	bl	8006304 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	88db      	ldrh	r3, [r3, #6]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d104      	bne.n	8005ed8 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8005ece:	6878      	ldr	r0, [r7, #4]
 8005ed0:	f000 fa76 	bl	80063c0 <USBD_CtlSendStatus>
 8005ed4:	e000      	b.n	8005ed8 <USBD_GetDescriptor+0x2c8>
    return;
 8005ed6:	bf00      	nop
    }
  }
}
 8005ed8:	3710      	adds	r7, #16
 8005eda:	46bd      	mov	sp, r7
 8005edc:	bd80      	pop	{r7, pc}
 8005ede:	bf00      	nop

08005ee0 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b084      	sub	sp, #16
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
 8005ee8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	889b      	ldrh	r3, [r3, #4]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d130      	bne.n	8005f54 <USBD_SetAddress+0x74>
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	88db      	ldrh	r3, [r3, #6]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d12c      	bne.n	8005f54 <USBD_SetAddress+0x74>
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	885b      	ldrh	r3, [r3, #2]
 8005efe:	2b7f      	cmp	r3, #127	; 0x7f
 8005f00:	d828      	bhi.n	8005f54 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	885b      	ldrh	r3, [r3, #2]
 8005f06:	b2db      	uxtb	r3, r3
 8005f08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f0c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f14:	2b03      	cmp	r3, #3
 8005f16:	d104      	bne.n	8005f22 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8005f18:	6839      	ldr	r1, [r7, #0]
 8005f1a:	6878      	ldr	r0, [r7, #4]
 8005f1c:	f000 f988 	bl	8006230 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f20:	e01c      	b.n	8005f5c <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	7bfa      	ldrb	r2, [r7, #15]
 8005f26:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8005f2a:	7bfb      	ldrb	r3, [r7, #15]
 8005f2c:	4619      	mov	r1, r3
 8005f2e:	6878      	ldr	r0, [r7, #4]
 8005f30:	f000 fe6f 	bl	8006c12 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8005f34:	6878      	ldr	r0, [r7, #4]
 8005f36:	f000 fa43 	bl	80063c0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8005f3a:	7bfb      	ldrb	r3, [r7, #15]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d004      	beq.n	8005f4a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2202      	movs	r2, #2
 8005f44:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f48:	e008      	b.n	8005f5c <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2201      	movs	r2, #1
 8005f4e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f52:	e003      	b.n	8005f5c <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8005f54:	6839      	ldr	r1, [r7, #0]
 8005f56:	6878      	ldr	r0, [r7, #4]
 8005f58:	f000 f96a 	bl	8006230 <USBD_CtlError>
  }
}
 8005f5c:	bf00      	nop
 8005f5e:	3710      	adds	r7, #16
 8005f60:	46bd      	mov	sp, r7
 8005f62:	bd80      	pop	{r7, pc}

08005f64 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005f64:	b580      	push	{r7, lr}
 8005f66:	b082      	sub	sp, #8
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
 8005f6c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	885b      	ldrh	r3, [r3, #2]
 8005f72:	b2da      	uxtb	r2, r3
 8005f74:	4b41      	ldr	r3, [pc, #260]	; (800607c <USBD_SetConfig+0x118>)
 8005f76:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005f78:	4b40      	ldr	r3, [pc, #256]	; (800607c <USBD_SetConfig+0x118>)
 8005f7a:	781b      	ldrb	r3, [r3, #0]
 8005f7c:	2b01      	cmp	r3, #1
 8005f7e:	d904      	bls.n	8005f8a <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8005f80:	6839      	ldr	r1, [r7, #0]
 8005f82:	6878      	ldr	r0, [r7, #4]
 8005f84:	f000 f954 	bl	8006230 <USBD_CtlError>
 8005f88:	e075      	b.n	8006076 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f90:	2b02      	cmp	r3, #2
 8005f92:	d002      	beq.n	8005f9a <USBD_SetConfig+0x36>
 8005f94:	2b03      	cmp	r3, #3
 8005f96:	d023      	beq.n	8005fe0 <USBD_SetConfig+0x7c>
 8005f98:	e062      	b.n	8006060 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8005f9a:	4b38      	ldr	r3, [pc, #224]	; (800607c <USBD_SetConfig+0x118>)
 8005f9c:	781b      	ldrb	r3, [r3, #0]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d01a      	beq.n	8005fd8 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8005fa2:	4b36      	ldr	r3, [pc, #216]	; (800607c <USBD_SetConfig+0x118>)
 8005fa4:	781b      	ldrb	r3, [r3, #0]
 8005fa6:	461a      	mov	r2, r3
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2203      	movs	r2, #3
 8005fb0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8005fb4:	4b31      	ldr	r3, [pc, #196]	; (800607c <USBD_SetConfig+0x118>)
 8005fb6:	781b      	ldrb	r3, [r3, #0]
 8005fb8:	4619      	mov	r1, r3
 8005fba:	6878      	ldr	r0, [r7, #4]
 8005fbc:	f7ff f9f3 	bl	80053a6 <USBD_SetClassConfig>
 8005fc0:	4603      	mov	r3, r0
 8005fc2:	2b02      	cmp	r3, #2
 8005fc4:	d104      	bne.n	8005fd0 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8005fc6:	6839      	ldr	r1, [r7, #0]
 8005fc8:	6878      	ldr	r0, [r7, #4]
 8005fca:	f000 f931 	bl	8006230 <USBD_CtlError>
            return;
 8005fce:	e052      	b.n	8006076 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8005fd0:	6878      	ldr	r0, [r7, #4]
 8005fd2:	f000 f9f5 	bl	80063c0 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8005fd6:	e04e      	b.n	8006076 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8005fd8:	6878      	ldr	r0, [r7, #4]
 8005fda:	f000 f9f1 	bl	80063c0 <USBD_CtlSendStatus>
        break;
 8005fde:	e04a      	b.n	8006076 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8005fe0:	4b26      	ldr	r3, [pc, #152]	; (800607c <USBD_SetConfig+0x118>)
 8005fe2:	781b      	ldrb	r3, [r3, #0]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d112      	bne.n	800600e <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2202      	movs	r2, #2
 8005fec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8005ff0:	4b22      	ldr	r3, [pc, #136]	; (800607c <USBD_SetConfig+0x118>)
 8005ff2:	781b      	ldrb	r3, [r3, #0]
 8005ff4:	461a      	mov	r2, r3
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8005ffa:	4b20      	ldr	r3, [pc, #128]	; (800607c <USBD_SetConfig+0x118>)
 8005ffc:	781b      	ldrb	r3, [r3, #0]
 8005ffe:	4619      	mov	r1, r3
 8006000:	6878      	ldr	r0, [r7, #4]
 8006002:	f7ff f9ef 	bl	80053e4 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8006006:	6878      	ldr	r0, [r7, #4]
 8006008:	f000 f9da 	bl	80063c0 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800600c:	e033      	b.n	8006076 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800600e:	4b1b      	ldr	r3, [pc, #108]	; (800607c <USBD_SetConfig+0x118>)
 8006010:	781b      	ldrb	r3, [r3, #0]
 8006012:	461a      	mov	r2, r3
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	685b      	ldr	r3, [r3, #4]
 8006018:	429a      	cmp	r2, r3
 800601a:	d01d      	beq.n	8006058 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	685b      	ldr	r3, [r3, #4]
 8006020:	b2db      	uxtb	r3, r3
 8006022:	4619      	mov	r1, r3
 8006024:	6878      	ldr	r0, [r7, #4]
 8006026:	f7ff f9dd 	bl	80053e4 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800602a:	4b14      	ldr	r3, [pc, #80]	; (800607c <USBD_SetConfig+0x118>)
 800602c:	781b      	ldrb	r3, [r3, #0]
 800602e:	461a      	mov	r2, r3
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006034:	4b11      	ldr	r3, [pc, #68]	; (800607c <USBD_SetConfig+0x118>)
 8006036:	781b      	ldrb	r3, [r3, #0]
 8006038:	4619      	mov	r1, r3
 800603a:	6878      	ldr	r0, [r7, #4]
 800603c:	f7ff f9b3 	bl	80053a6 <USBD_SetClassConfig>
 8006040:	4603      	mov	r3, r0
 8006042:	2b02      	cmp	r3, #2
 8006044:	d104      	bne.n	8006050 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8006046:	6839      	ldr	r1, [r7, #0]
 8006048:	6878      	ldr	r0, [r7, #4]
 800604a:	f000 f8f1 	bl	8006230 <USBD_CtlError>
            return;
 800604e:	e012      	b.n	8006076 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006050:	6878      	ldr	r0, [r7, #4]
 8006052:	f000 f9b5 	bl	80063c0 <USBD_CtlSendStatus>
        break;
 8006056:	e00e      	b.n	8006076 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006058:	6878      	ldr	r0, [r7, #4]
 800605a:	f000 f9b1 	bl	80063c0 <USBD_CtlSendStatus>
        break;
 800605e:	e00a      	b.n	8006076 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8006060:	6839      	ldr	r1, [r7, #0]
 8006062:	6878      	ldr	r0, [r7, #4]
 8006064:	f000 f8e4 	bl	8006230 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8006068:	4b04      	ldr	r3, [pc, #16]	; (800607c <USBD_SetConfig+0x118>)
 800606a:	781b      	ldrb	r3, [r3, #0]
 800606c:	4619      	mov	r1, r3
 800606e:	6878      	ldr	r0, [r7, #4]
 8006070:	f7ff f9b8 	bl	80053e4 <USBD_ClrClassConfig>
        break;
 8006074:	bf00      	nop
    }
  }
}
 8006076:	3708      	adds	r7, #8
 8006078:	46bd      	mov	sp, r7
 800607a:	bd80      	pop	{r7, pc}
 800607c:	200003bc 	.word	0x200003bc

08006080 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b082      	sub	sp, #8
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
 8006088:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	88db      	ldrh	r3, [r3, #6]
 800608e:	2b01      	cmp	r3, #1
 8006090:	d004      	beq.n	800609c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006092:	6839      	ldr	r1, [r7, #0]
 8006094:	6878      	ldr	r0, [r7, #4]
 8006096:	f000 f8cb 	bl	8006230 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800609a:	e021      	b.n	80060e0 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80060a2:	2b01      	cmp	r3, #1
 80060a4:	db17      	blt.n	80060d6 <USBD_GetConfig+0x56>
 80060a6:	2b02      	cmp	r3, #2
 80060a8:	dd02      	ble.n	80060b0 <USBD_GetConfig+0x30>
 80060aa:	2b03      	cmp	r3, #3
 80060ac:	d00b      	beq.n	80060c6 <USBD_GetConfig+0x46>
 80060ae:	e012      	b.n	80060d6 <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2200      	movs	r2, #0
 80060b4:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	3308      	adds	r3, #8
 80060ba:	2201      	movs	r2, #1
 80060bc:	4619      	mov	r1, r3
 80060be:	6878      	ldr	r0, [r7, #4]
 80060c0:	f000 f920 	bl	8006304 <USBD_CtlSendData>
        break;
 80060c4:	e00c      	b.n	80060e0 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	3304      	adds	r3, #4
 80060ca:	2201      	movs	r2, #1
 80060cc:	4619      	mov	r1, r3
 80060ce:	6878      	ldr	r0, [r7, #4]
 80060d0:	f000 f918 	bl	8006304 <USBD_CtlSendData>
        break;
 80060d4:	e004      	b.n	80060e0 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 80060d6:	6839      	ldr	r1, [r7, #0]
 80060d8:	6878      	ldr	r0, [r7, #4]
 80060da:	f000 f8a9 	bl	8006230 <USBD_CtlError>
        break;
 80060de:	bf00      	nop
}
 80060e0:	bf00      	nop
 80060e2:	3708      	adds	r7, #8
 80060e4:	46bd      	mov	sp, r7
 80060e6:	bd80      	pop	{r7, pc}

080060e8 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80060e8:	b580      	push	{r7, lr}
 80060ea:	b082      	sub	sp, #8
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
 80060f0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80060f8:	3b01      	subs	r3, #1
 80060fa:	2b02      	cmp	r3, #2
 80060fc:	d81e      	bhi.n	800613c <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	88db      	ldrh	r3, [r3, #6]
 8006102:	2b02      	cmp	r3, #2
 8006104:	d004      	beq.n	8006110 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8006106:	6839      	ldr	r1, [r7, #0]
 8006108:	6878      	ldr	r0, [r7, #4]
 800610a:	f000 f891 	bl	8006230 <USBD_CtlError>
        break;
 800610e:	e01a      	b.n	8006146 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2201      	movs	r2, #1
 8006114:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800611c:	2b00      	cmp	r3, #0
 800611e:	d005      	beq.n	800612c <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	68db      	ldr	r3, [r3, #12]
 8006124:	f043 0202 	orr.w	r2, r3, #2
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	330c      	adds	r3, #12
 8006130:	2202      	movs	r2, #2
 8006132:	4619      	mov	r1, r3
 8006134:	6878      	ldr	r0, [r7, #4]
 8006136:	f000 f8e5 	bl	8006304 <USBD_CtlSendData>
      break;
 800613a:	e004      	b.n	8006146 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800613c:	6839      	ldr	r1, [r7, #0]
 800613e:	6878      	ldr	r0, [r7, #4]
 8006140:	f000 f876 	bl	8006230 <USBD_CtlError>
      break;
 8006144:	bf00      	nop
  }
}
 8006146:	bf00      	nop
 8006148:	3708      	adds	r7, #8
 800614a:	46bd      	mov	sp, r7
 800614c:	bd80      	pop	{r7, pc}

0800614e <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800614e:	b580      	push	{r7, lr}
 8006150:	b082      	sub	sp, #8
 8006152:	af00      	add	r7, sp, #0
 8006154:	6078      	str	r0, [r7, #4]
 8006156:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	885b      	ldrh	r3, [r3, #2]
 800615c:	2b01      	cmp	r3, #1
 800615e:	d106      	bne.n	800616e <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2201      	movs	r2, #1
 8006164:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8006168:	6878      	ldr	r0, [r7, #4]
 800616a:	f000 f929 	bl	80063c0 <USBD_CtlSendStatus>
  }
}
 800616e:	bf00      	nop
 8006170:	3708      	adds	r7, #8
 8006172:	46bd      	mov	sp, r7
 8006174:	bd80      	pop	{r7, pc}

08006176 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006176:	b580      	push	{r7, lr}
 8006178:	b082      	sub	sp, #8
 800617a:	af00      	add	r7, sp, #0
 800617c:	6078      	str	r0, [r7, #4]
 800617e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006186:	3b01      	subs	r3, #1
 8006188:	2b02      	cmp	r3, #2
 800618a:	d80b      	bhi.n	80061a4 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	885b      	ldrh	r3, [r3, #2]
 8006190:	2b01      	cmp	r3, #1
 8006192:	d10c      	bne.n	80061ae <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2200      	movs	r2, #0
 8006198:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800619c:	6878      	ldr	r0, [r7, #4]
 800619e:	f000 f90f 	bl	80063c0 <USBD_CtlSendStatus>
      }
      break;
 80061a2:	e004      	b.n	80061ae <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80061a4:	6839      	ldr	r1, [r7, #0]
 80061a6:	6878      	ldr	r0, [r7, #4]
 80061a8:	f000 f842 	bl	8006230 <USBD_CtlError>
      break;
 80061ac:	e000      	b.n	80061b0 <USBD_ClrFeature+0x3a>
      break;
 80061ae:	bf00      	nop
  }
}
 80061b0:	bf00      	nop
 80061b2:	3708      	adds	r7, #8
 80061b4:	46bd      	mov	sp, r7
 80061b6:	bd80      	pop	{r7, pc}

080061b8 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80061b8:	b480      	push	{r7}
 80061ba:	b083      	sub	sp, #12
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
 80061c0:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	781a      	ldrb	r2, [r3, #0]
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	785a      	ldrb	r2, [r3, #1]
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	3302      	adds	r3, #2
 80061d6:	781b      	ldrb	r3, [r3, #0]
 80061d8:	b29a      	uxth	r2, r3
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	3303      	adds	r3, #3
 80061de:	781b      	ldrb	r3, [r3, #0]
 80061e0:	b29b      	uxth	r3, r3
 80061e2:	021b      	lsls	r3, r3, #8
 80061e4:	b29b      	uxth	r3, r3
 80061e6:	4413      	add	r3, r2
 80061e8:	b29a      	uxth	r2, r3
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	3304      	adds	r3, #4
 80061f2:	781b      	ldrb	r3, [r3, #0]
 80061f4:	b29a      	uxth	r2, r3
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	3305      	adds	r3, #5
 80061fa:	781b      	ldrb	r3, [r3, #0]
 80061fc:	b29b      	uxth	r3, r3
 80061fe:	021b      	lsls	r3, r3, #8
 8006200:	b29b      	uxth	r3, r3
 8006202:	4413      	add	r3, r2
 8006204:	b29a      	uxth	r2, r3
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	3306      	adds	r3, #6
 800620e:	781b      	ldrb	r3, [r3, #0]
 8006210:	b29a      	uxth	r2, r3
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	3307      	adds	r3, #7
 8006216:	781b      	ldrb	r3, [r3, #0]
 8006218:	b29b      	uxth	r3, r3
 800621a:	021b      	lsls	r3, r3, #8
 800621c:	b29b      	uxth	r3, r3
 800621e:	4413      	add	r3, r2
 8006220:	b29a      	uxth	r2, r3
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	80da      	strh	r2, [r3, #6]

}
 8006226:	bf00      	nop
 8006228:	370c      	adds	r7, #12
 800622a:	46bd      	mov	sp, r7
 800622c:	bc80      	pop	{r7}
 800622e:	4770      	bx	lr

08006230 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8006230:	b580      	push	{r7, lr}
 8006232:	b082      	sub	sp, #8
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
 8006238:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800623a:	2180      	movs	r1, #128	; 0x80
 800623c:	6878      	ldr	r0, [r7, #4]
 800623e:	f000 fc85 	bl	8006b4c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8006242:	2100      	movs	r1, #0
 8006244:	6878      	ldr	r0, [r7, #4]
 8006246:	f000 fc81 	bl	8006b4c <USBD_LL_StallEP>
}
 800624a:	bf00      	nop
 800624c:	3708      	adds	r7, #8
 800624e:	46bd      	mov	sp, r7
 8006250:	bd80      	pop	{r7, pc}

08006252 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006252:	b580      	push	{r7, lr}
 8006254:	b086      	sub	sp, #24
 8006256:	af00      	add	r7, sp, #0
 8006258:	60f8      	str	r0, [r7, #12]
 800625a:	60b9      	str	r1, [r7, #8]
 800625c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800625e:	2300      	movs	r3, #0
 8006260:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d032      	beq.n	80062ce <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8006268:	68f8      	ldr	r0, [r7, #12]
 800626a:	f000 f834 	bl	80062d6 <USBD_GetLen>
 800626e:	4603      	mov	r3, r0
 8006270:	3301      	adds	r3, #1
 8006272:	b29b      	uxth	r3, r3
 8006274:	005b      	lsls	r3, r3, #1
 8006276:	b29a      	uxth	r2, r3
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800627c:	7dfb      	ldrb	r3, [r7, #23]
 800627e:	1c5a      	adds	r2, r3, #1
 8006280:	75fa      	strb	r2, [r7, #23]
 8006282:	461a      	mov	r2, r3
 8006284:	68bb      	ldr	r3, [r7, #8]
 8006286:	4413      	add	r3, r2
 8006288:	687a      	ldr	r2, [r7, #4]
 800628a:	7812      	ldrb	r2, [r2, #0]
 800628c:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800628e:	7dfb      	ldrb	r3, [r7, #23]
 8006290:	1c5a      	adds	r2, r3, #1
 8006292:	75fa      	strb	r2, [r7, #23]
 8006294:	461a      	mov	r2, r3
 8006296:	68bb      	ldr	r3, [r7, #8]
 8006298:	4413      	add	r3, r2
 800629a:	2203      	movs	r2, #3
 800629c:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800629e:	e012      	b.n	80062c6 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	1c5a      	adds	r2, r3, #1
 80062a4:	60fa      	str	r2, [r7, #12]
 80062a6:	7dfa      	ldrb	r2, [r7, #23]
 80062a8:	1c51      	adds	r1, r2, #1
 80062aa:	75f9      	strb	r1, [r7, #23]
 80062ac:	4611      	mov	r1, r2
 80062ae:	68ba      	ldr	r2, [r7, #8]
 80062b0:	440a      	add	r2, r1
 80062b2:	781b      	ldrb	r3, [r3, #0]
 80062b4:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80062b6:	7dfb      	ldrb	r3, [r7, #23]
 80062b8:	1c5a      	adds	r2, r3, #1
 80062ba:	75fa      	strb	r2, [r7, #23]
 80062bc:	461a      	mov	r2, r3
 80062be:	68bb      	ldr	r3, [r7, #8]
 80062c0:	4413      	add	r3, r2
 80062c2:	2200      	movs	r2, #0
 80062c4:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	781b      	ldrb	r3, [r3, #0]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d1e8      	bne.n	80062a0 <USBD_GetString+0x4e>
    }
  }
}
 80062ce:	bf00      	nop
 80062d0:	3718      	adds	r7, #24
 80062d2:	46bd      	mov	sp, r7
 80062d4:	bd80      	pop	{r7, pc}

080062d6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80062d6:	b480      	push	{r7}
 80062d8:	b085      	sub	sp, #20
 80062da:	af00      	add	r7, sp, #0
 80062dc:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80062de:	2300      	movs	r3, #0
 80062e0:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 80062e2:	e005      	b.n	80062f0 <USBD_GetLen+0x1a>
  {
    len++;
 80062e4:	7bfb      	ldrb	r3, [r7, #15]
 80062e6:	3301      	adds	r3, #1
 80062e8:	73fb      	strb	r3, [r7, #15]
    buf++;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	3301      	adds	r3, #1
 80062ee:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	781b      	ldrb	r3, [r3, #0]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d1f5      	bne.n	80062e4 <USBD_GetLen+0xe>
  }

  return len;
 80062f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80062fa:	4618      	mov	r0, r3
 80062fc:	3714      	adds	r7, #20
 80062fe:	46bd      	mov	sp, r7
 8006300:	bc80      	pop	{r7}
 8006302:	4770      	bx	lr

08006304 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8006304:	b580      	push	{r7, lr}
 8006306:	b084      	sub	sp, #16
 8006308:	af00      	add	r7, sp, #0
 800630a:	60f8      	str	r0, [r7, #12]
 800630c:	60b9      	str	r1, [r7, #8]
 800630e:	4613      	mov	r3, r2
 8006310:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	2202      	movs	r2, #2
 8006316:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800631a:	88fa      	ldrh	r2, [r7, #6]
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8006320:	88fa      	ldrh	r2, [r7, #6]
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006326:	88fb      	ldrh	r3, [r7, #6]
 8006328:	68ba      	ldr	r2, [r7, #8]
 800632a:	2100      	movs	r1, #0
 800632c:	68f8      	ldr	r0, [r7, #12]
 800632e:	f000 fc8f 	bl	8006c50 <USBD_LL_Transmit>

  return USBD_OK;
 8006332:	2300      	movs	r3, #0
}
 8006334:	4618      	mov	r0, r3
 8006336:	3710      	adds	r7, #16
 8006338:	46bd      	mov	sp, r7
 800633a:	bd80      	pop	{r7, pc}

0800633c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800633c:	b580      	push	{r7, lr}
 800633e:	b084      	sub	sp, #16
 8006340:	af00      	add	r7, sp, #0
 8006342:	60f8      	str	r0, [r7, #12]
 8006344:	60b9      	str	r1, [r7, #8]
 8006346:	4613      	mov	r3, r2
 8006348:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800634a:	88fb      	ldrh	r3, [r7, #6]
 800634c:	68ba      	ldr	r2, [r7, #8]
 800634e:	2100      	movs	r1, #0
 8006350:	68f8      	ldr	r0, [r7, #12]
 8006352:	f000 fc7d 	bl	8006c50 <USBD_LL_Transmit>

  return USBD_OK;
 8006356:	2300      	movs	r3, #0
}
 8006358:	4618      	mov	r0, r3
 800635a:	3710      	adds	r7, #16
 800635c:	46bd      	mov	sp, r7
 800635e:	bd80      	pop	{r7, pc}

08006360 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b084      	sub	sp, #16
 8006364:	af00      	add	r7, sp, #0
 8006366:	60f8      	str	r0, [r7, #12]
 8006368:	60b9      	str	r1, [r7, #8]
 800636a:	4613      	mov	r3, r2
 800636c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	2203      	movs	r2, #3
 8006372:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8006376:	88fa      	ldrh	r2, [r7, #6]
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800637e:	88fa      	ldrh	r2, [r7, #6]
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006386:	88fb      	ldrh	r3, [r7, #6]
 8006388:	68ba      	ldr	r2, [r7, #8]
 800638a:	2100      	movs	r1, #0
 800638c:	68f8      	ldr	r0, [r7, #12]
 800638e:	f000 fc82 	bl	8006c96 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006392:	2300      	movs	r3, #0
}
 8006394:	4618      	mov	r0, r3
 8006396:	3710      	adds	r7, #16
 8006398:	46bd      	mov	sp, r7
 800639a:	bd80      	pop	{r7, pc}

0800639c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800639c:	b580      	push	{r7, lr}
 800639e:	b084      	sub	sp, #16
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	60f8      	str	r0, [r7, #12]
 80063a4:	60b9      	str	r1, [r7, #8]
 80063a6:	4613      	mov	r3, r2
 80063a8:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80063aa:	88fb      	ldrh	r3, [r7, #6]
 80063ac:	68ba      	ldr	r2, [r7, #8]
 80063ae:	2100      	movs	r1, #0
 80063b0:	68f8      	ldr	r0, [r7, #12]
 80063b2:	f000 fc70 	bl	8006c96 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80063b6:	2300      	movs	r3, #0
}
 80063b8:	4618      	mov	r0, r3
 80063ba:	3710      	adds	r7, #16
 80063bc:	46bd      	mov	sp, r7
 80063be:	bd80      	pop	{r7, pc}

080063c0 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b082      	sub	sp, #8
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2204      	movs	r2, #4
 80063cc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80063d0:	2300      	movs	r3, #0
 80063d2:	2200      	movs	r2, #0
 80063d4:	2100      	movs	r1, #0
 80063d6:	6878      	ldr	r0, [r7, #4]
 80063d8:	f000 fc3a 	bl	8006c50 <USBD_LL_Transmit>

  return USBD_OK;
 80063dc:	2300      	movs	r3, #0
}
 80063de:	4618      	mov	r0, r3
 80063e0:	3708      	adds	r7, #8
 80063e2:	46bd      	mov	sp, r7
 80063e4:	bd80      	pop	{r7, pc}

080063e6 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80063e6:	b580      	push	{r7, lr}
 80063e8:	b082      	sub	sp, #8
 80063ea:	af00      	add	r7, sp, #0
 80063ec:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	2205      	movs	r2, #5
 80063f2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80063f6:	2300      	movs	r3, #0
 80063f8:	2200      	movs	r2, #0
 80063fa:	2100      	movs	r1, #0
 80063fc:	6878      	ldr	r0, [r7, #4]
 80063fe:	f000 fc4a 	bl	8006c96 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006402:	2300      	movs	r3, #0
}
 8006404:	4618      	mov	r0, r3
 8006406:	3708      	adds	r7, #8
 8006408:	46bd      	mov	sp, r7
 800640a:	bd80      	pop	{r7, pc}

0800640c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800640c:	b580      	push	{r7, lr}
 800640e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006410:	2200      	movs	r2, #0
 8006412:	4912      	ldr	r1, [pc, #72]	; (800645c <MX_USB_DEVICE_Init+0x50>)
 8006414:	4812      	ldr	r0, [pc, #72]	; (8006460 <MX_USB_DEVICE_Init+0x54>)
 8006416:	f7fe ff6c 	bl	80052f2 <USBD_Init>
 800641a:	4603      	mov	r3, r0
 800641c:	2b00      	cmp	r3, #0
 800641e:	d001      	beq.n	8006424 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006420:	f7fa f9c8 	bl	80007b4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006424:	490f      	ldr	r1, [pc, #60]	; (8006464 <MX_USB_DEVICE_Init+0x58>)
 8006426:	480e      	ldr	r0, [pc, #56]	; (8006460 <MX_USB_DEVICE_Init+0x54>)
 8006428:	f7fe ff8e 	bl	8005348 <USBD_RegisterClass>
 800642c:	4603      	mov	r3, r0
 800642e:	2b00      	cmp	r3, #0
 8006430:	d001      	beq.n	8006436 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006432:	f7fa f9bf 	bl	80007b4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8006436:	490c      	ldr	r1, [pc, #48]	; (8006468 <MX_USB_DEVICE_Init+0x5c>)
 8006438:	4809      	ldr	r0, [pc, #36]	; (8006460 <MX_USB_DEVICE_Init+0x54>)
 800643a:	f7fe febf 	bl	80051bc <USBD_CDC_RegisterInterface>
 800643e:	4603      	mov	r3, r0
 8006440:	2b00      	cmp	r3, #0
 8006442:	d001      	beq.n	8006448 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006444:	f7fa f9b6 	bl	80007b4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006448:	4805      	ldr	r0, [pc, #20]	; (8006460 <MX_USB_DEVICE_Init+0x54>)
 800644a:	f7fe ff96 	bl	800537a <USBD_Start>
 800644e:	4603      	mov	r3, r0
 8006450:	2b00      	cmp	r3, #0
 8006452:	d001      	beq.n	8006458 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006454:	f7fa f9ae 	bl	80007b4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006458:	bf00      	nop
 800645a:	bd80      	pop	{r7, pc}
 800645c:	2000012c 	.word	0x2000012c
 8006460:	2000067c 	.word	0x2000067c
 8006464:	20000018 	.word	0x20000018
 8006468:	2000011c 	.word	0x2000011c

0800646c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800646c:	b580      	push	{r7, lr}
 800646e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006470:	2200      	movs	r2, #0
 8006472:	4905      	ldr	r1, [pc, #20]	; (8006488 <CDC_Init_FS+0x1c>)
 8006474:	4805      	ldr	r0, [pc, #20]	; (800648c <CDC_Init_FS+0x20>)
 8006476:	f7fe feb7 	bl	80051e8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800647a:	4905      	ldr	r1, [pc, #20]	; (8006490 <CDC_Init_FS+0x24>)
 800647c:	4803      	ldr	r0, [pc, #12]	; (800648c <CDC_Init_FS+0x20>)
 800647e:	f7fe fecc 	bl	800521a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8006482:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8006484:	4618      	mov	r0, r3
 8006486:	bd80      	pop	{r7, pc}
 8006488:	20000d28 	.word	0x20000d28
 800648c:	2000067c 	.word	0x2000067c
 8006490:	20000940 	.word	0x20000940

08006494 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8006494:	b480      	push	{r7}
 8006496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8006498:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800649a:	4618      	mov	r0, r3
 800649c:	46bd      	mov	sp, r7
 800649e:	bc80      	pop	{r7}
 80064a0:	4770      	bx	lr
	...

080064a4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80064a4:	b480      	push	{r7}
 80064a6:	b083      	sub	sp, #12
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	4603      	mov	r3, r0
 80064ac:	6039      	str	r1, [r7, #0]
 80064ae:	71fb      	strb	r3, [r7, #7]
 80064b0:	4613      	mov	r3, r2
 80064b2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80064b4:	79fb      	ldrb	r3, [r7, #7]
 80064b6:	2b23      	cmp	r3, #35	; 0x23
 80064b8:	d84a      	bhi.n	8006550 <CDC_Control_FS+0xac>
 80064ba:	a201      	add	r2, pc, #4	; (adr r2, 80064c0 <CDC_Control_FS+0x1c>)
 80064bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064c0:	08006551 	.word	0x08006551
 80064c4:	08006551 	.word	0x08006551
 80064c8:	08006551 	.word	0x08006551
 80064cc:	08006551 	.word	0x08006551
 80064d0:	08006551 	.word	0x08006551
 80064d4:	08006551 	.word	0x08006551
 80064d8:	08006551 	.word	0x08006551
 80064dc:	08006551 	.word	0x08006551
 80064e0:	08006551 	.word	0x08006551
 80064e4:	08006551 	.word	0x08006551
 80064e8:	08006551 	.word	0x08006551
 80064ec:	08006551 	.word	0x08006551
 80064f0:	08006551 	.word	0x08006551
 80064f4:	08006551 	.word	0x08006551
 80064f8:	08006551 	.word	0x08006551
 80064fc:	08006551 	.word	0x08006551
 8006500:	08006551 	.word	0x08006551
 8006504:	08006551 	.word	0x08006551
 8006508:	08006551 	.word	0x08006551
 800650c:	08006551 	.word	0x08006551
 8006510:	08006551 	.word	0x08006551
 8006514:	08006551 	.word	0x08006551
 8006518:	08006551 	.word	0x08006551
 800651c:	08006551 	.word	0x08006551
 8006520:	08006551 	.word	0x08006551
 8006524:	08006551 	.word	0x08006551
 8006528:	08006551 	.word	0x08006551
 800652c:	08006551 	.word	0x08006551
 8006530:	08006551 	.word	0x08006551
 8006534:	08006551 	.word	0x08006551
 8006538:	08006551 	.word	0x08006551
 800653c:	08006551 	.word	0x08006551
 8006540:	08006551 	.word	0x08006551
 8006544:	08006551 	.word	0x08006551
 8006548:	08006551 	.word	0x08006551
 800654c:	08006551 	.word	0x08006551
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8006550:	bf00      	nop
  }

  return (USBD_OK);
 8006552:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8006554:	4618      	mov	r0, r3
 8006556:	370c      	adds	r7, #12
 8006558:	46bd      	mov	sp, r7
 800655a:	bc80      	pop	{r7}
 800655c:	4770      	bx	lr
 800655e:	bf00      	nop

08006560 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8006560:	b580      	push	{r7, lr}
 8006562:	b084      	sub	sp, #16
 8006564:	af02      	add	r7, sp, #8
 8006566:	6078      	str	r0, [r7, #4]
 8006568:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  if(Buf[0] = 'Y'){
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2259      	movs	r2, #89	; 0x59
 800656e:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8006570:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006574:	4814      	ldr	r0, [pc, #80]	; (80065c8 <CDC_Receive_FS+0x68>)
 8006576:	f7fa fdc5 	bl	8001104 <HAL_GPIO_TogglePin>
    sscanf(Buf, "Y%08lX-%08lX-%08lX-%08lX-Z", &var[0], &var[1], &var[2], &var[3]);
 800657a:	4b14      	ldr	r3, [pc, #80]	; (80065cc <CDC_Receive_FS+0x6c>)
 800657c:	9301      	str	r3, [sp, #4]
 800657e:	4b14      	ldr	r3, [pc, #80]	; (80065d0 <CDC_Receive_FS+0x70>)
 8006580:	9300      	str	r3, [sp, #0]
 8006582:	4b14      	ldr	r3, [pc, #80]	; (80065d4 <CDC_Receive_FS+0x74>)
 8006584:	4a14      	ldr	r2, [pc, #80]	; (80065d8 <CDC_Receive_FS+0x78>)
 8006586:	4915      	ldr	r1, [pc, #84]	; (80065dc <CDC_Receive_FS+0x7c>)
 8006588:	6878      	ldr	r0, [r7, #4]
 800658a:	f000 fc59 	bl	8006e40 <siscanf>
    TIM3->CCR1 = var[0];
 800658e:	4a14      	ldr	r2, [pc, #80]	; (80065e0 <CDC_Receive_FS+0x80>)
 8006590:	4b11      	ldr	r3, [pc, #68]	; (80065d8 <CDC_Receive_FS+0x78>)
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	6353      	str	r3, [r2, #52]	; 0x34
    TIM3->CCR2 = var[1];
 8006596:	4a12      	ldr	r2, [pc, #72]	; (80065e0 <CDC_Receive_FS+0x80>)
 8006598:	4b0f      	ldr	r3, [pc, #60]	; (80065d8 <CDC_Receive_FS+0x78>)
 800659a:	685b      	ldr	r3, [r3, #4]
 800659c:	6393      	str	r3, [r2, #56]	; 0x38
    TIM3->CCR3 = var[2];
 800659e:	4a10      	ldr	r2, [pc, #64]	; (80065e0 <CDC_Receive_FS+0x80>)
 80065a0:	4b0d      	ldr	r3, [pc, #52]	; (80065d8 <CDC_Receive_FS+0x78>)
 80065a2:	689b      	ldr	r3, [r3, #8]
 80065a4:	63d3      	str	r3, [r2, #60]	; 0x3c
    TIM3->CCR4 = var[3];
 80065a6:	4a0e      	ldr	r2, [pc, #56]	; (80065e0 <CDC_Receive_FS+0x80>)
 80065a8:	4b0b      	ldr	r3, [pc, #44]	; (80065d8 <CDC_Receive_FS+0x78>)
 80065aa:	68db      	ldr	r3, [r3, #12]
 80065ac:	6413      	str	r3, [r2, #64]	; 0x40
  }
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80065ae:	6879      	ldr	r1, [r7, #4]
 80065b0:	480c      	ldr	r0, [pc, #48]	; (80065e4 <CDC_Receive_FS+0x84>)
 80065b2:	f7fe fe32 	bl	800521a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80065b6:	480b      	ldr	r0, [pc, #44]	; (80065e4 <CDC_Receive_FS+0x84>)
 80065b8:	f7fe fe71 	bl	800529e <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80065bc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80065be:	4618      	mov	r0, r3
 80065c0:	3708      	adds	r7, #8
 80065c2:	46bd      	mov	sp, r7
 80065c4:	bd80      	pop	{r7, pc}
 80065c6:	bf00      	nop
 80065c8:	40011000 	.word	0x40011000
 80065cc:	200003cc 	.word	0x200003cc
 80065d0:	200003c8 	.word	0x200003c8
 80065d4:	200003c4 	.word	0x200003c4
 80065d8:	200003c0 	.word	0x200003c0
 80065dc:	08008030 	.word	0x08008030
 80065e0:	40000400 	.word	0x40000400
 80065e4:	2000067c 	.word	0x2000067c

080065e8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b084      	sub	sp, #16
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
 80065f0:	460b      	mov	r3, r1
 80065f2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80065f4:	2300      	movs	r3, #0
 80065f6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80065f8:	4b0d      	ldr	r3, [pc, #52]	; (8006630 <CDC_Transmit_FS+0x48>)
 80065fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065fe:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8006600:	68bb      	ldr	r3, [r7, #8]
 8006602:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006606:	2b00      	cmp	r3, #0
 8006608:	d001      	beq.n	800660e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800660a:	2301      	movs	r3, #1
 800660c:	e00b      	b.n	8006626 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800660e:	887b      	ldrh	r3, [r7, #2]
 8006610:	461a      	mov	r2, r3
 8006612:	6879      	ldr	r1, [r7, #4]
 8006614:	4806      	ldr	r0, [pc, #24]	; (8006630 <CDC_Transmit_FS+0x48>)
 8006616:	f7fe fde7 	bl	80051e8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800661a:	4805      	ldr	r0, [pc, #20]	; (8006630 <CDC_Transmit_FS+0x48>)
 800661c:	f7fe fe10 	bl	8005240 <USBD_CDC_TransmitPacket>
 8006620:	4603      	mov	r3, r0
 8006622:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8006624:	7bfb      	ldrb	r3, [r7, #15]
}
 8006626:	4618      	mov	r0, r3
 8006628:	3710      	adds	r7, #16
 800662a:	46bd      	mov	sp, r7
 800662c:	bd80      	pop	{r7, pc}
 800662e:	bf00      	nop
 8006630:	2000067c 	.word	0x2000067c

08006634 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006634:	b480      	push	{r7}
 8006636:	b083      	sub	sp, #12
 8006638:	af00      	add	r7, sp, #0
 800663a:	4603      	mov	r3, r0
 800663c:	6039      	str	r1, [r7, #0]
 800663e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	2212      	movs	r2, #18
 8006644:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006646:	4b03      	ldr	r3, [pc, #12]	; (8006654 <USBD_FS_DeviceDescriptor+0x20>)
}
 8006648:	4618      	mov	r0, r3
 800664a:	370c      	adds	r7, #12
 800664c:	46bd      	mov	sp, r7
 800664e:	bc80      	pop	{r7}
 8006650:	4770      	bx	lr
 8006652:	bf00      	nop
 8006654:	20000148 	.word	0x20000148

08006658 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006658:	b480      	push	{r7}
 800665a:	b083      	sub	sp, #12
 800665c:	af00      	add	r7, sp, #0
 800665e:	4603      	mov	r3, r0
 8006660:	6039      	str	r1, [r7, #0]
 8006662:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	2204      	movs	r2, #4
 8006668:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800666a:	4b03      	ldr	r3, [pc, #12]	; (8006678 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800666c:	4618      	mov	r0, r3
 800666e:	370c      	adds	r7, #12
 8006670:	46bd      	mov	sp, r7
 8006672:	bc80      	pop	{r7}
 8006674:	4770      	bx	lr
 8006676:	bf00      	nop
 8006678:	2000015c 	.word	0x2000015c

0800667c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800667c:	b580      	push	{r7, lr}
 800667e:	b082      	sub	sp, #8
 8006680:	af00      	add	r7, sp, #0
 8006682:	4603      	mov	r3, r0
 8006684:	6039      	str	r1, [r7, #0]
 8006686:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006688:	79fb      	ldrb	r3, [r7, #7]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d105      	bne.n	800669a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800668e:	683a      	ldr	r2, [r7, #0]
 8006690:	4907      	ldr	r1, [pc, #28]	; (80066b0 <USBD_FS_ProductStrDescriptor+0x34>)
 8006692:	4808      	ldr	r0, [pc, #32]	; (80066b4 <USBD_FS_ProductStrDescriptor+0x38>)
 8006694:	f7ff fddd 	bl	8006252 <USBD_GetString>
 8006698:	e004      	b.n	80066a4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800669a:	683a      	ldr	r2, [r7, #0]
 800669c:	4904      	ldr	r1, [pc, #16]	; (80066b0 <USBD_FS_ProductStrDescriptor+0x34>)
 800669e:	4805      	ldr	r0, [pc, #20]	; (80066b4 <USBD_FS_ProductStrDescriptor+0x38>)
 80066a0:	f7ff fdd7 	bl	8006252 <USBD_GetString>
  }
  return USBD_StrDesc;
 80066a4:	4b02      	ldr	r3, [pc, #8]	; (80066b0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80066a6:	4618      	mov	r0, r3
 80066a8:	3708      	adds	r7, #8
 80066aa:	46bd      	mov	sp, r7
 80066ac:	bd80      	pop	{r7, pc}
 80066ae:	bf00      	nop
 80066b0:	20001110 	.word	0x20001110
 80066b4:	0800804c 	.word	0x0800804c

080066b8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80066b8:	b580      	push	{r7, lr}
 80066ba:	b082      	sub	sp, #8
 80066bc:	af00      	add	r7, sp, #0
 80066be:	4603      	mov	r3, r0
 80066c0:	6039      	str	r1, [r7, #0]
 80066c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80066c4:	683a      	ldr	r2, [r7, #0]
 80066c6:	4904      	ldr	r1, [pc, #16]	; (80066d8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80066c8:	4804      	ldr	r0, [pc, #16]	; (80066dc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80066ca:	f7ff fdc2 	bl	8006252 <USBD_GetString>
  return USBD_StrDesc;
 80066ce:	4b02      	ldr	r3, [pc, #8]	; (80066d8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80066d0:	4618      	mov	r0, r3
 80066d2:	3708      	adds	r7, #8
 80066d4:	46bd      	mov	sp, r7
 80066d6:	bd80      	pop	{r7, pc}
 80066d8:	20001110 	.word	0x20001110
 80066dc:	08008064 	.word	0x08008064

080066e0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	b082      	sub	sp, #8
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	4603      	mov	r3, r0
 80066e8:	6039      	str	r1, [r7, #0]
 80066ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	221a      	movs	r2, #26
 80066f0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80066f2:	f000 f843 	bl	800677c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80066f6:	4b02      	ldr	r3, [pc, #8]	; (8006700 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80066f8:	4618      	mov	r0, r3
 80066fa:	3708      	adds	r7, #8
 80066fc:	46bd      	mov	sp, r7
 80066fe:	bd80      	pop	{r7, pc}
 8006700:	20000160 	.word	0x20000160

08006704 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006704:	b580      	push	{r7, lr}
 8006706:	b082      	sub	sp, #8
 8006708:	af00      	add	r7, sp, #0
 800670a:	4603      	mov	r3, r0
 800670c:	6039      	str	r1, [r7, #0]
 800670e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006710:	79fb      	ldrb	r3, [r7, #7]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d105      	bne.n	8006722 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006716:	683a      	ldr	r2, [r7, #0]
 8006718:	4907      	ldr	r1, [pc, #28]	; (8006738 <USBD_FS_ConfigStrDescriptor+0x34>)
 800671a:	4808      	ldr	r0, [pc, #32]	; (800673c <USBD_FS_ConfigStrDescriptor+0x38>)
 800671c:	f7ff fd99 	bl	8006252 <USBD_GetString>
 8006720:	e004      	b.n	800672c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006722:	683a      	ldr	r2, [r7, #0]
 8006724:	4904      	ldr	r1, [pc, #16]	; (8006738 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006726:	4805      	ldr	r0, [pc, #20]	; (800673c <USBD_FS_ConfigStrDescriptor+0x38>)
 8006728:	f7ff fd93 	bl	8006252 <USBD_GetString>
  }
  return USBD_StrDesc;
 800672c:	4b02      	ldr	r3, [pc, #8]	; (8006738 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800672e:	4618      	mov	r0, r3
 8006730:	3708      	adds	r7, #8
 8006732:	46bd      	mov	sp, r7
 8006734:	bd80      	pop	{r7, pc}
 8006736:	bf00      	nop
 8006738:	20001110 	.word	0x20001110
 800673c:	08008078 	.word	0x08008078

08006740 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006740:	b580      	push	{r7, lr}
 8006742:	b082      	sub	sp, #8
 8006744:	af00      	add	r7, sp, #0
 8006746:	4603      	mov	r3, r0
 8006748:	6039      	str	r1, [r7, #0]
 800674a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800674c:	79fb      	ldrb	r3, [r7, #7]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d105      	bne.n	800675e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006752:	683a      	ldr	r2, [r7, #0]
 8006754:	4907      	ldr	r1, [pc, #28]	; (8006774 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006756:	4808      	ldr	r0, [pc, #32]	; (8006778 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006758:	f7ff fd7b 	bl	8006252 <USBD_GetString>
 800675c:	e004      	b.n	8006768 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800675e:	683a      	ldr	r2, [r7, #0]
 8006760:	4904      	ldr	r1, [pc, #16]	; (8006774 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006762:	4805      	ldr	r0, [pc, #20]	; (8006778 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006764:	f7ff fd75 	bl	8006252 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006768:	4b02      	ldr	r3, [pc, #8]	; (8006774 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800676a:	4618      	mov	r0, r3
 800676c:	3708      	adds	r7, #8
 800676e:	46bd      	mov	sp, r7
 8006770:	bd80      	pop	{r7, pc}
 8006772:	bf00      	nop
 8006774:	20001110 	.word	0x20001110
 8006778:	08008084 	.word	0x08008084

0800677c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 800677c:	b580      	push	{r7, lr}
 800677e:	b084      	sub	sp, #16
 8006780:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006782:	4b0f      	ldr	r3, [pc, #60]	; (80067c0 <Get_SerialNum+0x44>)
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006788:	4b0e      	ldr	r3, [pc, #56]	; (80067c4 <Get_SerialNum+0x48>)
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800678e:	4b0e      	ldr	r3, [pc, #56]	; (80067c8 <Get_SerialNum+0x4c>)
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006794:	68fa      	ldr	r2, [r7, #12]
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	4413      	add	r3, r2
 800679a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d009      	beq.n	80067b6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80067a2:	2208      	movs	r2, #8
 80067a4:	4909      	ldr	r1, [pc, #36]	; (80067cc <Get_SerialNum+0x50>)
 80067a6:	68f8      	ldr	r0, [r7, #12]
 80067a8:	f000 f814 	bl	80067d4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80067ac:	2204      	movs	r2, #4
 80067ae:	4908      	ldr	r1, [pc, #32]	; (80067d0 <Get_SerialNum+0x54>)
 80067b0:	68b8      	ldr	r0, [r7, #8]
 80067b2:	f000 f80f 	bl	80067d4 <IntToUnicode>
  }
}
 80067b6:	bf00      	nop
 80067b8:	3710      	adds	r7, #16
 80067ba:	46bd      	mov	sp, r7
 80067bc:	bd80      	pop	{r7, pc}
 80067be:	bf00      	nop
 80067c0:	1ffff7e8 	.word	0x1ffff7e8
 80067c4:	1ffff7ec 	.word	0x1ffff7ec
 80067c8:	1ffff7f0 	.word	0x1ffff7f0
 80067cc:	20000162 	.word	0x20000162
 80067d0:	20000172 	.word	0x20000172

080067d4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80067d4:	b480      	push	{r7}
 80067d6:	b087      	sub	sp, #28
 80067d8:	af00      	add	r7, sp, #0
 80067da:	60f8      	str	r0, [r7, #12]
 80067dc:	60b9      	str	r1, [r7, #8]
 80067de:	4613      	mov	r3, r2
 80067e0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80067e2:	2300      	movs	r3, #0
 80067e4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80067e6:	2300      	movs	r3, #0
 80067e8:	75fb      	strb	r3, [r7, #23]
 80067ea:	e027      	b.n	800683c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	0f1b      	lsrs	r3, r3, #28
 80067f0:	2b09      	cmp	r3, #9
 80067f2:	d80b      	bhi.n	800680c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	0f1b      	lsrs	r3, r3, #28
 80067f8:	b2da      	uxtb	r2, r3
 80067fa:	7dfb      	ldrb	r3, [r7, #23]
 80067fc:	005b      	lsls	r3, r3, #1
 80067fe:	4619      	mov	r1, r3
 8006800:	68bb      	ldr	r3, [r7, #8]
 8006802:	440b      	add	r3, r1
 8006804:	3230      	adds	r2, #48	; 0x30
 8006806:	b2d2      	uxtb	r2, r2
 8006808:	701a      	strb	r2, [r3, #0]
 800680a:	e00a      	b.n	8006822 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	0f1b      	lsrs	r3, r3, #28
 8006810:	b2da      	uxtb	r2, r3
 8006812:	7dfb      	ldrb	r3, [r7, #23]
 8006814:	005b      	lsls	r3, r3, #1
 8006816:	4619      	mov	r1, r3
 8006818:	68bb      	ldr	r3, [r7, #8]
 800681a:	440b      	add	r3, r1
 800681c:	3237      	adds	r2, #55	; 0x37
 800681e:	b2d2      	uxtb	r2, r2
 8006820:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	011b      	lsls	r3, r3, #4
 8006826:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006828:	7dfb      	ldrb	r3, [r7, #23]
 800682a:	005b      	lsls	r3, r3, #1
 800682c:	3301      	adds	r3, #1
 800682e:	68ba      	ldr	r2, [r7, #8]
 8006830:	4413      	add	r3, r2
 8006832:	2200      	movs	r2, #0
 8006834:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8006836:	7dfb      	ldrb	r3, [r7, #23]
 8006838:	3301      	adds	r3, #1
 800683a:	75fb      	strb	r3, [r7, #23]
 800683c:	7dfa      	ldrb	r2, [r7, #23]
 800683e:	79fb      	ldrb	r3, [r7, #7]
 8006840:	429a      	cmp	r2, r3
 8006842:	d3d3      	bcc.n	80067ec <IntToUnicode+0x18>
  }
}
 8006844:	bf00      	nop
 8006846:	371c      	adds	r7, #28
 8006848:	46bd      	mov	sp, r7
 800684a:	bc80      	pop	{r7}
 800684c:	4770      	bx	lr
	...

08006850 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006850:	b580      	push	{r7, lr}
 8006852:	b084      	sub	sp, #16
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	4a11      	ldr	r2, [pc, #68]	; (80068a4 <HAL_PCD_MspInit+0x54>)
 800685e:	4293      	cmp	r3, r2
 8006860:	d11b      	bne.n	800689a <HAL_PCD_MspInit+0x4a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8006862:	4b11      	ldr	r3, [pc, #68]	; (80068a8 <HAL_PCD_MspInit+0x58>)
 8006864:	69db      	ldr	r3, [r3, #28]
 8006866:	4a10      	ldr	r2, [pc, #64]	; (80068a8 <HAL_PCD_MspInit+0x58>)
 8006868:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800686c:	61d3      	str	r3, [r2, #28]
 800686e:	4b0e      	ldr	r3, [pc, #56]	; (80068a8 <HAL_PCD_MspInit+0x58>)
 8006870:	69db      	ldr	r3, [r3, #28]
 8006872:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006876:	60fb      	str	r3, [r7, #12]
 8006878:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 0, 0);
 800687a:	2200      	movs	r2, #0
 800687c:	2100      	movs	r1, #0
 800687e:	2013      	movs	r0, #19
 8006880:	f7fa fa97 	bl	8000db2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 8006884:	2013      	movs	r0, #19
 8006886:	f7fa fab0 	bl	8000dea <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800688a:	2200      	movs	r2, #0
 800688c:	2100      	movs	r1, #0
 800688e:	2014      	movs	r0, #20
 8006890:	f7fa fa8f 	bl	8000db2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8006894:	2014      	movs	r0, #20
 8006896:	f7fa faa8 	bl	8000dea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800689a:	bf00      	nop
 800689c:	3710      	adds	r7, #16
 800689e:	46bd      	mov	sp, r7
 80068a0:	bd80      	pop	{r7, pc}
 80068a2:	bf00      	nop
 80068a4:	40005c00 	.word	0x40005c00
 80068a8:	40021000 	.word	0x40021000

080068ac <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b082      	sub	sp, #8
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	f503 730c 	add.w	r3, r3, #560	; 0x230
 80068c0:	4619      	mov	r1, r3
 80068c2:	4610      	mov	r0, r2
 80068c4:	f7fe fda1 	bl	800540a <USBD_LL_SetupStage>
}
 80068c8:	bf00      	nop
 80068ca:	3708      	adds	r7, #8
 80068cc:	46bd      	mov	sp, r7
 80068ce:	bd80      	pop	{r7, pc}

080068d0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b082      	sub	sp, #8
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
 80068d8:	460b      	mov	r3, r1
 80068da:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 80068e2:	78fb      	ldrb	r3, [r7, #3]
 80068e4:	687a      	ldr	r2, [r7, #4]
 80068e6:	015b      	lsls	r3, r3, #5
 80068e8:	4413      	add	r3, r2
 80068ea:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80068ee:	681a      	ldr	r2, [r3, #0]
 80068f0:	78fb      	ldrb	r3, [r7, #3]
 80068f2:	4619      	mov	r1, r3
 80068f4:	f7fe fdd4 	bl	80054a0 <USBD_LL_DataOutStage>
}
 80068f8:	bf00      	nop
 80068fa:	3708      	adds	r7, #8
 80068fc:	46bd      	mov	sp, r7
 80068fe:	bd80      	pop	{r7, pc}

08006900 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006900:	b580      	push	{r7, lr}
 8006902:	b082      	sub	sp, #8
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
 8006908:	460b      	mov	r3, r1
 800690a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 8006912:	78fb      	ldrb	r3, [r7, #3]
 8006914:	687a      	ldr	r2, [r7, #4]
 8006916:	015b      	lsls	r3, r3, #5
 8006918:	4413      	add	r3, r2
 800691a:	333c      	adds	r3, #60	; 0x3c
 800691c:	681a      	ldr	r2, [r3, #0]
 800691e:	78fb      	ldrb	r3, [r7, #3]
 8006920:	4619      	mov	r1, r3
 8006922:	f7fe fe2e 	bl	8005582 <USBD_LL_DataInStage>
}
 8006926:	bf00      	nop
 8006928:	3708      	adds	r7, #8
 800692a:	46bd      	mov	sp, r7
 800692c:	bd80      	pop	{r7, pc}

0800692e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800692e:	b580      	push	{r7, lr}
 8006930:	b082      	sub	sp, #8
 8006932:	af00      	add	r7, sp, #0
 8006934:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800693c:	4618      	mov	r0, r3
 800693e:	f7fe ff3e 	bl	80057be <USBD_LL_SOF>
}
 8006942:	bf00      	nop
 8006944:	3708      	adds	r7, #8
 8006946:	46bd      	mov	sp, r7
 8006948:	bd80      	pop	{r7, pc}

0800694a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 800694a:	b580      	push	{r7, lr}
 800694c:	b084      	sub	sp, #16
 800694e:	af00      	add	r7, sp, #0
 8006950:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8006952:	2301      	movs	r3, #1
 8006954:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	689b      	ldr	r3, [r3, #8]
 800695a:	2b02      	cmp	r3, #2
 800695c:	d001      	beq.n	8006962 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800695e:	f7f9 ff29 	bl	80007b4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8006968:	7bfa      	ldrb	r2, [r7, #15]
 800696a:	4611      	mov	r1, r2
 800696c:	4618      	mov	r0, r3
 800696e:	f7fe feee 	bl	800574e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8006978:	4618      	mov	r0, r3
 800697a:	f7fe fea7 	bl	80056cc <USBD_LL_Reset>
}
 800697e:	bf00      	nop
 8006980:	3710      	adds	r7, #16
 8006982:	46bd      	mov	sp, r7
 8006984:	bd80      	pop	{r7, pc}
	...

08006988 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006988:	b580      	push	{r7, lr}
 800698a:	b082      	sub	sp, #8
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8006996:	4618      	mov	r0, r3
 8006998:	f7fe fee8 	bl	800576c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	699b      	ldr	r3, [r3, #24]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d005      	beq.n	80069b0 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80069a4:	4b04      	ldr	r3, [pc, #16]	; (80069b8 <HAL_PCD_SuspendCallback+0x30>)
 80069a6:	691b      	ldr	r3, [r3, #16]
 80069a8:	4a03      	ldr	r2, [pc, #12]	; (80069b8 <HAL_PCD_SuspendCallback+0x30>)
 80069aa:	f043 0306 	orr.w	r3, r3, #6
 80069ae:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80069b0:	bf00      	nop
 80069b2:	3708      	adds	r7, #8
 80069b4:	46bd      	mov	sp, r7
 80069b6:	bd80      	pop	{r7, pc}
 80069b8:	e000ed00 	.word	0xe000ed00

080069bc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80069bc:	b580      	push	{r7, lr}
 80069be:	b082      	sub	sp, #8
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80069ca:	4618      	mov	r0, r3
 80069cc:	f7fe fee2 	bl	8005794 <USBD_LL_Resume>
}
 80069d0:	bf00      	nop
 80069d2:	3708      	adds	r7, #8
 80069d4:	46bd      	mov	sp, r7
 80069d6:	bd80      	pop	{r7, pc}

080069d8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80069d8:	b580      	push	{r7, lr}
 80069da:	b082      	sub	sp, #8
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80069e0:	4a28      	ldr	r2, [pc, #160]	; (8006a84 <USBD_LL_Init+0xac>)
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
  pdev->pData = &hpcd_USB_FS;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	4a26      	ldr	r2, [pc, #152]	; (8006a84 <USBD_LL_Init+0xac>)
 80069ec:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 80069f0:	4b24      	ldr	r3, [pc, #144]	; (8006a84 <USBD_LL_Init+0xac>)
 80069f2:	4a25      	ldr	r2, [pc, #148]	; (8006a88 <USBD_LL_Init+0xb0>)
 80069f4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80069f6:	4b23      	ldr	r3, [pc, #140]	; (8006a84 <USBD_LL_Init+0xac>)
 80069f8:	2208      	movs	r2, #8
 80069fa:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80069fc:	4b21      	ldr	r3, [pc, #132]	; (8006a84 <USBD_LL_Init+0xac>)
 80069fe:	2202      	movs	r2, #2
 8006a00:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8006a02:	4b20      	ldr	r3, [pc, #128]	; (8006a84 <USBD_LL_Init+0xac>)
 8006a04:	2200      	movs	r2, #0
 8006a06:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8006a08:	4b1e      	ldr	r3, [pc, #120]	; (8006a84 <USBD_LL_Init+0xac>)
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8006a0e:	4b1d      	ldr	r3, [pc, #116]	; (8006a84 <USBD_LL_Init+0xac>)
 8006a10:	2200      	movs	r2, #0
 8006a12:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8006a14:	481b      	ldr	r0, [pc, #108]	; (8006a84 <USBD_LL_Init+0xac>)
 8006a16:	f7fa fb8d 	bl	8001134 <HAL_PCD_Init>
 8006a1a:	4603      	mov	r3, r0
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d001      	beq.n	8006a24 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8006a20:	f7f9 fec8 	bl	80007b4 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006a2a:	2318      	movs	r3, #24
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	2100      	movs	r1, #0
 8006a30:	f7fb fa26 	bl	8001e80 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006a3a:	2358      	movs	r3, #88	; 0x58
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	2180      	movs	r1, #128	; 0x80
 8006a40:	f7fb fa1e 	bl	8001e80 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006a4a:	23c0      	movs	r3, #192	; 0xc0
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	2181      	movs	r1, #129	; 0x81
 8006a50:	f7fb fa16 	bl	8001e80 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006a5a:	f44f 7388 	mov.w	r3, #272	; 0x110
 8006a5e:	2200      	movs	r2, #0
 8006a60:	2101      	movs	r1, #1
 8006a62:	f7fb fa0d 	bl	8001e80 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006a6c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006a70:	2200      	movs	r2, #0
 8006a72:	2182      	movs	r1, #130	; 0x82
 8006a74:	f7fb fa04 	bl	8001e80 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8006a78:	2300      	movs	r3, #0
}
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	3708      	adds	r7, #8
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	bd80      	pop	{r7, pc}
 8006a82:	bf00      	nop
 8006a84:	20001310 	.word	0x20001310
 8006a88:	40005c00 	.word	0x40005c00

08006a8c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b084      	sub	sp, #16
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006a94:	2300      	movs	r3, #0
 8006a96:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006a98:	2300      	movs	r3, #0
 8006a9a:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	f7fa fc27 	bl	80012f6 <HAL_PCD_Start>
 8006aa8:	4603      	mov	r3, r0
 8006aaa:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006aac:	7bfb      	ldrb	r3, [r7, #15]
 8006aae:	4618      	mov	r0, r3
 8006ab0:	f000 f948 	bl	8006d44 <USBD_Get_USB_Status>
 8006ab4:	4603      	mov	r3, r0
 8006ab6:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8006ab8:	7bbb      	ldrb	r3, [r7, #14]
}
 8006aba:	4618      	mov	r0, r3
 8006abc:	3710      	adds	r7, #16
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	bd80      	pop	{r7, pc}

08006ac2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8006ac2:	b580      	push	{r7, lr}
 8006ac4:	b084      	sub	sp, #16
 8006ac6:	af00      	add	r7, sp, #0
 8006ac8:	6078      	str	r0, [r7, #4]
 8006aca:	4608      	mov	r0, r1
 8006acc:	4611      	mov	r1, r2
 8006ace:	461a      	mov	r2, r3
 8006ad0:	4603      	mov	r3, r0
 8006ad2:	70fb      	strb	r3, [r7, #3]
 8006ad4:	460b      	mov	r3, r1
 8006ad6:	70bb      	strb	r3, [r7, #2]
 8006ad8:	4613      	mov	r3, r2
 8006ada:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006adc:	2300      	movs	r3, #0
 8006ade:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006aea:	78bb      	ldrb	r3, [r7, #2]
 8006aec:	883a      	ldrh	r2, [r7, #0]
 8006aee:	78f9      	ldrb	r1, [r7, #3]
 8006af0:	f7fa fd5a 	bl	80015a8 <HAL_PCD_EP_Open>
 8006af4:	4603      	mov	r3, r0
 8006af6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006af8:	7bfb      	ldrb	r3, [r7, #15]
 8006afa:	4618      	mov	r0, r3
 8006afc:	f000 f922 	bl	8006d44 <USBD_Get_USB_Status>
 8006b00:	4603      	mov	r3, r0
 8006b02:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 8006b04:	7bbb      	ldrb	r3, [r7, #14]
}
 8006b06:	4618      	mov	r0, r3
 8006b08:	3710      	adds	r7, #16
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	bd80      	pop	{r7, pc}

08006b0e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006b0e:	b580      	push	{r7, lr}
 8006b10:	b084      	sub	sp, #16
 8006b12:	af00      	add	r7, sp, #0
 8006b14:	6078      	str	r0, [r7, #4]
 8006b16:	460b      	mov	r3, r1
 8006b18:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006b1e:	2300      	movs	r3, #0
 8006b20:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006b28:	78fa      	ldrb	r2, [r7, #3]
 8006b2a:	4611      	mov	r1, r2
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	f7fa fd9b 	bl	8001668 <HAL_PCD_EP_Close>
 8006b32:	4603      	mov	r3, r0
 8006b34:	73fb      	strb	r3, [r7, #15]
      
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006b36:	7bfb      	ldrb	r3, [r7, #15]
 8006b38:	4618      	mov	r0, r3
 8006b3a:	f000 f903 	bl	8006d44 <USBD_Get_USB_Status>
 8006b3e:	4603      	mov	r3, r0
 8006b40:	73bb      	strb	r3, [r7, #14]

  return usb_status;  
 8006b42:	7bbb      	ldrb	r3, [r7, #14]
}
 8006b44:	4618      	mov	r0, r3
 8006b46:	3710      	adds	r7, #16
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	bd80      	pop	{r7, pc}

08006b4c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	b084      	sub	sp, #16
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
 8006b54:	460b      	mov	r3, r1
 8006b56:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006b58:	2300      	movs	r3, #0
 8006b5a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006b5c:	2300      	movs	r3, #0
 8006b5e:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006b66:	78fa      	ldrb	r2, [r7, #3]
 8006b68:	4611      	mov	r1, r2
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	f7fa fe45 	bl	80017fa <HAL_PCD_EP_SetStall>
 8006b70:	4603      	mov	r3, r0
 8006b72:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006b74:	7bfb      	ldrb	r3, [r7, #15]
 8006b76:	4618      	mov	r0, r3
 8006b78:	f000 f8e4 	bl	8006d44 <USBD_Get_USB_Status>
 8006b7c:	4603      	mov	r3, r0
 8006b7e:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8006b80:	7bbb      	ldrb	r3, [r7, #14]
}
 8006b82:	4618      	mov	r0, r3
 8006b84:	3710      	adds	r7, #16
 8006b86:	46bd      	mov	sp, r7
 8006b88:	bd80      	pop	{r7, pc}

08006b8a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006b8a:	b580      	push	{r7, lr}
 8006b8c:	b084      	sub	sp, #16
 8006b8e:	af00      	add	r7, sp, #0
 8006b90:	6078      	str	r0, [r7, #4]
 8006b92:	460b      	mov	r3, r1
 8006b94:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006b96:	2300      	movs	r3, #0
 8006b98:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006ba4:	78fa      	ldrb	r2, [r7, #3]
 8006ba6:	4611      	mov	r1, r2
 8006ba8:	4618      	mov	r0, r3
 8006baa:	f7fa fe80 	bl	80018ae <HAL_PCD_EP_ClrStall>
 8006bae:	4603      	mov	r3, r0
 8006bb0:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006bb2:	7bfb      	ldrb	r3, [r7, #15]
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	f000 f8c5 	bl	8006d44 <USBD_Get_USB_Status>
 8006bba:	4603      	mov	r3, r0
 8006bbc:	73bb      	strb	r3, [r7, #14]

  return usb_status; 
 8006bbe:	7bbb      	ldrb	r3, [r7, #14]
}
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	3710      	adds	r7, #16
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	bd80      	pop	{r7, pc}

08006bc8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006bc8:	b480      	push	{r7}
 8006bca:	b085      	sub	sp, #20
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
 8006bd0:	460b      	mov	r3, r1
 8006bd2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006bda:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8006bdc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	da08      	bge.n	8006bf6 <USBD_LL_IsStallEP+0x2e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8006be4:	78fb      	ldrb	r3, [r7, #3]
 8006be6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006bea:	68fa      	ldr	r2, [r7, #12]
 8006bec:	015b      	lsls	r3, r3, #5
 8006bee:	4413      	add	r3, r2
 8006bf0:	332a      	adds	r3, #42	; 0x2a
 8006bf2:	781b      	ldrb	r3, [r3, #0]
 8006bf4:	e008      	b.n	8006c08 <USBD_LL_IsStallEP+0x40>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8006bf6:	78fb      	ldrb	r3, [r7, #3]
 8006bf8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006bfc:	68fa      	ldr	r2, [r7, #12]
 8006bfe:	015b      	lsls	r3, r3, #5
 8006c00:	4413      	add	r3, r2
 8006c02:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 8006c06:	781b      	ldrb	r3, [r3, #0]
  }
}
 8006c08:	4618      	mov	r0, r3
 8006c0a:	3714      	adds	r7, #20
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	bc80      	pop	{r7}
 8006c10:	4770      	bx	lr

08006c12 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8006c12:	b580      	push	{r7, lr}
 8006c14:	b084      	sub	sp, #16
 8006c16:	af00      	add	r7, sp, #0
 8006c18:	6078      	str	r0, [r7, #4]
 8006c1a:	460b      	mov	r3, r1
 8006c1c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006c1e:	2300      	movs	r3, #0
 8006c20:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006c22:	2300      	movs	r3, #0
 8006c24:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006c2c:	78fa      	ldrb	r2, [r7, #3]
 8006c2e:	4611      	mov	r1, r2
 8006c30:	4618      	mov	r0, r3
 8006c32:	f7fa fc94 	bl	800155e <HAL_PCD_SetAddress>
 8006c36:	4603      	mov	r3, r0
 8006c38:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006c3a:	7bfb      	ldrb	r3, [r7, #15]
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	f000 f881 	bl	8006d44 <USBD_Get_USB_Status>
 8006c42:	4603      	mov	r3, r0
 8006c44:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8006c46:	7bbb      	ldrb	r3, [r7, #14]
}
 8006c48:	4618      	mov	r0, r3
 8006c4a:	3710      	adds	r7, #16
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	bd80      	pop	{r7, pc}

08006c50 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8006c50:	b580      	push	{r7, lr}
 8006c52:	b086      	sub	sp, #24
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	60f8      	str	r0, [r7, #12]
 8006c58:	607a      	str	r2, [r7, #4]
 8006c5a:	461a      	mov	r2, r3
 8006c5c:	460b      	mov	r3, r1
 8006c5e:	72fb      	strb	r3, [r7, #11]
 8006c60:	4613      	mov	r3, r2
 8006c62:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006c64:	2300      	movs	r3, #0
 8006c66:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006c68:	2300      	movs	r3, #0
 8006c6a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006c72:	893b      	ldrh	r3, [r7, #8]
 8006c74:	7af9      	ldrb	r1, [r7, #11]
 8006c76:	687a      	ldr	r2, [r7, #4]
 8006c78:	f7fa fd86 	bl	8001788 <HAL_PCD_EP_Transmit>
 8006c7c:	4603      	mov	r3, r0
 8006c7e:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006c80:	7dfb      	ldrb	r3, [r7, #23]
 8006c82:	4618      	mov	r0, r3
 8006c84:	f000 f85e 	bl	8006d44 <USBD_Get_USB_Status>
 8006c88:	4603      	mov	r3, r0
 8006c8a:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 8006c8c:	7dbb      	ldrb	r3, [r7, #22]
}
 8006c8e:	4618      	mov	r0, r3
 8006c90:	3718      	adds	r7, #24
 8006c92:	46bd      	mov	sp, r7
 8006c94:	bd80      	pop	{r7, pc}

08006c96 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8006c96:	b580      	push	{r7, lr}
 8006c98:	b086      	sub	sp, #24
 8006c9a:	af00      	add	r7, sp, #0
 8006c9c:	60f8      	str	r0, [r7, #12]
 8006c9e:	607a      	str	r2, [r7, #4]
 8006ca0:	461a      	mov	r2, r3
 8006ca2:	460b      	mov	r3, r1
 8006ca4:	72fb      	strb	r3, [r7, #11]
 8006ca6:	4613      	mov	r3, r2
 8006ca8:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006caa:	2300      	movs	r3, #0
 8006cac:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006cae:	2300      	movs	r3, #0
 8006cb0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006cb8:	893b      	ldrh	r3, [r7, #8]
 8006cba:	7af9      	ldrb	r1, [r7, #11]
 8006cbc:	687a      	ldr	r2, [r7, #4]
 8006cbe:	f7fa fd15 	bl	80016ec <HAL_PCD_EP_Receive>
 8006cc2:	4603      	mov	r3, r0
 8006cc4:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006cc6:	7dfb      	ldrb	r3, [r7, #23]
 8006cc8:	4618      	mov	r0, r3
 8006cca:	f000 f83b 	bl	8006d44 <USBD_Get_USB_Status>
 8006cce:	4603      	mov	r3, r0
 8006cd0:	75bb      	strb	r3, [r7, #22]
  	
  return usb_status; 
 8006cd2:	7dbb      	ldrb	r3, [r7, #22]
}
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	3718      	adds	r7, #24
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	bd80      	pop	{r7, pc}

08006cdc <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b082      	sub	sp, #8
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
 8006ce4:	460b      	mov	r3, r1
 8006ce6:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006cee:	78fa      	ldrb	r2, [r7, #3]
 8006cf0:	4611      	mov	r1, r2
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	f7fa fd34 	bl	8001760 <HAL_PCD_EP_GetRxCount>
 8006cf8:	4603      	mov	r3, r0
}
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	3708      	adds	r7, #8
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	bd80      	pop	{r7, pc}
	...

08006d04 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8006d04:	b480      	push	{r7}
 8006d06:	b083      	sub	sp, #12
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8006d0c:	4b02      	ldr	r3, [pc, #8]	; (8006d18 <USBD_static_malloc+0x14>)
}
 8006d0e:	4618      	mov	r0, r3
 8006d10:	370c      	adds	r7, #12
 8006d12:	46bd      	mov	sp, r7
 8006d14:	bc80      	pop	{r7}
 8006d16:	4770      	bx	lr
 8006d18:	200003d0 	.word	0x200003d0

08006d1c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8006d1c:	b480      	push	{r7}
 8006d1e:	b083      	sub	sp, #12
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]

}
 8006d24:	bf00      	nop
 8006d26:	370c      	adds	r7, #12
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	bc80      	pop	{r7}
 8006d2c:	4770      	bx	lr

08006d2e <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006d2e:	b480      	push	{r7}
 8006d30:	b083      	sub	sp, #12
 8006d32:	af00      	add	r7, sp, #0
 8006d34:	6078      	str	r0, [r7, #4]
 8006d36:	460b      	mov	r3, r1
 8006d38:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8006d3a:	bf00      	nop
 8006d3c:	370c      	adds	r7, #12
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	bc80      	pop	{r7}
 8006d42:	4770      	bx	lr

08006d44 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8006d44:	b480      	push	{r7}
 8006d46:	b085      	sub	sp, #20
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	4603      	mov	r3, r0
 8006d4c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006d4e:	2300      	movs	r3, #0
 8006d50:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8006d52:	79fb      	ldrb	r3, [r7, #7]
 8006d54:	2b03      	cmp	r3, #3
 8006d56:	d817      	bhi.n	8006d88 <USBD_Get_USB_Status+0x44>
 8006d58:	a201      	add	r2, pc, #4	; (adr r2, 8006d60 <USBD_Get_USB_Status+0x1c>)
 8006d5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d5e:	bf00      	nop
 8006d60:	08006d71 	.word	0x08006d71
 8006d64:	08006d77 	.word	0x08006d77
 8006d68:	08006d7d 	.word	0x08006d7d
 8006d6c:	08006d83 	.word	0x08006d83
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8006d70:	2300      	movs	r3, #0
 8006d72:	73fb      	strb	r3, [r7, #15]
    break;
 8006d74:	e00b      	b.n	8006d8e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006d76:	2302      	movs	r3, #2
 8006d78:	73fb      	strb	r3, [r7, #15]
    break;
 8006d7a:	e008      	b.n	8006d8e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006d7c:	2301      	movs	r3, #1
 8006d7e:	73fb      	strb	r3, [r7, #15]
    break;
 8006d80:	e005      	b.n	8006d8e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006d82:	2302      	movs	r3, #2
 8006d84:	73fb      	strb	r3, [r7, #15]
    break;
 8006d86:	e002      	b.n	8006d8e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8006d88:	2302      	movs	r3, #2
 8006d8a:	73fb      	strb	r3, [r7, #15]
    break;
 8006d8c:	bf00      	nop
  }
  return usb_status;
 8006d8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d90:	4618      	mov	r0, r3
 8006d92:	3714      	adds	r7, #20
 8006d94:	46bd      	mov	sp, r7
 8006d96:	bc80      	pop	{r7}
 8006d98:	4770      	bx	lr
 8006d9a:	bf00      	nop

08006d9c <__errno>:
 8006d9c:	4b01      	ldr	r3, [pc, #4]	; (8006da4 <__errno+0x8>)
 8006d9e:	6818      	ldr	r0, [r3, #0]
 8006da0:	4770      	bx	lr
 8006da2:	bf00      	nop
 8006da4:	2000017c 	.word	0x2000017c

08006da8 <__libc_init_array>:
 8006da8:	b570      	push	{r4, r5, r6, lr}
 8006daa:	2500      	movs	r5, #0
 8006dac:	4e0c      	ldr	r6, [pc, #48]	; (8006de0 <__libc_init_array+0x38>)
 8006dae:	4c0d      	ldr	r4, [pc, #52]	; (8006de4 <__libc_init_array+0x3c>)
 8006db0:	1ba4      	subs	r4, r4, r6
 8006db2:	10a4      	asrs	r4, r4, #2
 8006db4:	42a5      	cmp	r5, r4
 8006db6:	d109      	bne.n	8006dcc <__libc_init_array+0x24>
 8006db8:	f001 f916 	bl	8007fe8 <_init>
 8006dbc:	2500      	movs	r5, #0
 8006dbe:	4e0a      	ldr	r6, [pc, #40]	; (8006de8 <__libc_init_array+0x40>)
 8006dc0:	4c0a      	ldr	r4, [pc, #40]	; (8006dec <__libc_init_array+0x44>)
 8006dc2:	1ba4      	subs	r4, r4, r6
 8006dc4:	10a4      	asrs	r4, r4, #2
 8006dc6:	42a5      	cmp	r5, r4
 8006dc8:	d105      	bne.n	8006dd6 <__libc_init_array+0x2e>
 8006dca:	bd70      	pop	{r4, r5, r6, pc}
 8006dcc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006dd0:	4798      	blx	r3
 8006dd2:	3501      	adds	r5, #1
 8006dd4:	e7ee      	b.n	8006db4 <__libc_init_array+0xc>
 8006dd6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006dda:	4798      	blx	r3
 8006ddc:	3501      	adds	r5, #1
 8006dde:	e7f2      	b.n	8006dc6 <__libc_init_array+0x1e>
 8006de0:	08008274 	.word	0x08008274
 8006de4:	08008274 	.word	0x08008274
 8006de8:	08008274 	.word	0x08008274
 8006dec:	08008278 	.word	0x08008278

08006df0 <memset>:
 8006df0:	4603      	mov	r3, r0
 8006df2:	4402      	add	r2, r0
 8006df4:	4293      	cmp	r3, r2
 8006df6:	d100      	bne.n	8006dfa <memset+0xa>
 8006df8:	4770      	bx	lr
 8006dfa:	f803 1b01 	strb.w	r1, [r3], #1
 8006dfe:	e7f9      	b.n	8006df4 <memset+0x4>

08006e00 <siprintf>:
 8006e00:	b40e      	push	{r1, r2, r3}
 8006e02:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006e06:	b500      	push	{lr}
 8006e08:	b09c      	sub	sp, #112	; 0x70
 8006e0a:	ab1d      	add	r3, sp, #116	; 0x74
 8006e0c:	9002      	str	r0, [sp, #8]
 8006e0e:	9006      	str	r0, [sp, #24]
 8006e10:	9107      	str	r1, [sp, #28]
 8006e12:	9104      	str	r1, [sp, #16]
 8006e14:	4808      	ldr	r0, [pc, #32]	; (8006e38 <siprintf+0x38>)
 8006e16:	4909      	ldr	r1, [pc, #36]	; (8006e3c <siprintf+0x3c>)
 8006e18:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e1c:	9105      	str	r1, [sp, #20]
 8006e1e:	6800      	ldr	r0, [r0, #0]
 8006e20:	a902      	add	r1, sp, #8
 8006e22:	9301      	str	r3, [sp, #4]
 8006e24:	f000 f892 	bl	8006f4c <_svfiprintf_r>
 8006e28:	2200      	movs	r2, #0
 8006e2a:	9b02      	ldr	r3, [sp, #8]
 8006e2c:	701a      	strb	r2, [r3, #0]
 8006e2e:	b01c      	add	sp, #112	; 0x70
 8006e30:	f85d eb04 	ldr.w	lr, [sp], #4
 8006e34:	b003      	add	sp, #12
 8006e36:	4770      	bx	lr
 8006e38:	2000017c 	.word	0x2000017c
 8006e3c:	ffff0208 	.word	0xffff0208

08006e40 <siscanf>:
 8006e40:	b40e      	push	{r1, r2, r3}
 8006e42:	f44f 7201 	mov.w	r2, #516	; 0x204
 8006e46:	b530      	push	{r4, r5, lr}
 8006e48:	b09c      	sub	sp, #112	; 0x70
 8006e4a:	ac1f      	add	r4, sp, #124	; 0x7c
 8006e4c:	f854 5b04 	ldr.w	r5, [r4], #4
 8006e50:	f8ad 2014 	strh.w	r2, [sp, #20]
 8006e54:	9002      	str	r0, [sp, #8]
 8006e56:	9006      	str	r0, [sp, #24]
 8006e58:	f7f9 f978 	bl	800014c <strlen>
 8006e5c:	4b0b      	ldr	r3, [pc, #44]	; (8006e8c <siscanf+0x4c>)
 8006e5e:	9003      	str	r0, [sp, #12]
 8006e60:	930b      	str	r3, [sp, #44]	; 0x2c
 8006e62:	2300      	movs	r3, #0
 8006e64:	930f      	str	r3, [sp, #60]	; 0x3c
 8006e66:	9314      	str	r3, [sp, #80]	; 0x50
 8006e68:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006e6c:	9007      	str	r0, [sp, #28]
 8006e6e:	4808      	ldr	r0, [pc, #32]	; (8006e90 <siscanf+0x50>)
 8006e70:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006e74:	462a      	mov	r2, r5
 8006e76:	4623      	mov	r3, r4
 8006e78:	a902      	add	r1, sp, #8
 8006e7a:	6800      	ldr	r0, [r0, #0]
 8006e7c:	9401      	str	r4, [sp, #4]
 8006e7e:	f000 f9b7 	bl	80071f0 <__ssvfiscanf_r>
 8006e82:	b01c      	add	sp, #112	; 0x70
 8006e84:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006e88:	b003      	add	sp, #12
 8006e8a:	4770      	bx	lr
 8006e8c:	08006e95 	.word	0x08006e95
 8006e90:	2000017c 	.word	0x2000017c

08006e94 <__seofread>:
 8006e94:	2000      	movs	r0, #0
 8006e96:	4770      	bx	lr

08006e98 <__ssputs_r>:
 8006e98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e9c:	688e      	ldr	r6, [r1, #8]
 8006e9e:	4682      	mov	sl, r0
 8006ea0:	429e      	cmp	r6, r3
 8006ea2:	460c      	mov	r4, r1
 8006ea4:	4690      	mov	r8, r2
 8006ea6:	4699      	mov	r9, r3
 8006ea8:	d837      	bhi.n	8006f1a <__ssputs_r+0x82>
 8006eaa:	898a      	ldrh	r2, [r1, #12]
 8006eac:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006eb0:	d031      	beq.n	8006f16 <__ssputs_r+0x7e>
 8006eb2:	2302      	movs	r3, #2
 8006eb4:	6825      	ldr	r5, [r4, #0]
 8006eb6:	6909      	ldr	r1, [r1, #16]
 8006eb8:	1a6f      	subs	r7, r5, r1
 8006eba:	6965      	ldr	r5, [r4, #20]
 8006ebc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006ec0:	fb95 f5f3 	sdiv	r5, r5, r3
 8006ec4:	f109 0301 	add.w	r3, r9, #1
 8006ec8:	443b      	add	r3, r7
 8006eca:	429d      	cmp	r5, r3
 8006ecc:	bf38      	it	cc
 8006ece:	461d      	movcc	r5, r3
 8006ed0:	0553      	lsls	r3, r2, #21
 8006ed2:	d530      	bpl.n	8006f36 <__ssputs_r+0x9e>
 8006ed4:	4629      	mov	r1, r5
 8006ed6:	f000 ffdf 	bl	8007e98 <_malloc_r>
 8006eda:	4606      	mov	r6, r0
 8006edc:	b950      	cbnz	r0, 8006ef4 <__ssputs_r+0x5c>
 8006ede:	230c      	movs	r3, #12
 8006ee0:	f04f 30ff 	mov.w	r0, #4294967295
 8006ee4:	f8ca 3000 	str.w	r3, [sl]
 8006ee8:	89a3      	ldrh	r3, [r4, #12]
 8006eea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006eee:	81a3      	strh	r3, [r4, #12]
 8006ef0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ef4:	463a      	mov	r2, r7
 8006ef6:	6921      	ldr	r1, [r4, #16]
 8006ef8:	f000 ff5e 	bl	8007db8 <memcpy>
 8006efc:	89a3      	ldrh	r3, [r4, #12]
 8006efe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006f02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f06:	81a3      	strh	r3, [r4, #12]
 8006f08:	6126      	str	r6, [r4, #16]
 8006f0a:	443e      	add	r6, r7
 8006f0c:	6026      	str	r6, [r4, #0]
 8006f0e:	464e      	mov	r6, r9
 8006f10:	6165      	str	r5, [r4, #20]
 8006f12:	1bed      	subs	r5, r5, r7
 8006f14:	60a5      	str	r5, [r4, #8]
 8006f16:	454e      	cmp	r6, r9
 8006f18:	d900      	bls.n	8006f1c <__ssputs_r+0x84>
 8006f1a:	464e      	mov	r6, r9
 8006f1c:	4632      	mov	r2, r6
 8006f1e:	4641      	mov	r1, r8
 8006f20:	6820      	ldr	r0, [r4, #0]
 8006f22:	f000 ff54 	bl	8007dce <memmove>
 8006f26:	68a3      	ldr	r3, [r4, #8]
 8006f28:	2000      	movs	r0, #0
 8006f2a:	1b9b      	subs	r3, r3, r6
 8006f2c:	60a3      	str	r3, [r4, #8]
 8006f2e:	6823      	ldr	r3, [r4, #0]
 8006f30:	441e      	add	r6, r3
 8006f32:	6026      	str	r6, [r4, #0]
 8006f34:	e7dc      	b.n	8006ef0 <__ssputs_r+0x58>
 8006f36:	462a      	mov	r2, r5
 8006f38:	f001 f808 	bl	8007f4c <_realloc_r>
 8006f3c:	4606      	mov	r6, r0
 8006f3e:	2800      	cmp	r0, #0
 8006f40:	d1e2      	bne.n	8006f08 <__ssputs_r+0x70>
 8006f42:	6921      	ldr	r1, [r4, #16]
 8006f44:	4650      	mov	r0, sl
 8006f46:	f000 ff5b 	bl	8007e00 <_free_r>
 8006f4a:	e7c8      	b.n	8006ede <__ssputs_r+0x46>

08006f4c <_svfiprintf_r>:
 8006f4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f50:	461d      	mov	r5, r3
 8006f52:	898b      	ldrh	r3, [r1, #12]
 8006f54:	b09d      	sub	sp, #116	; 0x74
 8006f56:	061f      	lsls	r7, r3, #24
 8006f58:	4680      	mov	r8, r0
 8006f5a:	460c      	mov	r4, r1
 8006f5c:	4616      	mov	r6, r2
 8006f5e:	d50f      	bpl.n	8006f80 <_svfiprintf_r+0x34>
 8006f60:	690b      	ldr	r3, [r1, #16]
 8006f62:	b96b      	cbnz	r3, 8006f80 <_svfiprintf_r+0x34>
 8006f64:	2140      	movs	r1, #64	; 0x40
 8006f66:	f000 ff97 	bl	8007e98 <_malloc_r>
 8006f6a:	6020      	str	r0, [r4, #0]
 8006f6c:	6120      	str	r0, [r4, #16]
 8006f6e:	b928      	cbnz	r0, 8006f7c <_svfiprintf_r+0x30>
 8006f70:	230c      	movs	r3, #12
 8006f72:	f8c8 3000 	str.w	r3, [r8]
 8006f76:	f04f 30ff 	mov.w	r0, #4294967295
 8006f7a:	e0c8      	b.n	800710e <_svfiprintf_r+0x1c2>
 8006f7c:	2340      	movs	r3, #64	; 0x40
 8006f7e:	6163      	str	r3, [r4, #20]
 8006f80:	2300      	movs	r3, #0
 8006f82:	9309      	str	r3, [sp, #36]	; 0x24
 8006f84:	2320      	movs	r3, #32
 8006f86:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006f8a:	2330      	movs	r3, #48	; 0x30
 8006f8c:	f04f 0b01 	mov.w	fp, #1
 8006f90:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006f94:	9503      	str	r5, [sp, #12]
 8006f96:	4637      	mov	r7, r6
 8006f98:	463d      	mov	r5, r7
 8006f9a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006f9e:	b10b      	cbz	r3, 8006fa4 <_svfiprintf_r+0x58>
 8006fa0:	2b25      	cmp	r3, #37	; 0x25
 8006fa2:	d13e      	bne.n	8007022 <_svfiprintf_r+0xd6>
 8006fa4:	ebb7 0a06 	subs.w	sl, r7, r6
 8006fa8:	d00b      	beq.n	8006fc2 <_svfiprintf_r+0x76>
 8006faa:	4653      	mov	r3, sl
 8006fac:	4632      	mov	r2, r6
 8006fae:	4621      	mov	r1, r4
 8006fb0:	4640      	mov	r0, r8
 8006fb2:	f7ff ff71 	bl	8006e98 <__ssputs_r>
 8006fb6:	3001      	adds	r0, #1
 8006fb8:	f000 80a4 	beq.w	8007104 <_svfiprintf_r+0x1b8>
 8006fbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006fbe:	4453      	add	r3, sl
 8006fc0:	9309      	str	r3, [sp, #36]	; 0x24
 8006fc2:	783b      	ldrb	r3, [r7, #0]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	f000 809d 	beq.w	8007104 <_svfiprintf_r+0x1b8>
 8006fca:	2300      	movs	r3, #0
 8006fcc:	f04f 32ff 	mov.w	r2, #4294967295
 8006fd0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006fd4:	9304      	str	r3, [sp, #16]
 8006fd6:	9307      	str	r3, [sp, #28]
 8006fd8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006fdc:	931a      	str	r3, [sp, #104]	; 0x68
 8006fde:	462f      	mov	r7, r5
 8006fe0:	2205      	movs	r2, #5
 8006fe2:	f817 1b01 	ldrb.w	r1, [r7], #1
 8006fe6:	4850      	ldr	r0, [pc, #320]	; (8007128 <_svfiprintf_r+0x1dc>)
 8006fe8:	f000 fed8 	bl	8007d9c <memchr>
 8006fec:	9b04      	ldr	r3, [sp, #16]
 8006fee:	b9d0      	cbnz	r0, 8007026 <_svfiprintf_r+0xda>
 8006ff0:	06d9      	lsls	r1, r3, #27
 8006ff2:	bf44      	itt	mi
 8006ff4:	2220      	movmi	r2, #32
 8006ff6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006ffa:	071a      	lsls	r2, r3, #28
 8006ffc:	bf44      	itt	mi
 8006ffe:	222b      	movmi	r2, #43	; 0x2b
 8007000:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007004:	782a      	ldrb	r2, [r5, #0]
 8007006:	2a2a      	cmp	r2, #42	; 0x2a
 8007008:	d015      	beq.n	8007036 <_svfiprintf_r+0xea>
 800700a:	462f      	mov	r7, r5
 800700c:	2000      	movs	r0, #0
 800700e:	250a      	movs	r5, #10
 8007010:	9a07      	ldr	r2, [sp, #28]
 8007012:	4639      	mov	r1, r7
 8007014:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007018:	3b30      	subs	r3, #48	; 0x30
 800701a:	2b09      	cmp	r3, #9
 800701c:	d94d      	bls.n	80070ba <_svfiprintf_r+0x16e>
 800701e:	b1b8      	cbz	r0, 8007050 <_svfiprintf_r+0x104>
 8007020:	e00f      	b.n	8007042 <_svfiprintf_r+0xf6>
 8007022:	462f      	mov	r7, r5
 8007024:	e7b8      	b.n	8006f98 <_svfiprintf_r+0x4c>
 8007026:	4a40      	ldr	r2, [pc, #256]	; (8007128 <_svfiprintf_r+0x1dc>)
 8007028:	463d      	mov	r5, r7
 800702a:	1a80      	subs	r0, r0, r2
 800702c:	fa0b f000 	lsl.w	r0, fp, r0
 8007030:	4318      	orrs	r0, r3
 8007032:	9004      	str	r0, [sp, #16]
 8007034:	e7d3      	b.n	8006fde <_svfiprintf_r+0x92>
 8007036:	9a03      	ldr	r2, [sp, #12]
 8007038:	1d11      	adds	r1, r2, #4
 800703a:	6812      	ldr	r2, [r2, #0]
 800703c:	9103      	str	r1, [sp, #12]
 800703e:	2a00      	cmp	r2, #0
 8007040:	db01      	blt.n	8007046 <_svfiprintf_r+0xfa>
 8007042:	9207      	str	r2, [sp, #28]
 8007044:	e004      	b.n	8007050 <_svfiprintf_r+0x104>
 8007046:	4252      	negs	r2, r2
 8007048:	f043 0302 	orr.w	r3, r3, #2
 800704c:	9207      	str	r2, [sp, #28]
 800704e:	9304      	str	r3, [sp, #16]
 8007050:	783b      	ldrb	r3, [r7, #0]
 8007052:	2b2e      	cmp	r3, #46	; 0x2e
 8007054:	d10c      	bne.n	8007070 <_svfiprintf_r+0x124>
 8007056:	787b      	ldrb	r3, [r7, #1]
 8007058:	2b2a      	cmp	r3, #42	; 0x2a
 800705a:	d133      	bne.n	80070c4 <_svfiprintf_r+0x178>
 800705c:	9b03      	ldr	r3, [sp, #12]
 800705e:	3702      	adds	r7, #2
 8007060:	1d1a      	adds	r2, r3, #4
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	9203      	str	r2, [sp, #12]
 8007066:	2b00      	cmp	r3, #0
 8007068:	bfb8      	it	lt
 800706a:	f04f 33ff 	movlt.w	r3, #4294967295
 800706e:	9305      	str	r3, [sp, #20]
 8007070:	4d2e      	ldr	r5, [pc, #184]	; (800712c <_svfiprintf_r+0x1e0>)
 8007072:	2203      	movs	r2, #3
 8007074:	7839      	ldrb	r1, [r7, #0]
 8007076:	4628      	mov	r0, r5
 8007078:	f000 fe90 	bl	8007d9c <memchr>
 800707c:	b138      	cbz	r0, 800708e <_svfiprintf_r+0x142>
 800707e:	2340      	movs	r3, #64	; 0x40
 8007080:	1b40      	subs	r0, r0, r5
 8007082:	fa03 f000 	lsl.w	r0, r3, r0
 8007086:	9b04      	ldr	r3, [sp, #16]
 8007088:	3701      	adds	r7, #1
 800708a:	4303      	orrs	r3, r0
 800708c:	9304      	str	r3, [sp, #16]
 800708e:	7839      	ldrb	r1, [r7, #0]
 8007090:	2206      	movs	r2, #6
 8007092:	4827      	ldr	r0, [pc, #156]	; (8007130 <_svfiprintf_r+0x1e4>)
 8007094:	1c7e      	adds	r6, r7, #1
 8007096:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800709a:	f000 fe7f 	bl	8007d9c <memchr>
 800709e:	2800      	cmp	r0, #0
 80070a0:	d038      	beq.n	8007114 <_svfiprintf_r+0x1c8>
 80070a2:	4b24      	ldr	r3, [pc, #144]	; (8007134 <_svfiprintf_r+0x1e8>)
 80070a4:	bb13      	cbnz	r3, 80070ec <_svfiprintf_r+0x1a0>
 80070a6:	9b03      	ldr	r3, [sp, #12]
 80070a8:	3307      	adds	r3, #7
 80070aa:	f023 0307 	bic.w	r3, r3, #7
 80070ae:	3308      	adds	r3, #8
 80070b0:	9303      	str	r3, [sp, #12]
 80070b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070b4:	444b      	add	r3, r9
 80070b6:	9309      	str	r3, [sp, #36]	; 0x24
 80070b8:	e76d      	b.n	8006f96 <_svfiprintf_r+0x4a>
 80070ba:	fb05 3202 	mla	r2, r5, r2, r3
 80070be:	2001      	movs	r0, #1
 80070c0:	460f      	mov	r7, r1
 80070c2:	e7a6      	b.n	8007012 <_svfiprintf_r+0xc6>
 80070c4:	2300      	movs	r3, #0
 80070c6:	250a      	movs	r5, #10
 80070c8:	4619      	mov	r1, r3
 80070ca:	3701      	adds	r7, #1
 80070cc:	9305      	str	r3, [sp, #20]
 80070ce:	4638      	mov	r0, r7
 80070d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80070d4:	3a30      	subs	r2, #48	; 0x30
 80070d6:	2a09      	cmp	r2, #9
 80070d8:	d903      	bls.n	80070e2 <_svfiprintf_r+0x196>
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d0c8      	beq.n	8007070 <_svfiprintf_r+0x124>
 80070de:	9105      	str	r1, [sp, #20]
 80070e0:	e7c6      	b.n	8007070 <_svfiprintf_r+0x124>
 80070e2:	fb05 2101 	mla	r1, r5, r1, r2
 80070e6:	2301      	movs	r3, #1
 80070e8:	4607      	mov	r7, r0
 80070ea:	e7f0      	b.n	80070ce <_svfiprintf_r+0x182>
 80070ec:	ab03      	add	r3, sp, #12
 80070ee:	9300      	str	r3, [sp, #0]
 80070f0:	4622      	mov	r2, r4
 80070f2:	4b11      	ldr	r3, [pc, #68]	; (8007138 <_svfiprintf_r+0x1ec>)
 80070f4:	a904      	add	r1, sp, #16
 80070f6:	4640      	mov	r0, r8
 80070f8:	f3af 8000 	nop.w
 80070fc:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007100:	4681      	mov	r9, r0
 8007102:	d1d6      	bne.n	80070b2 <_svfiprintf_r+0x166>
 8007104:	89a3      	ldrh	r3, [r4, #12]
 8007106:	065b      	lsls	r3, r3, #25
 8007108:	f53f af35 	bmi.w	8006f76 <_svfiprintf_r+0x2a>
 800710c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800710e:	b01d      	add	sp, #116	; 0x74
 8007110:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007114:	ab03      	add	r3, sp, #12
 8007116:	9300      	str	r3, [sp, #0]
 8007118:	4622      	mov	r2, r4
 800711a:	4b07      	ldr	r3, [pc, #28]	; (8007138 <_svfiprintf_r+0x1ec>)
 800711c:	a904      	add	r1, sp, #16
 800711e:	4640      	mov	r0, r8
 8007120:	f000 fa2c 	bl	800757c <_printf_i>
 8007124:	e7ea      	b.n	80070fc <_svfiprintf_r+0x1b0>
 8007126:	bf00      	nop
 8007128:	080080b8 	.word	0x080080b8
 800712c:	080080be 	.word	0x080080be
 8007130:	080080c2 	.word	0x080080c2
 8007134:	00000000 	.word	0x00000000
 8007138:	08006e99 	.word	0x08006e99

0800713c <_sungetc_r>:
 800713c:	b538      	push	{r3, r4, r5, lr}
 800713e:	1c4b      	adds	r3, r1, #1
 8007140:	4614      	mov	r4, r2
 8007142:	d103      	bne.n	800714c <_sungetc_r+0x10>
 8007144:	f04f 35ff 	mov.w	r5, #4294967295
 8007148:	4628      	mov	r0, r5
 800714a:	bd38      	pop	{r3, r4, r5, pc}
 800714c:	8993      	ldrh	r3, [r2, #12]
 800714e:	b2cd      	uxtb	r5, r1
 8007150:	f023 0320 	bic.w	r3, r3, #32
 8007154:	8193      	strh	r3, [r2, #12]
 8007156:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007158:	6852      	ldr	r2, [r2, #4]
 800715a:	b18b      	cbz	r3, 8007180 <_sungetc_r+0x44>
 800715c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800715e:	4293      	cmp	r3, r2
 8007160:	dd08      	ble.n	8007174 <_sungetc_r+0x38>
 8007162:	6823      	ldr	r3, [r4, #0]
 8007164:	1e5a      	subs	r2, r3, #1
 8007166:	6022      	str	r2, [r4, #0]
 8007168:	f803 5c01 	strb.w	r5, [r3, #-1]
 800716c:	6863      	ldr	r3, [r4, #4]
 800716e:	3301      	adds	r3, #1
 8007170:	6063      	str	r3, [r4, #4]
 8007172:	e7e9      	b.n	8007148 <_sungetc_r+0xc>
 8007174:	4621      	mov	r1, r4
 8007176:	f000 fdb5 	bl	8007ce4 <__submore>
 800717a:	2800      	cmp	r0, #0
 800717c:	d0f1      	beq.n	8007162 <_sungetc_r+0x26>
 800717e:	e7e1      	b.n	8007144 <_sungetc_r+0x8>
 8007180:	6921      	ldr	r1, [r4, #16]
 8007182:	6823      	ldr	r3, [r4, #0]
 8007184:	b151      	cbz	r1, 800719c <_sungetc_r+0x60>
 8007186:	4299      	cmp	r1, r3
 8007188:	d208      	bcs.n	800719c <_sungetc_r+0x60>
 800718a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800718e:	42a9      	cmp	r1, r5
 8007190:	d104      	bne.n	800719c <_sungetc_r+0x60>
 8007192:	3b01      	subs	r3, #1
 8007194:	3201      	adds	r2, #1
 8007196:	6023      	str	r3, [r4, #0]
 8007198:	6062      	str	r2, [r4, #4]
 800719a:	e7d5      	b.n	8007148 <_sungetc_r+0xc>
 800719c:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80071a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80071a4:	6363      	str	r3, [r4, #52]	; 0x34
 80071a6:	2303      	movs	r3, #3
 80071a8:	63a3      	str	r3, [r4, #56]	; 0x38
 80071aa:	4623      	mov	r3, r4
 80071ac:	f803 5f46 	strb.w	r5, [r3, #70]!
 80071b0:	6023      	str	r3, [r4, #0]
 80071b2:	2301      	movs	r3, #1
 80071b4:	e7dc      	b.n	8007170 <_sungetc_r+0x34>

080071b6 <__ssrefill_r>:
 80071b6:	b510      	push	{r4, lr}
 80071b8:	460c      	mov	r4, r1
 80071ba:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80071bc:	b169      	cbz	r1, 80071da <__ssrefill_r+0x24>
 80071be:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80071c2:	4299      	cmp	r1, r3
 80071c4:	d001      	beq.n	80071ca <__ssrefill_r+0x14>
 80071c6:	f000 fe1b 	bl	8007e00 <_free_r>
 80071ca:	2000      	movs	r0, #0
 80071cc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80071ce:	6360      	str	r0, [r4, #52]	; 0x34
 80071d0:	6063      	str	r3, [r4, #4]
 80071d2:	b113      	cbz	r3, 80071da <__ssrefill_r+0x24>
 80071d4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80071d6:	6023      	str	r3, [r4, #0]
 80071d8:	bd10      	pop	{r4, pc}
 80071da:	6923      	ldr	r3, [r4, #16]
 80071dc:	f04f 30ff 	mov.w	r0, #4294967295
 80071e0:	6023      	str	r3, [r4, #0]
 80071e2:	2300      	movs	r3, #0
 80071e4:	6063      	str	r3, [r4, #4]
 80071e6:	89a3      	ldrh	r3, [r4, #12]
 80071e8:	f043 0320 	orr.w	r3, r3, #32
 80071ec:	81a3      	strh	r3, [r4, #12]
 80071ee:	e7f3      	b.n	80071d8 <__ssrefill_r+0x22>

080071f0 <__ssvfiscanf_r>:
 80071f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071f4:	460c      	mov	r4, r1
 80071f6:	2100      	movs	r1, #0
 80071f8:	4606      	mov	r6, r0
 80071fa:	4692      	mov	sl, r2
 80071fc:	270a      	movs	r7, #10
 80071fe:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8007202:	9144      	str	r1, [sp, #272]	; 0x110
 8007204:	9145      	str	r1, [sp, #276]	; 0x114
 8007206:	499e      	ldr	r1, [pc, #632]	; (8007480 <__ssvfiscanf_r+0x290>)
 8007208:	f10d 0804 	add.w	r8, sp, #4
 800720c:	91a0      	str	r1, [sp, #640]	; 0x280
 800720e:	499d      	ldr	r1, [pc, #628]	; (8007484 <__ssvfiscanf_r+0x294>)
 8007210:	f8df 9274 	ldr.w	r9, [pc, #628]	; 8007488 <__ssvfiscanf_r+0x298>
 8007214:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8007218:	91a1      	str	r1, [sp, #644]	; 0x284
 800721a:	9300      	str	r3, [sp, #0]
 800721c:	f89a 3000 	ldrb.w	r3, [sl]
 8007220:	2b00      	cmp	r3, #0
 8007222:	f000 812a 	beq.w	800747a <__ssvfiscanf_r+0x28a>
 8007226:	4655      	mov	r5, sl
 8007228:	f000 fd98 	bl	8007d5c <__locale_ctype_ptr>
 800722c:	f815 bb01 	ldrb.w	fp, [r5], #1
 8007230:	4458      	add	r0, fp
 8007232:	7843      	ldrb	r3, [r0, #1]
 8007234:	f013 0308 	ands.w	r3, r3, #8
 8007238:	d01c      	beq.n	8007274 <__ssvfiscanf_r+0x84>
 800723a:	6863      	ldr	r3, [r4, #4]
 800723c:	2b00      	cmp	r3, #0
 800723e:	dd12      	ble.n	8007266 <__ssvfiscanf_r+0x76>
 8007240:	f000 fd8c 	bl	8007d5c <__locale_ctype_ptr>
 8007244:	6823      	ldr	r3, [r4, #0]
 8007246:	781a      	ldrb	r2, [r3, #0]
 8007248:	4410      	add	r0, r2
 800724a:	7842      	ldrb	r2, [r0, #1]
 800724c:	0712      	lsls	r2, r2, #28
 800724e:	d401      	bmi.n	8007254 <__ssvfiscanf_r+0x64>
 8007250:	46aa      	mov	sl, r5
 8007252:	e7e3      	b.n	800721c <__ssvfiscanf_r+0x2c>
 8007254:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8007256:	3301      	adds	r3, #1
 8007258:	3201      	adds	r2, #1
 800725a:	9245      	str	r2, [sp, #276]	; 0x114
 800725c:	6862      	ldr	r2, [r4, #4]
 800725e:	6023      	str	r3, [r4, #0]
 8007260:	3a01      	subs	r2, #1
 8007262:	6062      	str	r2, [r4, #4]
 8007264:	e7e9      	b.n	800723a <__ssvfiscanf_r+0x4a>
 8007266:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8007268:	4621      	mov	r1, r4
 800726a:	4630      	mov	r0, r6
 800726c:	4798      	blx	r3
 800726e:	2800      	cmp	r0, #0
 8007270:	d0e6      	beq.n	8007240 <__ssvfiscanf_r+0x50>
 8007272:	e7ed      	b.n	8007250 <__ssvfiscanf_r+0x60>
 8007274:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 8007278:	f040 8082 	bne.w	8007380 <__ssvfiscanf_r+0x190>
 800727c:	9343      	str	r3, [sp, #268]	; 0x10c
 800727e:	9341      	str	r3, [sp, #260]	; 0x104
 8007280:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8007284:	2b2a      	cmp	r3, #42	; 0x2a
 8007286:	d103      	bne.n	8007290 <__ssvfiscanf_r+0xa0>
 8007288:	2310      	movs	r3, #16
 800728a:	f10a 0502 	add.w	r5, sl, #2
 800728e:	9341      	str	r3, [sp, #260]	; 0x104
 8007290:	46aa      	mov	sl, r5
 8007292:	f815 1b01 	ldrb.w	r1, [r5], #1
 8007296:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800729a:	2a09      	cmp	r2, #9
 800729c:	d922      	bls.n	80072e4 <__ssvfiscanf_r+0xf4>
 800729e:	2203      	movs	r2, #3
 80072a0:	4879      	ldr	r0, [pc, #484]	; (8007488 <__ssvfiscanf_r+0x298>)
 80072a2:	f000 fd7b 	bl	8007d9c <memchr>
 80072a6:	b138      	cbz	r0, 80072b8 <__ssvfiscanf_r+0xc8>
 80072a8:	eba0 0309 	sub.w	r3, r0, r9
 80072ac:	2001      	movs	r0, #1
 80072ae:	46aa      	mov	sl, r5
 80072b0:	4098      	lsls	r0, r3
 80072b2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80072b4:	4318      	orrs	r0, r3
 80072b6:	9041      	str	r0, [sp, #260]	; 0x104
 80072b8:	f89a 3000 	ldrb.w	r3, [sl]
 80072bc:	f10a 0501 	add.w	r5, sl, #1
 80072c0:	2b67      	cmp	r3, #103	; 0x67
 80072c2:	d82b      	bhi.n	800731c <__ssvfiscanf_r+0x12c>
 80072c4:	2b65      	cmp	r3, #101	; 0x65
 80072c6:	f080 809f 	bcs.w	8007408 <__ssvfiscanf_r+0x218>
 80072ca:	2b47      	cmp	r3, #71	; 0x47
 80072cc:	d810      	bhi.n	80072f0 <__ssvfiscanf_r+0x100>
 80072ce:	2b45      	cmp	r3, #69	; 0x45
 80072d0:	f080 809a 	bcs.w	8007408 <__ssvfiscanf_r+0x218>
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d06c      	beq.n	80073b2 <__ssvfiscanf_r+0x1c2>
 80072d8:	2b25      	cmp	r3, #37	; 0x25
 80072da:	d051      	beq.n	8007380 <__ssvfiscanf_r+0x190>
 80072dc:	2303      	movs	r3, #3
 80072de:	9742      	str	r7, [sp, #264]	; 0x108
 80072e0:	9347      	str	r3, [sp, #284]	; 0x11c
 80072e2:	e027      	b.n	8007334 <__ssvfiscanf_r+0x144>
 80072e4:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80072e6:	fb07 1303 	mla	r3, r7, r3, r1
 80072ea:	3b30      	subs	r3, #48	; 0x30
 80072ec:	9343      	str	r3, [sp, #268]	; 0x10c
 80072ee:	e7cf      	b.n	8007290 <__ssvfiscanf_r+0xa0>
 80072f0:	2b5b      	cmp	r3, #91	; 0x5b
 80072f2:	d06a      	beq.n	80073ca <__ssvfiscanf_r+0x1da>
 80072f4:	d80c      	bhi.n	8007310 <__ssvfiscanf_r+0x120>
 80072f6:	2b58      	cmp	r3, #88	; 0x58
 80072f8:	d1f0      	bne.n	80072dc <__ssvfiscanf_r+0xec>
 80072fa:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80072fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007300:	9241      	str	r2, [sp, #260]	; 0x104
 8007302:	2210      	movs	r2, #16
 8007304:	9242      	str	r2, [sp, #264]	; 0x108
 8007306:	2b6e      	cmp	r3, #110	; 0x6e
 8007308:	bf8c      	ite	hi
 800730a:	2304      	movhi	r3, #4
 800730c:	2303      	movls	r3, #3
 800730e:	e010      	b.n	8007332 <__ssvfiscanf_r+0x142>
 8007310:	2b63      	cmp	r3, #99	; 0x63
 8007312:	d065      	beq.n	80073e0 <__ssvfiscanf_r+0x1f0>
 8007314:	2b64      	cmp	r3, #100	; 0x64
 8007316:	d1e1      	bne.n	80072dc <__ssvfiscanf_r+0xec>
 8007318:	9742      	str	r7, [sp, #264]	; 0x108
 800731a:	e7f4      	b.n	8007306 <__ssvfiscanf_r+0x116>
 800731c:	2b70      	cmp	r3, #112	; 0x70
 800731e:	d04b      	beq.n	80073b8 <__ssvfiscanf_r+0x1c8>
 8007320:	d826      	bhi.n	8007370 <__ssvfiscanf_r+0x180>
 8007322:	2b6e      	cmp	r3, #110	; 0x6e
 8007324:	d062      	beq.n	80073ec <__ssvfiscanf_r+0x1fc>
 8007326:	d84c      	bhi.n	80073c2 <__ssvfiscanf_r+0x1d2>
 8007328:	2b69      	cmp	r3, #105	; 0x69
 800732a:	d1d7      	bne.n	80072dc <__ssvfiscanf_r+0xec>
 800732c:	2300      	movs	r3, #0
 800732e:	9342      	str	r3, [sp, #264]	; 0x108
 8007330:	2303      	movs	r3, #3
 8007332:	9347      	str	r3, [sp, #284]	; 0x11c
 8007334:	6863      	ldr	r3, [r4, #4]
 8007336:	2b00      	cmp	r3, #0
 8007338:	dd68      	ble.n	800740c <__ssvfiscanf_r+0x21c>
 800733a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800733c:	0659      	lsls	r1, r3, #25
 800733e:	d407      	bmi.n	8007350 <__ssvfiscanf_r+0x160>
 8007340:	f000 fd0c 	bl	8007d5c <__locale_ctype_ptr>
 8007344:	6823      	ldr	r3, [r4, #0]
 8007346:	781a      	ldrb	r2, [r3, #0]
 8007348:	4410      	add	r0, r2
 800734a:	7842      	ldrb	r2, [r0, #1]
 800734c:	0712      	lsls	r2, r2, #28
 800734e:	d464      	bmi.n	800741a <__ssvfiscanf_r+0x22a>
 8007350:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8007352:	2b02      	cmp	r3, #2
 8007354:	dc73      	bgt.n	800743e <__ssvfiscanf_r+0x24e>
 8007356:	466b      	mov	r3, sp
 8007358:	4622      	mov	r2, r4
 800735a:	a941      	add	r1, sp, #260	; 0x104
 800735c:	4630      	mov	r0, r6
 800735e:	f000 fa1f 	bl	80077a0 <_scanf_chars>
 8007362:	2801      	cmp	r0, #1
 8007364:	f000 8089 	beq.w	800747a <__ssvfiscanf_r+0x28a>
 8007368:	2802      	cmp	r0, #2
 800736a:	f47f af71 	bne.w	8007250 <__ssvfiscanf_r+0x60>
 800736e:	e01d      	b.n	80073ac <__ssvfiscanf_r+0x1bc>
 8007370:	2b75      	cmp	r3, #117	; 0x75
 8007372:	d0d1      	beq.n	8007318 <__ssvfiscanf_r+0x128>
 8007374:	2b78      	cmp	r3, #120	; 0x78
 8007376:	d0c0      	beq.n	80072fa <__ssvfiscanf_r+0x10a>
 8007378:	2b73      	cmp	r3, #115	; 0x73
 800737a:	d1af      	bne.n	80072dc <__ssvfiscanf_r+0xec>
 800737c:	2302      	movs	r3, #2
 800737e:	e7d8      	b.n	8007332 <__ssvfiscanf_r+0x142>
 8007380:	6863      	ldr	r3, [r4, #4]
 8007382:	2b00      	cmp	r3, #0
 8007384:	dd0c      	ble.n	80073a0 <__ssvfiscanf_r+0x1b0>
 8007386:	6823      	ldr	r3, [r4, #0]
 8007388:	781a      	ldrb	r2, [r3, #0]
 800738a:	455a      	cmp	r2, fp
 800738c:	d175      	bne.n	800747a <__ssvfiscanf_r+0x28a>
 800738e:	3301      	adds	r3, #1
 8007390:	6862      	ldr	r2, [r4, #4]
 8007392:	6023      	str	r3, [r4, #0]
 8007394:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8007396:	3a01      	subs	r2, #1
 8007398:	3301      	adds	r3, #1
 800739a:	6062      	str	r2, [r4, #4]
 800739c:	9345      	str	r3, [sp, #276]	; 0x114
 800739e:	e757      	b.n	8007250 <__ssvfiscanf_r+0x60>
 80073a0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80073a2:	4621      	mov	r1, r4
 80073a4:	4630      	mov	r0, r6
 80073a6:	4798      	blx	r3
 80073a8:	2800      	cmp	r0, #0
 80073aa:	d0ec      	beq.n	8007386 <__ssvfiscanf_r+0x196>
 80073ac:	9844      	ldr	r0, [sp, #272]	; 0x110
 80073ae:	2800      	cmp	r0, #0
 80073b0:	d159      	bne.n	8007466 <__ssvfiscanf_r+0x276>
 80073b2:	f04f 30ff 	mov.w	r0, #4294967295
 80073b6:	e05c      	b.n	8007472 <__ssvfiscanf_r+0x282>
 80073b8:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80073ba:	f042 0220 	orr.w	r2, r2, #32
 80073be:	9241      	str	r2, [sp, #260]	; 0x104
 80073c0:	e79b      	b.n	80072fa <__ssvfiscanf_r+0x10a>
 80073c2:	2308      	movs	r3, #8
 80073c4:	9342      	str	r3, [sp, #264]	; 0x108
 80073c6:	2304      	movs	r3, #4
 80073c8:	e7b3      	b.n	8007332 <__ssvfiscanf_r+0x142>
 80073ca:	4629      	mov	r1, r5
 80073cc:	4640      	mov	r0, r8
 80073ce:	f000 fb3f 	bl	8007a50 <__sccl>
 80073d2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80073d4:	4605      	mov	r5, r0
 80073d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80073da:	9341      	str	r3, [sp, #260]	; 0x104
 80073dc:	2301      	movs	r3, #1
 80073de:	e7a8      	b.n	8007332 <__ssvfiscanf_r+0x142>
 80073e0:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80073e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80073e6:	9341      	str	r3, [sp, #260]	; 0x104
 80073e8:	2300      	movs	r3, #0
 80073ea:	e7a2      	b.n	8007332 <__ssvfiscanf_r+0x142>
 80073ec:	9841      	ldr	r0, [sp, #260]	; 0x104
 80073ee:	06c3      	lsls	r3, r0, #27
 80073f0:	f53f af2e 	bmi.w	8007250 <__ssvfiscanf_r+0x60>
 80073f4:	9b00      	ldr	r3, [sp, #0]
 80073f6:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80073f8:	1d19      	adds	r1, r3, #4
 80073fa:	9100      	str	r1, [sp, #0]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	07c0      	lsls	r0, r0, #31
 8007400:	bf4c      	ite	mi
 8007402:	801a      	strhmi	r2, [r3, #0]
 8007404:	601a      	strpl	r2, [r3, #0]
 8007406:	e723      	b.n	8007250 <__ssvfiscanf_r+0x60>
 8007408:	2305      	movs	r3, #5
 800740a:	e792      	b.n	8007332 <__ssvfiscanf_r+0x142>
 800740c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800740e:	4621      	mov	r1, r4
 8007410:	4630      	mov	r0, r6
 8007412:	4798      	blx	r3
 8007414:	2800      	cmp	r0, #0
 8007416:	d090      	beq.n	800733a <__ssvfiscanf_r+0x14a>
 8007418:	e7c8      	b.n	80073ac <__ssvfiscanf_r+0x1bc>
 800741a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800741c:	3201      	adds	r2, #1
 800741e:	9245      	str	r2, [sp, #276]	; 0x114
 8007420:	6862      	ldr	r2, [r4, #4]
 8007422:	3a01      	subs	r2, #1
 8007424:	2a00      	cmp	r2, #0
 8007426:	6062      	str	r2, [r4, #4]
 8007428:	dd02      	ble.n	8007430 <__ssvfiscanf_r+0x240>
 800742a:	3301      	adds	r3, #1
 800742c:	6023      	str	r3, [r4, #0]
 800742e:	e787      	b.n	8007340 <__ssvfiscanf_r+0x150>
 8007430:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8007432:	4621      	mov	r1, r4
 8007434:	4630      	mov	r0, r6
 8007436:	4798      	blx	r3
 8007438:	2800      	cmp	r0, #0
 800743a:	d081      	beq.n	8007340 <__ssvfiscanf_r+0x150>
 800743c:	e7b6      	b.n	80073ac <__ssvfiscanf_r+0x1bc>
 800743e:	2b04      	cmp	r3, #4
 8007440:	dc06      	bgt.n	8007450 <__ssvfiscanf_r+0x260>
 8007442:	466b      	mov	r3, sp
 8007444:	4622      	mov	r2, r4
 8007446:	a941      	add	r1, sp, #260	; 0x104
 8007448:	4630      	mov	r0, r6
 800744a:	f000 fa0b 	bl	8007864 <_scanf_i>
 800744e:	e788      	b.n	8007362 <__ssvfiscanf_r+0x172>
 8007450:	4b0e      	ldr	r3, [pc, #56]	; (800748c <__ssvfiscanf_r+0x29c>)
 8007452:	2b00      	cmp	r3, #0
 8007454:	f43f aefc 	beq.w	8007250 <__ssvfiscanf_r+0x60>
 8007458:	466b      	mov	r3, sp
 800745a:	4622      	mov	r2, r4
 800745c:	a941      	add	r1, sp, #260	; 0x104
 800745e:	4630      	mov	r0, r6
 8007460:	f3af 8000 	nop.w
 8007464:	e77d      	b.n	8007362 <__ssvfiscanf_r+0x172>
 8007466:	89a3      	ldrh	r3, [r4, #12]
 8007468:	f013 0f40 	tst.w	r3, #64	; 0x40
 800746c:	bf18      	it	ne
 800746e:	f04f 30ff 	movne.w	r0, #4294967295
 8007472:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8007476:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800747a:	9844      	ldr	r0, [sp, #272]	; 0x110
 800747c:	e7f9      	b.n	8007472 <__ssvfiscanf_r+0x282>
 800747e:	bf00      	nop
 8007480:	0800713d 	.word	0x0800713d
 8007484:	080071b7 	.word	0x080071b7
 8007488:	080080be 	.word	0x080080be
 800748c:	00000000 	.word	0x00000000

08007490 <_printf_common>:
 8007490:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007494:	4691      	mov	r9, r2
 8007496:	461f      	mov	r7, r3
 8007498:	688a      	ldr	r2, [r1, #8]
 800749a:	690b      	ldr	r3, [r1, #16]
 800749c:	4606      	mov	r6, r0
 800749e:	4293      	cmp	r3, r2
 80074a0:	bfb8      	it	lt
 80074a2:	4613      	movlt	r3, r2
 80074a4:	f8c9 3000 	str.w	r3, [r9]
 80074a8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80074ac:	460c      	mov	r4, r1
 80074ae:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80074b2:	b112      	cbz	r2, 80074ba <_printf_common+0x2a>
 80074b4:	3301      	adds	r3, #1
 80074b6:	f8c9 3000 	str.w	r3, [r9]
 80074ba:	6823      	ldr	r3, [r4, #0]
 80074bc:	0699      	lsls	r1, r3, #26
 80074be:	bf42      	ittt	mi
 80074c0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80074c4:	3302      	addmi	r3, #2
 80074c6:	f8c9 3000 	strmi.w	r3, [r9]
 80074ca:	6825      	ldr	r5, [r4, #0]
 80074cc:	f015 0506 	ands.w	r5, r5, #6
 80074d0:	d107      	bne.n	80074e2 <_printf_common+0x52>
 80074d2:	f104 0a19 	add.w	sl, r4, #25
 80074d6:	68e3      	ldr	r3, [r4, #12]
 80074d8:	f8d9 2000 	ldr.w	r2, [r9]
 80074dc:	1a9b      	subs	r3, r3, r2
 80074de:	42ab      	cmp	r3, r5
 80074e0:	dc29      	bgt.n	8007536 <_printf_common+0xa6>
 80074e2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80074e6:	6822      	ldr	r2, [r4, #0]
 80074e8:	3300      	adds	r3, #0
 80074ea:	bf18      	it	ne
 80074ec:	2301      	movne	r3, #1
 80074ee:	0692      	lsls	r2, r2, #26
 80074f0:	d42e      	bmi.n	8007550 <_printf_common+0xc0>
 80074f2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80074f6:	4639      	mov	r1, r7
 80074f8:	4630      	mov	r0, r6
 80074fa:	47c0      	blx	r8
 80074fc:	3001      	adds	r0, #1
 80074fe:	d021      	beq.n	8007544 <_printf_common+0xb4>
 8007500:	6823      	ldr	r3, [r4, #0]
 8007502:	68e5      	ldr	r5, [r4, #12]
 8007504:	f003 0306 	and.w	r3, r3, #6
 8007508:	2b04      	cmp	r3, #4
 800750a:	bf18      	it	ne
 800750c:	2500      	movne	r5, #0
 800750e:	f8d9 2000 	ldr.w	r2, [r9]
 8007512:	f04f 0900 	mov.w	r9, #0
 8007516:	bf08      	it	eq
 8007518:	1aad      	subeq	r5, r5, r2
 800751a:	68a3      	ldr	r3, [r4, #8]
 800751c:	6922      	ldr	r2, [r4, #16]
 800751e:	bf08      	it	eq
 8007520:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007524:	4293      	cmp	r3, r2
 8007526:	bfc4      	itt	gt
 8007528:	1a9b      	subgt	r3, r3, r2
 800752a:	18ed      	addgt	r5, r5, r3
 800752c:	341a      	adds	r4, #26
 800752e:	454d      	cmp	r5, r9
 8007530:	d11a      	bne.n	8007568 <_printf_common+0xd8>
 8007532:	2000      	movs	r0, #0
 8007534:	e008      	b.n	8007548 <_printf_common+0xb8>
 8007536:	2301      	movs	r3, #1
 8007538:	4652      	mov	r2, sl
 800753a:	4639      	mov	r1, r7
 800753c:	4630      	mov	r0, r6
 800753e:	47c0      	blx	r8
 8007540:	3001      	adds	r0, #1
 8007542:	d103      	bne.n	800754c <_printf_common+0xbc>
 8007544:	f04f 30ff 	mov.w	r0, #4294967295
 8007548:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800754c:	3501      	adds	r5, #1
 800754e:	e7c2      	b.n	80074d6 <_printf_common+0x46>
 8007550:	2030      	movs	r0, #48	; 0x30
 8007552:	18e1      	adds	r1, r4, r3
 8007554:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007558:	1c5a      	adds	r2, r3, #1
 800755a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800755e:	4422      	add	r2, r4
 8007560:	3302      	adds	r3, #2
 8007562:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007566:	e7c4      	b.n	80074f2 <_printf_common+0x62>
 8007568:	2301      	movs	r3, #1
 800756a:	4622      	mov	r2, r4
 800756c:	4639      	mov	r1, r7
 800756e:	4630      	mov	r0, r6
 8007570:	47c0      	blx	r8
 8007572:	3001      	adds	r0, #1
 8007574:	d0e6      	beq.n	8007544 <_printf_common+0xb4>
 8007576:	f109 0901 	add.w	r9, r9, #1
 800757a:	e7d8      	b.n	800752e <_printf_common+0x9e>

0800757c <_printf_i>:
 800757c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007580:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8007584:	460c      	mov	r4, r1
 8007586:	7e09      	ldrb	r1, [r1, #24]
 8007588:	b085      	sub	sp, #20
 800758a:	296e      	cmp	r1, #110	; 0x6e
 800758c:	4617      	mov	r7, r2
 800758e:	4606      	mov	r6, r0
 8007590:	4698      	mov	r8, r3
 8007592:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007594:	f000 80b3 	beq.w	80076fe <_printf_i+0x182>
 8007598:	d822      	bhi.n	80075e0 <_printf_i+0x64>
 800759a:	2963      	cmp	r1, #99	; 0x63
 800759c:	d036      	beq.n	800760c <_printf_i+0x90>
 800759e:	d80a      	bhi.n	80075b6 <_printf_i+0x3a>
 80075a0:	2900      	cmp	r1, #0
 80075a2:	f000 80b9 	beq.w	8007718 <_printf_i+0x19c>
 80075a6:	2958      	cmp	r1, #88	; 0x58
 80075a8:	f000 8083 	beq.w	80076b2 <_printf_i+0x136>
 80075ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80075b0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80075b4:	e032      	b.n	800761c <_printf_i+0xa0>
 80075b6:	2964      	cmp	r1, #100	; 0x64
 80075b8:	d001      	beq.n	80075be <_printf_i+0x42>
 80075ba:	2969      	cmp	r1, #105	; 0x69
 80075bc:	d1f6      	bne.n	80075ac <_printf_i+0x30>
 80075be:	6820      	ldr	r0, [r4, #0]
 80075c0:	6813      	ldr	r3, [r2, #0]
 80075c2:	0605      	lsls	r5, r0, #24
 80075c4:	f103 0104 	add.w	r1, r3, #4
 80075c8:	d52a      	bpl.n	8007620 <_printf_i+0xa4>
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	6011      	str	r1, [r2, #0]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	da03      	bge.n	80075da <_printf_i+0x5e>
 80075d2:	222d      	movs	r2, #45	; 0x2d
 80075d4:	425b      	negs	r3, r3
 80075d6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80075da:	486f      	ldr	r0, [pc, #444]	; (8007798 <_printf_i+0x21c>)
 80075dc:	220a      	movs	r2, #10
 80075de:	e039      	b.n	8007654 <_printf_i+0xd8>
 80075e0:	2973      	cmp	r1, #115	; 0x73
 80075e2:	f000 809d 	beq.w	8007720 <_printf_i+0x1a4>
 80075e6:	d808      	bhi.n	80075fa <_printf_i+0x7e>
 80075e8:	296f      	cmp	r1, #111	; 0x6f
 80075ea:	d020      	beq.n	800762e <_printf_i+0xb2>
 80075ec:	2970      	cmp	r1, #112	; 0x70
 80075ee:	d1dd      	bne.n	80075ac <_printf_i+0x30>
 80075f0:	6823      	ldr	r3, [r4, #0]
 80075f2:	f043 0320 	orr.w	r3, r3, #32
 80075f6:	6023      	str	r3, [r4, #0]
 80075f8:	e003      	b.n	8007602 <_printf_i+0x86>
 80075fa:	2975      	cmp	r1, #117	; 0x75
 80075fc:	d017      	beq.n	800762e <_printf_i+0xb2>
 80075fe:	2978      	cmp	r1, #120	; 0x78
 8007600:	d1d4      	bne.n	80075ac <_printf_i+0x30>
 8007602:	2378      	movs	r3, #120	; 0x78
 8007604:	4865      	ldr	r0, [pc, #404]	; (800779c <_printf_i+0x220>)
 8007606:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800760a:	e055      	b.n	80076b8 <_printf_i+0x13c>
 800760c:	6813      	ldr	r3, [r2, #0]
 800760e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007612:	1d19      	adds	r1, r3, #4
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	6011      	str	r1, [r2, #0]
 8007618:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800761c:	2301      	movs	r3, #1
 800761e:	e08c      	b.n	800773a <_printf_i+0x1be>
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007626:	6011      	str	r1, [r2, #0]
 8007628:	bf18      	it	ne
 800762a:	b21b      	sxthne	r3, r3
 800762c:	e7cf      	b.n	80075ce <_printf_i+0x52>
 800762e:	6813      	ldr	r3, [r2, #0]
 8007630:	6825      	ldr	r5, [r4, #0]
 8007632:	1d18      	adds	r0, r3, #4
 8007634:	6010      	str	r0, [r2, #0]
 8007636:	0628      	lsls	r0, r5, #24
 8007638:	d501      	bpl.n	800763e <_printf_i+0xc2>
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	e002      	b.n	8007644 <_printf_i+0xc8>
 800763e:	0668      	lsls	r0, r5, #25
 8007640:	d5fb      	bpl.n	800763a <_printf_i+0xbe>
 8007642:	881b      	ldrh	r3, [r3, #0]
 8007644:	296f      	cmp	r1, #111	; 0x6f
 8007646:	bf14      	ite	ne
 8007648:	220a      	movne	r2, #10
 800764a:	2208      	moveq	r2, #8
 800764c:	4852      	ldr	r0, [pc, #328]	; (8007798 <_printf_i+0x21c>)
 800764e:	2100      	movs	r1, #0
 8007650:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007654:	6865      	ldr	r5, [r4, #4]
 8007656:	2d00      	cmp	r5, #0
 8007658:	60a5      	str	r5, [r4, #8]
 800765a:	f2c0 8095 	blt.w	8007788 <_printf_i+0x20c>
 800765e:	6821      	ldr	r1, [r4, #0]
 8007660:	f021 0104 	bic.w	r1, r1, #4
 8007664:	6021      	str	r1, [r4, #0]
 8007666:	2b00      	cmp	r3, #0
 8007668:	d13d      	bne.n	80076e6 <_printf_i+0x16a>
 800766a:	2d00      	cmp	r5, #0
 800766c:	f040 808e 	bne.w	800778c <_printf_i+0x210>
 8007670:	4665      	mov	r5, ip
 8007672:	2a08      	cmp	r2, #8
 8007674:	d10b      	bne.n	800768e <_printf_i+0x112>
 8007676:	6823      	ldr	r3, [r4, #0]
 8007678:	07db      	lsls	r3, r3, #31
 800767a:	d508      	bpl.n	800768e <_printf_i+0x112>
 800767c:	6923      	ldr	r3, [r4, #16]
 800767e:	6862      	ldr	r2, [r4, #4]
 8007680:	429a      	cmp	r2, r3
 8007682:	bfde      	ittt	le
 8007684:	2330      	movle	r3, #48	; 0x30
 8007686:	f805 3c01 	strble.w	r3, [r5, #-1]
 800768a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800768e:	ebac 0305 	sub.w	r3, ip, r5
 8007692:	6123      	str	r3, [r4, #16]
 8007694:	f8cd 8000 	str.w	r8, [sp]
 8007698:	463b      	mov	r3, r7
 800769a:	aa03      	add	r2, sp, #12
 800769c:	4621      	mov	r1, r4
 800769e:	4630      	mov	r0, r6
 80076a0:	f7ff fef6 	bl	8007490 <_printf_common>
 80076a4:	3001      	adds	r0, #1
 80076a6:	d14d      	bne.n	8007744 <_printf_i+0x1c8>
 80076a8:	f04f 30ff 	mov.w	r0, #4294967295
 80076ac:	b005      	add	sp, #20
 80076ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80076b2:	4839      	ldr	r0, [pc, #228]	; (8007798 <_printf_i+0x21c>)
 80076b4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80076b8:	6813      	ldr	r3, [r2, #0]
 80076ba:	6821      	ldr	r1, [r4, #0]
 80076bc:	1d1d      	adds	r5, r3, #4
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	6015      	str	r5, [r2, #0]
 80076c2:	060a      	lsls	r2, r1, #24
 80076c4:	d50b      	bpl.n	80076de <_printf_i+0x162>
 80076c6:	07ca      	lsls	r2, r1, #31
 80076c8:	bf44      	itt	mi
 80076ca:	f041 0120 	orrmi.w	r1, r1, #32
 80076ce:	6021      	strmi	r1, [r4, #0]
 80076d0:	b91b      	cbnz	r3, 80076da <_printf_i+0x15e>
 80076d2:	6822      	ldr	r2, [r4, #0]
 80076d4:	f022 0220 	bic.w	r2, r2, #32
 80076d8:	6022      	str	r2, [r4, #0]
 80076da:	2210      	movs	r2, #16
 80076dc:	e7b7      	b.n	800764e <_printf_i+0xd2>
 80076de:	064d      	lsls	r5, r1, #25
 80076e0:	bf48      	it	mi
 80076e2:	b29b      	uxthmi	r3, r3
 80076e4:	e7ef      	b.n	80076c6 <_printf_i+0x14a>
 80076e6:	4665      	mov	r5, ip
 80076e8:	fbb3 f1f2 	udiv	r1, r3, r2
 80076ec:	fb02 3311 	mls	r3, r2, r1, r3
 80076f0:	5cc3      	ldrb	r3, [r0, r3]
 80076f2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80076f6:	460b      	mov	r3, r1
 80076f8:	2900      	cmp	r1, #0
 80076fa:	d1f5      	bne.n	80076e8 <_printf_i+0x16c>
 80076fc:	e7b9      	b.n	8007672 <_printf_i+0xf6>
 80076fe:	6813      	ldr	r3, [r2, #0]
 8007700:	6825      	ldr	r5, [r4, #0]
 8007702:	1d18      	adds	r0, r3, #4
 8007704:	6961      	ldr	r1, [r4, #20]
 8007706:	6010      	str	r0, [r2, #0]
 8007708:	0628      	lsls	r0, r5, #24
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	d501      	bpl.n	8007712 <_printf_i+0x196>
 800770e:	6019      	str	r1, [r3, #0]
 8007710:	e002      	b.n	8007718 <_printf_i+0x19c>
 8007712:	066a      	lsls	r2, r5, #25
 8007714:	d5fb      	bpl.n	800770e <_printf_i+0x192>
 8007716:	8019      	strh	r1, [r3, #0]
 8007718:	2300      	movs	r3, #0
 800771a:	4665      	mov	r5, ip
 800771c:	6123      	str	r3, [r4, #16]
 800771e:	e7b9      	b.n	8007694 <_printf_i+0x118>
 8007720:	6813      	ldr	r3, [r2, #0]
 8007722:	1d19      	adds	r1, r3, #4
 8007724:	6011      	str	r1, [r2, #0]
 8007726:	681d      	ldr	r5, [r3, #0]
 8007728:	6862      	ldr	r2, [r4, #4]
 800772a:	2100      	movs	r1, #0
 800772c:	4628      	mov	r0, r5
 800772e:	f000 fb35 	bl	8007d9c <memchr>
 8007732:	b108      	cbz	r0, 8007738 <_printf_i+0x1bc>
 8007734:	1b40      	subs	r0, r0, r5
 8007736:	6060      	str	r0, [r4, #4]
 8007738:	6863      	ldr	r3, [r4, #4]
 800773a:	6123      	str	r3, [r4, #16]
 800773c:	2300      	movs	r3, #0
 800773e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007742:	e7a7      	b.n	8007694 <_printf_i+0x118>
 8007744:	6923      	ldr	r3, [r4, #16]
 8007746:	462a      	mov	r2, r5
 8007748:	4639      	mov	r1, r7
 800774a:	4630      	mov	r0, r6
 800774c:	47c0      	blx	r8
 800774e:	3001      	adds	r0, #1
 8007750:	d0aa      	beq.n	80076a8 <_printf_i+0x12c>
 8007752:	6823      	ldr	r3, [r4, #0]
 8007754:	079b      	lsls	r3, r3, #30
 8007756:	d413      	bmi.n	8007780 <_printf_i+0x204>
 8007758:	68e0      	ldr	r0, [r4, #12]
 800775a:	9b03      	ldr	r3, [sp, #12]
 800775c:	4298      	cmp	r0, r3
 800775e:	bfb8      	it	lt
 8007760:	4618      	movlt	r0, r3
 8007762:	e7a3      	b.n	80076ac <_printf_i+0x130>
 8007764:	2301      	movs	r3, #1
 8007766:	464a      	mov	r2, r9
 8007768:	4639      	mov	r1, r7
 800776a:	4630      	mov	r0, r6
 800776c:	47c0      	blx	r8
 800776e:	3001      	adds	r0, #1
 8007770:	d09a      	beq.n	80076a8 <_printf_i+0x12c>
 8007772:	3501      	adds	r5, #1
 8007774:	68e3      	ldr	r3, [r4, #12]
 8007776:	9a03      	ldr	r2, [sp, #12]
 8007778:	1a9b      	subs	r3, r3, r2
 800777a:	42ab      	cmp	r3, r5
 800777c:	dcf2      	bgt.n	8007764 <_printf_i+0x1e8>
 800777e:	e7eb      	b.n	8007758 <_printf_i+0x1dc>
 8007780:	2500      	movs	r5, #0
 8007782:	f104 0919 	add.w	r9, r4, #25
 8007786:	e7f5      	b.n	8007774 <_printf_i+0x1f8>
 8007788:	2b00      	cmp	r3, #0
 800778a:	d1ac      	bne.n	80076e6 <_printf_i+0x16a>
 800778c:	7803      	ldrb	r3, [r0, #0]
 800778e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007792:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007796:	e76c      	b.n	8007672 <_printf_i+0xf6>
 8007798:	080080c9 	.word	0x080080c9
 800779c:	080080da 	.word	0x080080da

080077a0 <_scanf_chars>:
 80077a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80077a4:	4615      	mov	r5, r2
 80077a6:	688a      	ldr	r2, [r1, #8]
 80077a8:	4680      	mov	r8, r0
 80077aa:	460c      	mov	r4, r1
 80077ac:	b932      	cbnz	r2, 80077bc <_scanf_chars+0x1c>
 80077ae:	698a      	ldr	r2, [r1, #24]
 80077b0:	2a00      	cmp	r2, #0
 80077b2:	bf14      	ite	ne
 80077b4:	f04f 32ff 	movne.w	r2, #4294967295
 80077b8:	2201      	moveq	r2, #1
 80077ba:	608a      	str	r2, [r1, #8]
 80077bc:	2600      	movs	r6, #0
 80077be:	6822      	ldr	r2, [r4, #0]
 80077c0:	06d1      	lsls	r1, r2, #27
 80077c2:	bf5f      	itttt	pl
 80077c4:	681a      	ldrpl	r2, [r3, #0]
 80077c6:	1d11      	addpl	r1, r2, #4
 80077c8:	6019      	strpl	r1, [r3, #0]
 80077ca:	6817      	ldrpl	r7, [r2, #0]
 80077cc:	69a3      	ldr	r3, [r4, #24]
 80077ce:	b1db      	cbz	r3, 8007808 <_scanf_chars+0x68>
 80077d0:	2b01      	cmp	r3, #1
 80077d2:	d107      	bne.n	80077e4 <_scanf_chars+0x44>
 80077d4:	682b      	ldr	r3, [r5, #0]
 80077d6:	6962      	ldr	r2, [r4, #20]
 80077d8:	781b      	ldrb	r3, [r3, #0]
 80077da:	5cd3      	ldrb	r3, [r2, r3]
 80077dc:	b9a3      	cbnz	r3, 8007808 <_scanf_chars+0x68>
 80077de:	2e00      	cmp	r6, #0
 80077e0:	d131      	bne.n	8007846 <_scanf_chars+0xa6>
 80077e2:	e006      	b.n	80077f2 <_scanf_chars+0x52>
 80077e4:	2b02      	cmp	r3, #2
 80077e6:	d007      	beq.n	80077f8 <_scanf_chars+0x58>
 80077e8:	2e00      	cmp	r6, #0
 80077ea:	d12c      	bne.n	8007846 <_scanf_chars+0xa6>
 80077ec:	69a3      	ldr	r3, [r4, #24]
 80077ee:	2b01      	cmp	r3, #1
 80077f0:	d129      	bne.n	8007846 <_scanf_chars+0xa6>
 80077f2:	2001      	movs	r0, #1
 80077f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80077f8:	f000 fab0 	bl	8007d5c <__locale_ctype_ptr>
 80077fc:	682b      	ldr	r3, [r5, #0]
 80077fe:	781b      	ldrb	r3, [r3, #0]
 8007800:	4418      	add	r0, r3
 8007802:	7843      	ldrb	r3, [r0, #1]
 8007804:	071b      	lsls	r3, r3, #28
 8007806:	d4ef      	bmi.n	80077e8 <_scanf_chars+0x48>
 8007808:	6823      	ldr	r3, [r4, #0]
 800780a:	3601      	adds	r6, #1
 800780c:	06da      	lsls	r2, r3, #27
 800780e:	bf5e      	ittt	pl
 8007810:	682b      	ldrpl	r3, [r5, #0]
 8007812:	781b      	ldrbpl	r3, [r3, #0]
 8007814:	703b      	strbpl	r3, [r7, #0]
 8007816:	682a      	ldr	r2, [r5, #0]
 8007818:	686b      	ldr	r3, [r5, #4]
 800781a:	f102 0201 	add.w	r2, r2, #1
 800781e:	602a      	str	r2, [r5, #0]
 8007820:	68a2      	ldr	r2, [r4, #8]
 8007822:	f103 33ff 	add.w	r3, r3, #4294967295
 8007826:	f102 32ff 	add.w	r2, r2, #4294967295
 800782a:	606b      	str	r3, [r5, #4]
 800782c:	bf58      	it	pl
 800782e:	3701      	addpl	r7, #1
 8007830:	60a2      	str	r2, [r4, #8]
 8007832:	b142      	cbz	r2, 8007846 <_scanf_chars+0xa6>
 8007834:	2b00      	cmp	r3, #0
 8007836:	dcc9      	bgt.n	80077cc <_scanf_chars+0x2c>
 8007838:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800783c:	4629      	mov	r1, r5
 800783e:	4640      	mov	r0, r8
 8007840:	4798      	blx	r3
 8007842:	2800      	cmp	r0, #0
 8007844:	d0c2      	beq.n	80077cc <_scanf_chars+0x2c>
 8007846:	6823      	ldr	r3, [r4, #0]
 8007848:	f013 0310 	ands.w	r3, r3, #16
 800784c:	d105      	bne.n	800785a <_scanf_chars+0xba>
 800784e:	68e2      	ldr	r2, [r4, #12]
 8007850:	3201      	adds	r2, #1
 8007852:	60e2      	str	r2, [r4, #12]
 8007854:	69a2      	ldr	r2, [r4, #24]
 8007856:	b102      	cbz	r2, 800785a <_scanf_chars+0xba>
 8007858:	703b      	strb	r3, [r7, #0]
 800785a:	6923      	ldr	r3, [r4, #16]
 800785c:	2000      	movs	r0, #0
 800785e:	441e      	add	r6, r3
 8007860:	6126      	str	r6, [r4, #16]
 8007862:	e7c7      	b.n	80077f4 <_scanf_chars+0x54>

08007864 <_scanf_i>:
 8007864:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007868:	460c      	mov	r4, r1
 800786a:	469a      	mov	sl, r3
 800786c:	4b74      	ldr	r3, [pc, #464]	; (8007a40 <_scanf_i+0x1dc>)
 800786e:	b087      	sub	sp, #28
 8007870:	4683      	mov	fp, r0
 8007872:	4616      	mov	r6, r2
 8007874:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007878:	ab03      	add	r3, sp, #12
 800787a:	68a7      	ldr	r7, [r4, #8]
 800787c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8007880:	4b70      	ldr	r3, [pc, #448]	; (8007a44 <_scanf_i+0x1e0>)
 8007882:	69a1      	ldr	r1, [r4, #24]
 8007884:	4a70      	ldr	r2, [pc, #448]	; (8007a48 <_scanf_i+0x1e4>)
 8007886:	f104 091c 	add.w	r9, r4, #28
 800788a:	2903      	cmp	r1, #3
 800788c:	bf08      	it	eq
 800788e:	461a      	moveq	r2, r3
 8007890:	1e7b      	subs	r3, r7, #1
 8007892:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 8007896:	bf84      	itt	hi
 8007898:	f240 135d 	movwhi	r3, #349	; 0x15d
 800789c:	60a3      	strhi	r3, [r4, #8]
 800789e:	6823      	ldr	r3, [r4, #0]
 80078a0:	bf88      	it	hi
 80078a2:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80078a6:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80078aa:	6023      	str	r3, [r4, #0]
 80078ac:	bf98      	it	ls
 80078ae:	2700      	movls	r7, #0
 80078b0:	464b      	mov	r3, r9
 80078b2:	f04f 0800 	mov.w	r8, #0
 80078b6:	9200      	str	r2, [sp, #0]
 80078b8:	bf88      	it	hi
 80078ba:	197f      	addhi	r7, r7, r5
 80078bc:	6831      	ldr	r1, [r6, #0]
 80078be:	9301      	str	r3, [sp, #4]
 80078c0:	ab03      	add	r3, sp, #12
 80078c2:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80078c6:	2202      	movs	r2, #2
 80078c8:	7809      	ldrb	r1, [r1, #0]
 80078ca:	f000 fa67 	bl	8007d9c <memchr>
 80078ce:	9b01      	ldr	r3, [sp, #4]
 80078d0:	b330      	cbz	r0, 8007920 <_scanf_i+0xbc>
 80078d2:	f1b8 0f01 	cmp.w	r8, #1
 80078d6:	d15a      	bne.n	800798e <_scanf_i+0x12a>
 80078d8:	6862      	ldr	r2, [r4, #4]
 80078da:	b92a      	cbnz	r2, 80078e8 <_scanf_i+0x84>
 80078dc:	2108      	movs	r1, #8
 80078de:	6822      	ldr	r2, [r4, #0]
 80078e0:	6061      	str	r1, [r4, #4]
 80078e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80078e6:	6022      	str	r2, [r4, #0]
 80078e8:	6822      	ldr	r2, [r4, #0]
 80078ea:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80078ee:	6022      	str	r2, [r4, #0]
 80078f0:	68a2      	ldr	r2, [r4, #8]
 80078f2:	1e51      	subs	r1, r2, #1
 80078f4:	60a1      	str	r1, [r4, #8]
 80078f6:	b19a      	cbz	r2, 8007920 <_scanf_i+0xbc>
 80078f8:	6832      	ldr	r2, [r6, #0]
 80078fa:	1c5d      	adds	r5, r3, #1
 80078fc:	1c51      	adds	r1, r2, #1
 80078fe:	6031      	str	r1, [r6, #0]
 8007900:	7812      	ldrb	r2, [r2, #0]
 8007902:	701a      	strb	r2, [r3, #0]
 8007904:	6873      	ldr	r3, [r6, #4]
 8007906:	3b01      	subs	r3, #1
 8007908:	2b00      	cmp	r3, #0
 800790a:	6073      	str	r3, [r6, #4]
 800790c:	dc07      	bgt.n	800791e <_scanf_i+0xba>
 800790e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007912:	4631      	mov	r1, r6
 8007914:	4658      	mov	r0, fp
 8007916:	4798      	blx	r3
 8007918:	2800      	cmp	r0, #0
 800791a:	f040 8087 	bne.w	8007a2c <_scanf_i+0x1c8>
 800791e:	462b      	mov	r3, r5
 8007920:	f108 0801 	add.w	r8, r8, #1
 8007924:	f1b8 0f03 	cmp.w	r8, #3
 8007928:	d1c8      	bne.n	80078bc <_scanf_i+0x58>
 800792a:	6862      	ldr	r2, [r4, #4]
 800792c:	b90a      	cbnz	r2, 8007932 <_scanf_i+0xce>
 800792e:	220a      	movs	r2, #10
 8007930:	6062      	str	r2, [r4, #4]
 8007932:	6862      	ldr	r2, [r4, #4]
 8007934:	4945      	ldr	r1, [pc, #276]	; (8007a4c <_scanf_i+0x1e8>)
 8007936:	6960      	ldr	r0, [r4, #20]
 8007938:	1a89      	subs	r1, r1, r2
 800793a:	9301      	str	r3, [sp, #4]
 800793c:	f000 f888 	bl	8007a50 <__sccl>
 8007940:	9b01      	ldr	r3, [sp, #4]
 8007942:	f04f 0800 	mov.w	r8, #0
 8007946:	461d      	mov	r5, r3
 8007948:	68a3      	ldr	r3, [r4, #8]
 800794a:	6822      	ldr	r2, [r4, #0]
 800794c:	2b00      	cmp	r3, #0
 800794e:	d03b      	beq.n	80079c8 <_scanf_i+0x164>
 8007950:	6831      	ldr	r1, [r6, #0]
 8007952:	6960      	ldr	r0, [r4, #20]
 8007954:	f891 c000 	ldrb.w	ip, [r1]
 8007958:	f810 000c 	ldrb.w	r0, [r0, ip]
 800795c:	2800      	cmp	r0, #0
 800795e:	d033      	beq.n	80079c8 <_scanf_i+0x164>
 8007960:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8007964:	d121      	bne.n	80079aa <_scanf_i+0x146>
 8007966:	0510      	lsls	r0, r2, #20
 8007968:	d51f      	bpl.n	80079aa <_scanf_i+0x146>
 800796a:	f108 0801 	add.w	r8, r8, #1
 800796e:	b117      	cbz	r7, 8007976 <_scanf_i+0x112>
 8007970:	3301      	adds	r3, #1
 8007972:	3f01      	subs	r7, #1
 8007974:	60a3      	str	r3, [r4, #8]
 8007976:	6873      	ldr	r3, [r6, #4]
 8007978:	3b01      	subs	r3, #1
 800797a:	2b00      	cmp	r3, #0
 800797c:	6073      	str	r3, [r6, #4]
 800797e:	dd1c      	ble.n	80079ba <_scanf_i+0x156>
 8007980:	6833      	ldr	r3, [r6, #0]
 8007982:	3301      	adds	r3, #1
 8007984:	6033      	str	r3, [r6, #0]
 8007986:	68a3      	ldr	r3, [r4, #8]
 8007988:	3b01      	subs	r3, #1
 800798a:	60a3      	str	r3, [r4, #8]
 800798c:	e7dc      	b.n	8007948 <_scanf_i+0xe4>
 800798e:	f1b8 0f02 	cmp.w	r8, #2
 8007992:	d1ad      	bne.n	80078f0 <_scanf_i+0x8c>
 8007994:	6822      	ldr	r2, [r4, #0]
 8007996:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800799a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800799e:	d1bf      	bne.n	8007920 <_scanf_i+0xbc>
 80079a0:	2110      	movs	r1, #16
 80079a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80079a6:	6061      	str	r1, [r4, #4]
 80079a8:	e7a1      	b.n	80078ee <_scanf_i+0x8a>
 80079aa:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80079ae:	6022      	str	r2, [r4, #0]
 80079b0:	780b      	ldrb	r3, [r1, #0]
 80079b2:	3501      	adds	r5, #1
 80079b4:	f805 3c01 	strb.w	r3, [r5, #-1]
 80079b8:	e7dd      	b.n	8007976 <_scanf_i+0x112>
 80079ba:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80079be:	4631      	mov	r1, r6
 80079c0:	4658      	mov	r0, fp
 80079c2:	4798      	blx	r3
 80079c4:	2800      	cmp	r0, #0
 80079c6:	d0de      	beq.n	8007986 <_scanf_i+0x122>
 80079c8:	6823      	ldr	r3, [r4, #0]
 80079ca:	05d9      	lsls	r1, r3, #23
 80079cc:	d50c      	bpl.n	80079e8 <_scanf_i+0x184>
 80079ce:	454d      	cmp	r5, r9
 80079d0:	d908      	bls.n	80079e4 <_scanf_i+0x180>
 80079d2:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80079d6:	1e6f      	subs	r7, r5, #1
 80079d8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80079dc:	4632      	mov	r2, r6
 80079de:	4658      	mov	r0, fp
 80079e0:	4798      	blx	r3
 80079e2:	463d      	mov	r5, r7
 80079e4:	454d      	cmp	r5, r9
 80079e6:	d029      	beq.n	8007a3c <_scanf_i+0x1d8>
 80079e8:	6822      	ldr	r2, [r4, #0]
 80079ea:	f012 0210 	ands.w	r2, r2, #16
 80079ee:	d113      	bne.n	8007a18 <_scanf_i+0x1b4>
 80079f0:	702a      	strb	r2, [r5, #0]
 80079f2:	6863      	ldr	r3, [r4, #4]
 80079f4:	4649      	mov	r1, r9
 80079f6:	4658      	mov	r0, fp
 80079f8:	9e00      	ldr	r6, [sp, #0]
 80079fa:	47b0      	blx	r6
 80079fc:	f8da 3000 	ldr.w	r3, [sl]
 8007a00:	6821      	ldr	r1, [r4, #0]
 8007a02:	1d1a      	adds	r2, r3, #4
 8007a04:	f8ca 2000 	str.w	r2, [sl]
 8007a08:	f011 0f20 	tst.w	r1, #32
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	d010      	beq.n	8007a32 <_scanf_i+0x1ce>
 8007a10:	6018      	str	r0, [r3, #0]
 8007a12:	68e3      	ldr	r3, [r4, #12]
 8007a14:	3301      	adds	r3, #1
 8007a16:	60e3      	str	r3, [r4, #12]
 8007a18:	2000      	movs	r0, #0
 8007a1a:	eba5 0509 	sub.w	r5, r5, r9
 8007a1e:	44a8      	add	r8, r5
 8007a20:	6925      	ldr	r5, [r4, #16]
 8007a22:	4445      	add	r5, r8
 8007a24:	6125      	str	r5, [r4, #16]
 8007a26:	b007      	add	sp, #28
 8007a28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a2c:	f04f 0800 	mov.w	r8, #0
 8007a30:	e7ca      	b.n	80079c8 <_scanf_i+0x164>
 8007a32:	07ca      	lsls	r2, r1, #31
 8007a34:	bf4c      	ite	mi
 8007a36:	8018      	strhmi	r0, [r3, #0]
 8007a38:	6018      	strpl	r0, [r3, #0]
 8007a3a:	e7ea      	b.n	8007a12 <_scanf_i+0x1ae>
 8007a3c:	2001      	movs	r0, #1
 8007a3e:	e7f2      	b.n	8007a26 <_scanf_i+0x1c2>
 8007a40:	08008094 	.word	0x08008094
 8007a44:	08007ba9 	.word	0x08007ba9
 8007a48:	08007cc1 	.word	0x08007cc1
 8007a4c:	080080fb 	.word	0x080080fb

08007a50 <__sccl>:
 8007a50:	b570      	push	{r4, r5, r6, lr}
 8007a52:	780b      	ldrb	r3, [r1, #0]
 8007a54:	1e44      	subs	r4, r0, #1
 8007a56:	2b5e      	cmp	r3, #94	; 0x5e
 8007a58:	bf13      	iteet	ne
 8007a5a:	1c4a      	addne	r2, r1, #1
 8007a5c:	1c8a      	addeq	r2, r1, #2
 8007a5e:	784b      	ldrbeq	r3, [r1, #1]
 8007a60:	2100      	movne	r1, #0
 8007a62:	bf08      	it	eq
 8007a64:	2101      	moveq	r1, #1
 8007a66:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 8007a6a:	f804 1f01 	strb.w	r1, [r4, #1]!
 8007a6e:	42ac      	cmp	r4, r5
 8007a70:	d1fb      	bne.n	8007a6a <__sccl+0x1a>
 8007a72:	b913      	cbnz	r3, 8007a7a <__sccl+0x2a>
 8007a74:	3a01      	subs	r2, #1
 8007a76:	4610      	mov	r0, r2
 8007a78:	bd70      	pop	{r4, r5, r6, pc}
 8007a7a:	f081 0401 	eor.w	r4, r1, #1
 8007a7e:	54c4      	strb	r4, [r0, r3]
 8007a80:	1c51      	adds	r1, r2, #1
 8007a82:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 8007a86:	1e4e      	subs	r6, r1, #1
 8007a88:	2d2d      	cmp	r5, #45	; 0x2d
 8007a8a:	460a      	mov	r2, r1
 8007a8c:	d006      	beq.n	8007a9c <__sccl+0x4c>
 8007a8e:	2d5d      	cmp	r5, #93	; 0x5d
 8007a90:	d0f1      	beq.n	8007a76 <__sccl+0x26>
 8007a92:	b90d      	cbnz	r5, 8007a98 <__sccl+0x48>
 8007a94:	4632      	mov	r2, r6
 8007a96:	e7ee      	b.n	8007a76 <__sccl+0x26>
 8007a98:	462b      	mov	r3, r5
 8007a9a:	e7f0      	b.n	8007a7e <__sccl+0x2e>
 8007a9c:	780e      	ldrb	r6, [r1, #0]
 8007a9e:	2e5d      	cmp	r6, #93	; 0x5d
 8007aa0:	d0fa      	beq.n	8007a98 <__sccl+0x48>
 8007aa2:	42b3      	cmp	r3, r6
 8007aa4:	dcf8      	bgt.n	8007a98 <__sccl+0x48>
 8007aa6:	3301      	adds	r3, #1
 8007aa8:	429e      	cmp	r6, r3
 8007aaa:	54c4      	strb	r4, [r0, r3]
 8007aac:	dcfb      	bgt.n	8007aa6 <__sccl+0x56>
 8007aae:	3102      	adds	r1, #2
 8007ab0:	e7e7      	b.n	8007a82 <__sccl+0x32>

08007ab2 <_strtol_l.isra.0>:
 8007ab2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ab6:	4680      	mov	r8, r0
 8007ab8:	4689      	mov	r9, r1
 8007aba:	4692      	mov	sl, r2
 8007abc:	461e      	mov	r6, r3
 8007abe:	460f      	mov	r7, r1
 8007ac0:	463d      	mov	r5, r7
 8007ac2:	9808      	ldr	r0, [sp, #32]
 8007ac4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007ac8:	f000 f944 	bl	8007d54 <__locale_ctype_ptr_l>
 8007acc:	4420      	add	r0, r4
 8007ace:	7843      	ldrb	r3, [r0, #1]
 8007ad0:	f013 0308 	ands.w	r3, r3, #8
 8007ad4:	d132      	bne.n	8007b3c <_strtol_l.isra.0+0x8a>
 8007ad6:	2c2d      	cmp	r4, #45	; 0x2d
 8007ad8:	d132      	bne.n	8007b40 <_strtol_l.isra.0+0x8e>
 8007ada:	2201      	movs	r2, #1
 8007adc:	787c      	ldrb	r4, [r7, #1]
 8007ade:	1cbd      	adds	r5, r7, #2
 8007ae0:	2e00      	cmp	r6, #0
 8007ae2:	d05d      	beq.n	8007ba0 <_strtol_l.isra.0+0xee>
 8007ae4:	2e10      	cmp	r6, #16
 8007ae6:	d109      	bne.n	8007afc <_strtol_l.isra.0+0x4a>
 8007ae8:	2c30      	cmp	r4, #48	; 0x30
 8007aea:	d107      	bne.n	8007afc <_strtol_l.isra.0+0x4a>
 8007aec:	782b      	ldrb	r3, [r5, #0]
 8007aee:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007af2:	2b58      	cmp	r3, #88	; 0x58
 8007af4:	d14f      	bne.n	8007b96 <_strtol_l.isra.0+0xe4>
 8007af6:	2610      	movs	r6, #16
 8007af8:	786c      	ldrb	r4, [r5, #1]
 8007afa:	3502      	adds	r5, #2
 8007afc:	2a00      	cmp	r2, #0
 8007afe:	bf14      	ite	ne
 8007b00:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8007b04:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8007b08:	2700      	movs	r7, #0
 8007b0a:	fbb1 fcf6 	udiv	ip, r1, r6
 8007b0e:	4638      	mov	r0, r7
 8007b10:	fb06 1e1c 	mls	lr, r6, ip, r1
 8007b14:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8007b18:	2b09      	cmp	r3, #9
 8007b1a:	d817      	bhi.n	8007b4c <_strtol_l.isra.0+0x9a>
 8007b1c:	461c      	mov	r4, r3
 8007b1e:	42a6      	cmp	r6, r4
 8007b20:	dd23      	ble.n	8007b6a <_strtol_l.isra.0+0xb8>
 8007b22:	1c7b      	adds	r3, r7, #1
 8007b24:	d007      	beq.n	8007b36 <_strtol_l.isra.0+0x84>
 8007b26:	4584      	cmp	ip, r0
 8007b28:	d31c      	bcc.n	8007b64 <_strtol_l.isra.0+0xb2>
 8007b2a:	d101      	bne.n	8007b30 <_strtol_l.isra.0+0x7e>
 8007b2c:	45a6      	cmp	lr, r4
 8007b2e:	db19      	blt.n	8007b64 <_strtol_l.isra.0+0xb2>
 8007b30:	2701      	movs	r7, #1
 8007b32:	fb00 4006 	mla	r0, r0, r6, r4
 8007b36:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007b3a:	e7eb      	b.n	8007b14 <_strtol_l.isra.0+0x62>
 8007b3c:	462f      	mov	r7, r5
 8007b3e:	e7bf      	b.n	8007ac0 <_strtol_l.isra.0+0xe>
 8007b40:	2c2b      	cmp	r4, #43	; 0x2b
 8007b42:	bf04      	itt	eq
 8007b44:	1cbd      	addeq	r5, r7, #2
 8007b46:	787c      	ldrbeq	r4, [r7, #1]
 8007b48:	461a      	mov	r2, r3
 8007b4a:	e7c9      	b.n	8007ae0 <_strtol_l.isra.0+0x2e>
 8007b4c:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8007b50:	2b19      	cmp	r3, #25
 8007b52:	d801      	bhi.n	8007b58 <_strtol_l.isra.0+0xa6>
 8007b54:	3c37      	subs	r4, #55	; 0x37
 8007b56:	e7e2      	b.n	8007b1e <_strtol_l.isra.0+0x6c>
 8007b58:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8007b5c:	2b19      	cmp	r3, #25
 8007b5e:	d804      	bhi.n	8007b6a <_strtol_l.isra.0+0xb8>
 8007b60:	3c57      	subs	r4, #87	; 0x57
 8007b62:	e7dc      	b.n	8007b1e <_strtol_l.isra.0+0x6c>
 8007b64:	f04f 37ff 	mov.w	r7, #4294967295
 8007b68:	e7e5      	b.n	8007b36 <_strtol_l.isra.0+0x84>
 8007b6a:	1c7b      	adds	r3, r7, #1
 8007b6c:	d108      	bne.n	8007b80 <_strtol_l.isra.0+0xce>
 8007b6e:	2322      	movs	r3, #34	; 0x22
 8007b70:	4608      	mov	r0, r1
 8007b72:	f8c8 3000 	str.w	r3, [r8]
 8007b76:	f1ba 0f00 	cmp.w	sl, #0
 8007b7a:	d107      	bne.n	8007b8c <_strtol_l.isra.0+0xda>
 8007b7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b80:	b102      	cbz	r2, 8007b84 <_strtol_l.isra.0+0xd2>
 8007b82:	4240      	negs	r0, r0
 8007b84:	f1ba 0f00 	cmp.w	sl, #0
 8007b88:	d0f8      	beq.n	8007b7c <_strtol_l.isra.0+0xca>
 8007b8a:	b10f      	cbz	r7, 8007b90 <_strtol_l.isra.0+0xde>
 8007b8c:	f105 39ff 	add.w	r9, r5, #4294967295
 8007b90:	f8ca 9000 	str.w	r9, [sl]
 8007b94:	e7f2      	b.n	8007b7c <_strtol_l.isra.0+0xca>
 8007b96:	2430      	movs	r4, #48	; 0x30
 8007b98:	2e00      	cmp	r6, #0
 8007b9a:	d1af      	bne.n	8007afc <_strtol_l.isra.0+0x4a>
 8007b9c:	2608      	movs	r6, #8
 8007b9e:	e7ad      	b.n	8007afc <_strtol_l.isra.0+0x4a>
 8007ba0:	2c30      	cmp	r4, #48	; 0x30
 8007ba2:	d0a3      	beq.n	8007aec <_strtol_l.isra.0+0x3a>
 8007ba4:	260a      	movs	r6, #10
 8007ba6:	e7a9      	b.n	8007afc <_strtol_l.isra.0+0x4a>

08007ba8 <_strtol_r>:
 8007ba8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007baa:	4c06      	ldr	r4, [pc, #24]	; (8007bc4 <_strtol_r+0x1c>)
 8007bac:	4d06      	ldr	r5, [pc, #24]	; (8007bc8 <_strtol_r+0x20>)
 8007bae:	6824      	ldr	r4, [r4, #0]
 8007bb0:	6a24      	ldr	r4, [r4, #32]
 8007bb2:	2c00      	cmp	r4, #0
 8007bb4:	bf08      	it	eq
 8007bb6:	462c      	moveq	r4, r5
 8007bb8:	9400      	str	r4, [sp, #0]
 8007bba:	f7ff ff7a 	bl	8007ab2 <_strtol_l.isra.0>
 8007bbe:	b003      	add	sp, #12
 8007bc0:	bd30      	pop	{r4, r5, pc}
 8007bc2:	bf00      	nop
 8007bc4:	2000017c 	.word	0x2000017c
 8007bc8:	200001e0 	.word	0x200001e0

08007bcc <_strtoul_l.isra.0>:
 8007bcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007bd0:	4680      	mov	r8, r0
 8007bd2:	4689      	mov	r9, r1
 8007bd4:	4692      	mov	sl, r2
 8007bd6:	461e      	mov	r6, r3
 8007bd8:	460f      	mov	r7, r1
 8007bda:	463d      	mov	r5, r7
 8007bdc:	9808      	ldr	r0, [sp, #32]
 8007bde:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007be2:	f000 f8b7 	bl	8007d54 <__locale_ctype_ptr_l>
 8007be6:	4420      	add	r0, r4
 8007be8:	7843      	ldrb	r3, [r0, #1]
 8007bea:	f013 0308 	ands.w	r3, r3, #8
 8007bee:	d130      	bne.n	8007c52 <_strtoul_l.isra.0+0x86>
 8007bf0:	2c2d      	cmp	r4, #45	; 0x2d
 8007bf2:	d130      	bne.n	8007c56 <_strtoul_l.isra.0+0x8a>
 8007bf4:	2101      	movs	r1, #1
 8007bf6:	787c      	ldrb	r4, [r7, #1]
 8007bf8:	1cbd      	adds	r5, r7, #2
 8007bfa:	2e00      	cmp	r6, #0
 8007bfc:	d05c      	beq.n	8007cb8 <_strtoul_l.isra.0+0xec>
 8007bfe:	2e10      	cmp	r6, #16
 8007c00:	d109      	bne.n	8007c16 <_strtoul_l.isra.0+0x4a>
 8007c02:	2c30      	cmp	r4, #48	; 0x30
 8007c04:	d107      	bne.n	8007c16 <_strtoul_l.isra.0+0x4a>
 8007c06:	782b      	ldrb	r3, [r5, #0]
 8007c08:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007c0c:	2b58      	cmp	r3, #88	; 0x58
 8007c0e:	d14e      	bne.n	8007cae <_strtoul_l.isra.0+0xe2>
 8007c10:	2610      	movs	r6, #16
 8007c12:	786c      	ldrb	r4, [r5, #1]
 8007c14:	3502      	adds	r5, #2
 8007c16:	f04f 32ff 	mov.w	r2, #4294967295
 8007c1a:	fbb2 f2f6 	udiv	r2, r2, r6
 8007c1e:	2300      	movs	r3, #0
 8007c20:	fb06 fc02 	mul.w	ip, r6, r2
 8007c24:	4618      	mov	r0, r3
 8007c26:	ea6f 0c0c 	mvn.w	ip, ip
 8007c2a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8007c2e:	2f09      	cmp	r7, #9
 8007c30:	d817      	bhi.n	8007c62 <_strtoul_l.isra.0+0x96>
 8007c32:	463c      	mov	r4, r7
 8007c34:	42a6      	cmp	r6, r4
 8007c36:	dd23      	ble.n	8007c80 <_strtoul_l.isra.0+0xb4>
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	db1e      	blt.n	8007c7a <_strtoul_l.isra.0+0xae>
 8007c3c:	4282      	cmp	r2, r0
 8007c3e:	d31c      	bcc.n	8007c7a <_strtoul_l.isra.0+0xae>
 8007c40:	d101      	bne.n	8007c46 <_strtoul_l.isra.0+0x7a>
 8007c42:	45a4      	cmp	ip, r4
 8007c44:	db19      	blt.n	8007c7a <_strtoul_l.isra.0+0xae>
 8007c46:	2301      	movs	r3, #1
 8007c48:	fb00 4006 	mla	r0, r0, r6, r4
 8007c4c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007c50:	e7eb      	b.n	8007c2a <_strtoul_l.isra.0+0x5e>
 8007c52:	462f      	mov	r7, r5
 8007c54:	e7c1      	b.n	8007bda <_strtoul_l.isra.0+0xe>
 8007c56:	2c2b      	cmp	r4, #43	; 0x2b
 8007c58:	bf04      	itt	eq
 8007c5a:	1cbd      	addeq	r5, r7, #2
 8007c5c:	787c      	ldrbeq	r4, [r7, #1]
 8007c5e:	4619      	mov	r1, r3
 8007c60:	e7cb      	b.n	8007bfa <_strtoul_l.isra.0+0x2e>
 8007c62:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8007c66:	2f19      	cmp	r7, #25
 8007c68:	d801      	bhi.n	8007c6e <_strtoul_l.isra.0+0xa2>
 8007c6a:	3c37      	subs	r4, #55	; 0x37
 8007c6c:	e7e2      	b.n	8007c34 <_strtoul_l.isra.0+0x68>
 8007c6e:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8007c72:	2f19      	cmp	r7, #25
 8007c74:	d804      	bhi.n	8007c80 <_strtoul_l.isra.0+0xb4>
 8007c76:	3c57      	subs	r4, #87	; 0x57
 8007c78:	e7dc      	b.n	8007c34 <_strtoul_l.isra.0+0x68>
 8007c7a:	f04f 33ff 	mov.w	r3, #4294967295
 8007c7e:	e7e5      	b.n	8007c4c <_strtoul_l.isra.0+0x80>
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	da09      	bge.n	8007c98 <_strtoul_l.isra.0+0xcc>
 8007c84:	2322      	movs	r3, #34	; 0x22
 8007c86:	f04f 30ff 	mov.w	r0, #4294967295
 8007c8a:	f8c8 3000 	str.w	r3, [r8]
 8007c8e:	f1ba 0f00 	cmp.w	sl, #0
 8007c92:	d107      	bne.n	8007ca4 <_strtoul_l.isra.0+0xd8>
 8007c94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c98:	b101      	cbz	r1, 8007c9c <_strtoul_l.isra.0+0xd0>
 8007c9a:	4240      	negs	r0, r0
 8007c9c:	f1ba 0f00 	cmp.w	sl, #0
 8007ca0:	d0f8      	beq.n	8007c94 <_strtoul_l.isra.0+0xc8>
 8007ca2:	b10b      	cbz	r3, 8007ca8 <_strtoul_l.isra.0+0xdc>
 8007ca4:	f105 39ff 	add.w	r9, r5, #4294967295
 8007ca8:	f8ca 9000 	str.w	r9, [sl]
 8007cac:	e7f2      	b.n	8007c94 <_strtoul_l.isra.0+0xc8>
 8007cae:	2430      	movs	r4, #48	; 0x30
 8007cb0:	2e00      	cmp	r6, #0
 8007cb2:	d1b0      	bne.n	8007c16 <_strtoul_l.isra.0+0x4a>
 8007cb4:	2608      	movs	r6, #8
 8007cb6:	e7ae      	b.n	8007c16 <_strtoul_l.isra.0+0x4a>
 8007cb8:	2c30      	cmp	r4, #48	; 0x30
 8007cba:	d0a4      	beq.n	8007c06 <_strtoul_l.isra.0+0x3a>
 8007cbc:	260a      	movs	r6, #10
 8007cbe:	e7aa      	b.n	8007c16 <_strtoul_l.isra.0+0x4a>

08007cc0 <_strtoul_r>:
 8007cc0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007cc2:	4c06      	ldr	r4, [pc, #24]	; (8007cdc <_strtoul_r+0x1c>)
 8007cc4:	4d06      	ldr	r5, [pc, #24]	; (8007ce0 <_strtoul_r+0x20>)
 8007cc6:	6824      	ldr	r4, [r4, #0]
 8007cc8:	6a24      	ldr	r4, [r4, #32]
 8007cca:	2c00      	cmp	r4, #0
 8007ccc:	bf08      	it	eq
 8007cce:	462c      	moveq	r4, r5
 8007cd0:	9400      	str	r4, [sp, #0]
 8007cd2:	f7ff ff7b 	bl	8007bcc <_strtoul_l.isra.0>
 8007cd6:	b003      	add	sp, #12
 8007cd8:	bd30      	pop	{r4, r5, pc}
 8007cda:	bf00      	nop
 8007cdc:	2000017c 	.word	0x2000017c
 8007ce0:	200001e0 	.word	0x200001e0

08007ce4 <__submore>:
 8007ce4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ce8:	460c      	mov	r4, r1
 8007cea:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8007cec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007cf0:	4299      	cmp	r1, r3
 8007cf2:	d11b      	bne.n	8007d2c <__submore+0x48>
 8007cf4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007cf8:	f000 f8ce 	bl	8007e98 <_malloc_r>
 8007cfc:	b918      	cbnz	r0, 8007d06 <__submore+0x22>
 8007cfe:	f04f 30ff 	mov.w	r0, #4294967295
 8007d02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007d0a:	63a3      	str	r3, [r4, #56]	; 0x38
 8007d0c:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8007d10:	6360      	str	r0, [r4, #52]	; 0x34
 8007d12:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8007d16:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8007d1a:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8007d1e:	7043      	strb	r3, [r0, #1]
 8007d20:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8007d24:	7003      	strb	r3, [r0, #0]
 8007d26:	6020      	str	r0, [r4, #0]
 8007d28:	2000      	movs	r0, #0
 8007d2a:	e7ea      	b.n	8007d02 <__submore+0x1e>
 8007d2c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8007d2e:	0077      	lsls	r7, r6, #1
 8007d30:	463a      	mov	r2, r7
 8007d32:	f000 f90b 	bl	8007f4c <_realloc_r>
 8007d36:	4605      	mov	r5, r0
 8007d38:	2800      	cmp	r0, #0
 8007d3a:	d0e0      	beq.n	8007cfe <__submore+0x1a>
 8007d3c:	eb00 0806 	add.w	r8, r0, r6
 8007d40:	4601      	mov	r1, r0
 8007d42:	4632      	mov	r2, r6
 8007d44:	4640      	mov	r0, r8
 8007d46:	f000 f837 	bl	8007db8 <memcpy>
 8007d4a:	f8c4 8000 	str.w	r8, [r4]
 8007d4e:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8007d52:	e7e9      	b.n	8007d28 <__submore+0x44>

08007d54 <__locale_ctype_ptr_l>:
 8007d54:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8007d58:	4770      	bx	lr
	...

08007d5c <__locale_ctype_ptr>:
 8007d5c:	4b04      	ldr	r3, [pc, #16]	; (8007d70 <__locale_ctype_ptr+0x14>)
 8007d5e:	4a05      	ldr	r2, [pc, #20]	; (8007d74 <__locale_ctype_ptr+0x18>)
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	6a1b      	ldr	r3, [r3, #32]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	bf08      	it	eq
 8007d68:	4613      	moveq	r3, r2
 8007d6a:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8007d6e:	4770      	bx	lr
 8007d70:	2000017c 	.word	0x2000017c
 8007d74:	200001e0 	.word	0x200001e0

08007d78 <__ascii_mbtowc>:
 8007d78:	b082      	sub	sp, #8
 8007d7a:	b901      	cbnz	r1, 8007d7e <__ascii_mbtowc+0x6>
 8007d7c:	a901      	add	r1, sp, #4
 8007d7e:	b142      	cbz	r2, 8007d92 <__ascii_mbtowc+0x1a>
 8007d80:	b14b      	cbz	r3, 8007d96 <__ascii_mbtowc+0x1e>
 8007d82:	7813      	ldrb	r3, [r2, #0]
 8007d84:	600b      	str	r3, [r1, #0]
 8007d86:	7812      	ldrb	r2, [r2, #0]
 8007d88:	1c10      	adds	r0, r2, #0
 8007d8a:	bf18      	it	ne
 8007d8c:	2001      	movne	r0, #1
 8007d8e:	b002      	add	sp, #8
 8007d90:	4770      	bx	lr
 8007d92:	4610      	mov	r0, r2
 8007d94:	e7fb      	b.n	8007d8e <__ascii_mbtowc+0x16>
 8007d96:	f06f 0001 	mvn.w	r0, #1
 8007d9a:	e7f8      	b.n	8007d8e <__ascii_mbtowc+0x16>

08007d9c <memchr>:
 8007d9c:	b510      	push	{r4, lr}
 8007d9e:	b2c9      	uxtb	r1, r1
 8007da0:	4402      	add	r2, r0
 8007da2:	4290      	cmp	r0, r2
 8007da4:	4603      	mov	r3, r0
 8007da6:	d101      	bne.n	8007dac <memchr+0x10>
 8007da8:	2300      	movs	r3, #0
 8007daa:	e003      	b.n	8007db4 <memchr+0x18>
 8007dac:	781c      	ldrb	r4, [r3, #0]
 8007dae:	3001      	adds	r0, #1
 8007db0:	428c      	cmp	r4, r1
 8007db2:	d1f6      	bne.n	8007da2 <memchr+0x6>
 8007db4:	4618      	mov	r0, r3
 8007db6:	bd10      	pop	{r4, pc}

08007db8 <memcpy>:
 8007db8:	b510      	push	{r4, lr}
 8007dba:	1e43      	subs	r3, r0, #1
 8007dbc:	440a      	add	r2, r1
 8007dbe:	4291      	cmp	r1, r2
 8007dc0:	d100      	bne.n	8007dc4 <memcpy+0xc>
 8007dc2:	bd10      	pop	{r4, pc}
 8007dc4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007dc8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007dcc:	e7f7      	b.n	8007dbe <memcpy+0x6>

08007dce <memmove>:
 8007dce:	4288      	cmp	r0, r1
 8007dd0:	b510      	push	{r4, lr}
 8007dd2:	eb01 0302 	add.w	r3, r1, r2
 8007dd6:	d807      	bhi.n	8007de8 <memmove+0x1a>
 8007dd8:	1e42      	subs	r2, r0, #1
 8007dda:	4299      	cmp	r1, r3
 8007ddc:	d00a      	beq.n	8007df4 <memmove+0x26>
 8007dde:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007de2:	f802 4f01 	strb.w	r4, [r2, #1]!
 8007de6:	e7f8      	b.n	8007dda <memmove+0xc>
 8007de8:	4283      	cmp	r3, r0
 8007dea:	d9f5      	bls.n	8007dd8 <memmove+0xa>
 8007dec:	1881      	adds	r1, r0, r2
 8007dee:	1ad2      	subs	r2, r2, r3
 8007df0:	42d3      	cmn	r3, r2
 8007df2:	d100      	bne.n	8007df6 <memmove+0x28>
 8007df4:	bd10      	pop	{r4, pc}
 8007df6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007dfa:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8007dfe:	e7f7      	b.n	8007df0 <memmove+0x22>

08007e00 <_free_r>:
 8007e00:	b538      	push	{r3, r4, r5, lr}
 8007e02:	4605      	mov	r5, r0
 8007e04:	2900      	cmp	r1, #0
 8007e06:	d043      	beq.n	8007e90 <_free_r+0x90>
 8007e08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007e0c:	1f0c      	subs	r4, r1, #4
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	bfb8      	it	lt
 8007e12:	18e4      	addlt	r4, r4, r3
 8007e14:	f000 f8dd 	bl	8007fd2 <__malloc_lock>
 8007e18:	4a1e      	ldr	r2, [pc, #120]	; (8007e94 <_free_r+0x94>)
 8007e1a:	6813      	ldr	r3, [r2, #0]
 8007e1c:	4610      	mov	r0, r2
 8007e1e:	b933      	cbnz	r3, 8007e2e <_free_r+0x2e>
 8007e20:	6063      	str	r3, [r4, #4]
 8007e22:	6014      	str	r4, [r2, #0]
 8007e24:	4628      	mov	r0, r5
 8007e26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007e2a:	f000 b8d3 	b.w	8007fd4 <__malloc_unlock>
 8007e2e:	42a3      	cmp	r3, r4
 8007e30:	d90b      	bls.n	8007e4a <_free_r+0x4a>
 8007e32:	6821      	ldr	r1, [r4, #0]
 8007e34:	1862      	adds	r2, r4, r1
 8007e36:	4293      	cmp	r3, r2
 8007e38:	bf01      	itttt	eq
 8007e3a:	681a      	ldreq	r2, [r3, #0]
 8007e3c:	685b      	ldreq	r3, [r3, #4]
 8007e3e:	1852      	addeq	r2, r2, r1
 8007e40:	6022      	streq	r2, [r4, #0]
 8007e42:	6063      	str	r3, [r4, #4]
 8007e44:	6004      	str	r4, [r0, #0]
 8007e46:	e7ed      	b.n	8007e24 <_free_r+0x24>
 8007e48:	4613      	mov	r3, r2
 8007e4a:	685a      	ldr	r2, [r3, #4]
 8007e4c:	b10a      	cbz	r2, 8007e52 <_free_r+0x52>
 8007e4e:	42a2      	cmp	r2, r4
 8007e50:	d9fa      	bls.n	8007e48 <_free_r+0x48>
 8007e52:	6819      	ldr	r1, [r3, #0]
 8007e54:	1858      	adds	r0, r3, r1
 8007e56:	42a0      	cmp	r0, r4
 8007e58:	d10b      	bne.n	8007e72 <_free_r+0x72>
 8007e5a:	6820      	ldr	r0, [r4, #0]
 8007e5c:	4401      	add	r1, r0
 8007e5e:	1858      	adds	r0, r3, r1
 8007e60:	4282      	cmp	r2, r0
 8007e62:	6019      	str	r1, [r3, #0]
 8007e64:	d1de      	bne.n	8007e24 <_free_r+0x24>
 8007e66:	6810      	ldr	r0, [r2, #0]
 8007e68:	6852      	ldr	r2, [r2, #4]
 8007e6a:	4401      	add	r1, r0
 8007e6c:	6019      	str	r1, [r3, #0]
 8007e6e:	605a      	str	r2, [r3, #4]
 8007e70:	e7d8      	b.n	8007e24 <_free_r+0x24>
 8007e72:	d902      	bls.n	8007e7a <_free_r+0x7a>
 8007e74:	230c      	movs	r3, #12
 8007e76:	602b      	str	r3, [r5, #0]
 8007e78:	e7d4      	b.n	8007e24 <_free_r+0x24>
 8007e7a:	6820      	ldr	r0, [r4, #0]
 8007e7c:	1821      	adds	r1, r4, r0
 8007e7e:	428a      	cmp	r2, r1
 8007e80:	bf01      	itttt	eq
 8007e82:	6811      	ldreq	r1, [r2, #0]
 8007e84:	6852      	ldreq	r2, [r2, #4]
 8007e86:	1809      	addeq	r1, r1, r0
 8007e88:	6021      	streq	r1, [r4, #0]
 8007e8a:	6062      	str	r2, [r4, #4]
 8007e8c:	605c      	str	r4, [r3, #4]
 8007e8e:	e7c9      	b.n	8007e24 <_free_r+0x24>
 8007e90:	bd38      	pop	{r3, r4, r5, pc}
 8007e92:	bf00      	nop
 8007e94:	200005f0 	.word	0x200005f0

08007e98 <_malloc_r>:
 8007e98:	b570      	push	{r4, r5, r6, lr}
 8007e9a:	1ccd      	adds	r5, r1, #3
 8007e9c:	f025 0503 	bic.w	r5, r5, #3
 8007ea0:	3508      	adds	r5, #8
 8007ea2:	2d0c      	cmp	r5, #12
 8007ea4:	bf38      	it	cc
 8007ea6:	250c      	movcc	r5, #12
 8007ea8:	2d00      	cmp	r5, #0
 8007eaa:	4606      	mov	r6, r0
 8007eac:	db01      	blt.n	8007eb2 <_malloc_r+0x1a>
 8007eae:	42a9      	cmp	r1, r5
 8007eb0:	d903      	bls.n	8007eba <_malloc_r+0x22>
 8007eb2:	230c      	movs	r3, #12
 8007eb4:	6033      	str	r3, [r6, #0]
 8007eb6:	2000      	movs	r0, #0
 8007eb8:	bd70      	pop	{r4, r5, r6, pc}
 8007eba:	f000 f88a 	bl	8007fd2 <__malloc_lock>
 8007ebe:	4a21      	ldr	r2, [pc, #132]	; (8007f44 <_malloc_r+0xac>)
 8007ec0:	6814      	ldr	r4, [r2, #0]
 8007ec2:	4621      	mov	r1, r4
 8007ec4:	b991      	cbnz	r1, 8007eec <_malloc_r+0x54>
 8007ec6:	4c20      	ldr	r4, [pc, #128]	; (8007f48 <_malloc_r+0xb0>)
 8007ec8:	6823      	ldr	r3, [r4, #0]
 8007eca:	b91b      	cbnz	r3, 8007ed4 <_malloc_r+0x3c>
 8007ecc:	4630      	mov	r0, r6
 8007ece:	f000 f863 	bl	8007f98 <_sbrk_r>
 8007ed2:	6020      	str	r0, [r4, #0]
 8007ed4:	4629      	mov	r1, r5
 8007ed6:	4630      	mov	r0, r6
 8007ed8:	f000 f85e 	bl	8007f98 <_sbrk_r>
 8007edc:	1c43      	adds	r3, r0, #1
 8007ede:	d124      	bne.n	8007f2a <_malloc_r+0x92>
 8007ee0:	230c      	movs	r3, #12
 8007ee2:	4630      	mov	r0, r6
 8007ee4:	6033      	str	r3, [r6, #0]
 8007ee6:	f000 f875 	bl	8007fd4 <__malloc_unlock>
 8007eea:	e7e4      	b.n	8007eb6 <_malloc_r+0x1e>
 8007eec:	680b      	ldr	r3, [r1, #0]
 8007eee:	1b5b      	subs	r3, r3, r5
 8007ef0:	d418      	bmi.n	8007f24 <_malloc_r+0x8c>
 8007ef2:	2b0b      	cmp	r3, #11
 8007ef4:	d90f      	bls.n	8007f16 <_malloc_r+0x7e>
 8007ef6:	600b      	str	r3, [r1, #0]
 8007ef8:	18cc      	adds	r4, r1, r3
 8007efa:	50cd      	str	r5, [r1, r3]
 8007efc:	4630      	mov	r0, r6
 8007efe:	f000 f869 	bl	8007fd4 <__malloc_unlock>
 8007f02:	f104 000b 	add.w	r0, r4, #11
 8007f06:	1d23      	adds	r3, r4, #4
 8007f08:	f020 0007 	bic.w	r0, r0, #7
 8007f0c:	1ac3      	subs	r3, r0, r3
 8007f0e:	d0d3      	beq.n	8007eb8 <_malloc_r+0x20>
 8007f10:	425a      	negs	r2, r3
 8007f12:	50e2      	str	r2, [r4, r3]
 8007f14:	e7d0      	b.n	8007eb8 <_malloc_r+0x20>
 8007f16:	684b      	ldr	r3, [r1, #4]
 8007f18:	428c      	cmp	r4, r1
 8007f1a:	bf16      	itet	ne
 8007f1c:	6063      	strne	r3, [r4, #4]
 8007f1e:	6013      	streq	r3, [r2, #0]
 8007f20:	460c      	movne	r4, r1
 8007f22:	e7eb      	b.n	8007efc <_malloc_r+0x64>
 8007f24:	460c      	mov	r4, r1
 8007f26:	6849      	ldr	r1, [r1, #4]
 8007f28:	e7cc      	b.n	8007ec4 <_malloc_r+0x2c>
 8007f2a:	1cc4      	adds	r4, r0, #3
 8007f2c:	f024 0403 	bic.w	r4, r4, #3
 8007f30:	42a0      	cmp	r0, r4
 8007f32:	d005      	beq.n	8007f40 <_malloc_r+0xa8>
 8007f34:	1a21      	subs	r1, r4, r0
 8007f36:	4630      	mov	r0, r6
 8007f38:	f000 f82e 	bl	8007f98 <_sbrk_r>
 8007f3c:	3001      	adds	r0, #1
 8007f3e:	d0cf      	beq.n	8007ee0 <_malloc_r+0x48>
 8007f40:	6025      	str	r5, [r4, #0]
 8007f42:	e7db      	b.n	8007efc <_malloc_r+0x64>
 8007f44:	200005f0 	.word	0x200005f0
 8007f48:	200005f4 	.word	0x200005f4

08007f4c <_realloc_r>:
 8007f4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f4e:	4607      	mov	r7, r0
 8007f50:	4614      	mov	r4, r2
 8007f52:	460e      	mov	r6, r1
 8007f54:	b921      	cbnz	r1, 8007f60 <_realloc_r+0x14>
 8007f56:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007f5a:	4611      	mov	r1, r2
 8007f5c:	f7ff bf9c 	b.w	8007e98 <_malloc_r>
 8007f60:	b922      	cbnz	r2, 8007f6c <_realloc_r+0x20>
 8007f62:	f7ff ff4d 	bl	8007e00 <_free_r>
 8007f66:	4625      	mov	r5, r4
 8007f68:	4628      	mov	r0, r5
 8007f6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f6c:	f000 f833 	bl	8007fd6 <_malloc_usable_size_r>
 8007f70:	42a0      	cmp	r0, r4
 8007f72:	d20f      	bcs.n	8007f94 <_realloc_r+0x48>
 8007f74:	4621      	mov	r1, r4
 8007f76:	4638      	mov	r0, r7
 8007f78:	f7ff ff8e 	bl	8007e98 <_malloc_r>
 8007f7c:	4605      	mov	r5, r0
 8007f7e:	2800      	cmp	r0, #0
 8007f80:	d0f2      	beq.n	8007f68 <_realloc_r+0x1c>
 8007f82:	4631      	mov	r1, r6
 8007f84:	4622      	mov	r2, r4
 8007f86:	f7ff ff17 	bl	8007db8 <memcpy>
 8007f8a:	4631      	mov	r1, r6
 8007f8c:	4638      	mov	r0, r7
 8007f8e:	f7ff ff37 	bl	8007e00 <_free_r>
 8007f92:	e7e9      	b.n	8007f68 <_realloc_r+0x1c>
 8007f94:	4635      	mov	r5, r6
 8007f96:	e7e7      	b.n	8007f68 <_realloc_r+0x1c>

08007f98 <_sbrk_r>:
 8007f98:	b538      	push	{r3, r4, r5, lr}
 8007f9a:	2300      	movs	r3, #0
 8007f9c:	4c05      	ldr	r4, [pc, #20]	; (8007fb4 <_sbrk_r+0x1c>)
 8007f9e:	4605      	mov	r5, r0
 8007fa0:	4608      	mov	r0, r1
 8007fa2:	6023      	str	r3, [r4, #0]
 8007fa4:	f7f8 fd46 	bl	8000a34 <_sbrk>
 8007fa8:	1c43      	adds	r3, r0, #1
 8007faa:	d102      	bne.n	8007fb2 <_sbrk_r+0x1a>
 8007fac:	6823      	ldr	r3, [r4, #0]
 8007fae:	b103      	cbz	r3, 8007fb2 <_sbrk_r+0x1a>
 8007fb0:	602b      	str	r3, [r5, #0]
 8007fb2:	bd38      	pop	{r3, r4, r5, pc}
 8007fb4:	2000157c 	.word	0x2000157c

08007fb8 <__ascii_wctomb>:
 8007fb8:	b149      	cbz	r1, 8007fce <__ascii_wctomb+0x16>
 8007fba:	2aff      	cmp	r2, #255	; 0xff
 8007fbc:	bf8b      	itete	hi
 8007fbe:	238a      	movhi	r3, #138	; 0x8a
 8007fc0:	700a      	strbls	r2, [r1, #0]
 8007fc2:	6003      	strhi	r3, [r0, #0]
 8007fc4:	2001      	movls	r0, #1
 8007fc6:	bf88      	it	hi
 8007fc8:	f04f 30ff 	movhi.w	r0, #4294967295
 8007fcc:	4770      	bx	lr
 8007fce:	4608      	mov	r0, r1
 8007fd0:	4770      	bx	lr

08007fd2 <__malloc_lock>:
 8007fd2:	4770      	bx	lr

08007fd4 <__malloc_unlock>:
 8007fd4:	4770      	bx	lr

08007fd6 <_malloc_usable_size_r>:
 8007fd6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007fda:	1f18      	subs	r0, r3, #4
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	bfbc      	itt	lt
 8007fe0:	580b      	ldrlt	r3, [r1, r0]
 8007fe2:	18c0      	addlt	r0, r0, r3
 8007fe4:	4770      	bx	lr
	...

08007fe8 <_init>:
 8007fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fea:	bf00      	nop
 8007fec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007fee:	bc08      	pop	{r3}
 8007ff0:	469e      	mov	lr, r3
 8007ff2:	4770      	bx	lr

08007ff4 <_fini>:
 8007ff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ff6:	bf00      	nop
 8007ff8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ffa:	bc08      	pop	{r3}
 8007ffc:	469e      	mov	lr, r3
 8007ffe:	4770      	bx	lr
